{-|
Module      : Messages
Description : Output messages

This module contains a huge data type with many constructors, each representing
a different message that the script presentation engine may output. Any that it
doesn't know about will be regurgitated intact using 'MsgUnprocessed'. Others
are converted at some point, probably using 'imsg2doc' or 'imsg2doc_html', to a
message in natural language. In principle, the program's output can be
converted this way to other languages by defining a new case for that language
in the 'RenderMessage' instance for 'ScriptMessage'. So far only English is
supported (and even then it is incomplete).

This module was originally written via the Yesod library @shakespeare-i18n@, with
messages defined in external files. Unfortunately, due to performance bugs in
GHC, compiling this module this way was unacceptably slow, which made adding
new cases far more tedious than it should have been. Most of this file consists
of code generated by the @shakespeare-i18n@ Template Haskell splice function
'Text.Shakespeare.I18N.mkMessage', dumped with the @-ddump-splices@ option to
GHC, and edited for human readability.

Functions used in 'ScriptMessage''s instance of the localization method
'Text.Shakespeare.I18N.renderMessage' are defined in "MessageTools". The
Template Haskell version of this module required them to be in a separate
module due to TH stage restrictions.
-}
module HOI4.Messages (
        ScriptMessage (..)
    ,   StatementHandler
    ,   template, templateDoc
    ,   message, messageText
    ,   imsg2doc, imsg2doc_html
    ,   IndentedMessage, IndentedMessages
    ) where

import Data.Monoid ((<>))

import Data.Text (Text)
import qualified Data.Text as T

import Text.PrettyPrint.Leijen.Text (Doc)
import qualified Text.PrettyPrint.Leijen.Text as PP
import Text.Shakespeare.I18N (RenderMessage (..))

import Abstract (GenericStatement)
import qualified Doc
import MessageTools -- import everything
import SettingsTypes (PPT, getLangs, GameData (..), IsGameData (..))

-- | Dummy type required by the Shakespeare machinery.
data Script = Script

-- | The abstract message type. Each constructor is a localizable message.
--
-- To add a new message, add a constructor here (using the same names as an
-- existing constructor if possible), then add a case for it in the
-- 'RenderMessage' instance for 'ScriptMessage'.
data ScriptMessage
    = MsgUnprocessed {scriptMessageMsg :: Text}
    -- scope messages
    -- trigger scopes
    | MsgAllAlliedCountry
    | MsgAllArmyLeader
    | MsgAllCharacter
    | MsgAllControlledState
    | MsgAllCoreState
    | MsgAllCountry
    | MsgAllCountryWithOriginalTag {scriptMessageWho :: Text}
    | MsgAllEnemyCountry
    | MsgAllGuaranteedCountry
    | MsgAllNavyLeader
    | MsgAllNeighborCountry
    | MsgAllNeighborState
    | MsgAllOccupiedCountry
    | MsgAllOperativeLeader
    | MsgAllOtherCountry
    | MsgAllOwnedState
    | MsgAllState
    | MsgAllSubjectCountries
    | MsgAllUnitLeader
    | MsgAnyAlliedCountry
    | MsgAnyArmyLeader
    | MsgAnyCharacter
    | MsgAnyControlledState
    | MsgAnyCoreState
    | MsgAnyCountry
    | MsgAnyCountryWithOriginalTag {scriptMessageWho :: Text}
    | MsgAnyEnemyCountry
    | MsgAnyGuaranteedCountry
    | MsgAnyHomeAreaNeighborCountry
    | MsgAnyNavyLeader
    | MsgAnyNeighborCountry
    | MsgAnyNeighborState
    | MsgAnyOccupiedCountry
    | MsgAnyOperativeLeader
    | MsgAnyOtherCountry
    | MsgAnyOwnedState
    | MsgAnyState
    | MsgAnySubjectCountry
    | MsgAnyUnitLeader
    -- effect scope messages
    | MsgEveryArmyLeader
    | MsgEveryCharacter
    | MsgEveryControlledState
    | MsgEveryCoreState
    | MsgEveryCountry
    | MsgEveryCountryWithOriginalTag {scriptMessageWho :: Text}
    | MsgEveryEnemyCountry
    | MsgEveryNavyLeader
    | MsgEveryNeighborCountry
    | MsgEveryNeighborState
    | MsgEveryOccupiedCountry
    | MsgEveryOperative
    | MsgEveryOtherCountry
    | MsgEveryOwnedState
    | MsgEveryState
    | MsgEverySubjectCountry
    | MsgEveryUnitLeader
    | MsgGlobalEveryArmyLeader
    | MsgRandomArmyLeader
    | MsgRandomCharacter
    | MsgRandomControlledState
    | MsgRandomCoreState
    | MsgRandomCountry
    | MsgRandomCountryWithOriginalTag {scriptMessageWho :: Text}
    | MsgRandomEnemyCountry
    | MsgRandomNavyLeader
    | MsgRandomNeighborCountry
    | MsgRandomNeighborState
    | MsgRandomOccupiedCountry
    | MsgRandomOperative
    | MsgRandomOtherCountry
    | MsgRandomOwnedControlledState
    | MsgRandomOwnedState
    | MsgRandomState
    | MsgRandomSubjectCountry
    | MsgRandomUnitLeader
    -- dual scope messages
    | MsgROOT
    | MsgROOTSCOPECountry
    | MsgROOTSCOPEState
    | MsgROOTSCOPEOperative
    | MsgROOTSCOPEUnitLeader
    | MsgROOTSCOPECharacter
    | MsgROOTCountry
    | MsgROOTCountryAsOther
    | MsgROOTState
    | MsgROOTStateOwner
    | MsgROOTStateAsOther
    | MsgROOTOperative
    | MsgROOTOperativeOwner
    | MsgROOTOperativeAsOther
    | MsgROOTUnitLeader
    | MsgROOTUnitLeaderOwner
    | MsgROOTUnitLeaderAsOther

    | MsgPREV
    | MsgPREVSCOPECharacter
    | MsgPREVSCOPECountry
    | MsgPREVSCOPEOperative
    | MsgPREVSCOPEState
    | MsgPREVSCOPEUnitLeader
    | MsgPREVCharacter
    | MsgPREVCharacterOwner
    | MsgPREVCharacterAsOther
    | MsgPREVCountry
    | MsgPREVCountryAsOther
    | MsgPREVState
    | MsgPREVStateOwner
    | MsgPREVStateAsOther
    | MsgPREVOperative
    | MsgPREVOperativeOwner
    | MsgPREVOperativeAsOther
    | MsgPREVUnitLeader
    | MsgPREVUnitLeaderOwner
    | MsgPREVUnitLeaderAsOther
    | MsgTHISCharacter
    | MsgTHISCharacterOwner
    | MsgTHISCharacterAsOther
    | MsgTHISCountry
    | MsgTHISCountryAsOther
    | MsgTHISState
    | MsgTHISStateOwner
    | MsgTHISStateAsOther
    | MsgTHISOperative
    | MsgTHISOperativeOwner
    | MsgTHISOperativeAsOther
    | MsgTHISUnitLeader
    | MsgTHISUnitLeaderOwner
    | MsgTHISUnitLeaderAsOther

    | MsgFROM
    | MsgFROMSCOPE

    | MsgOverlord
    | MsgOwner
    | MsgController
    | MsgCapital
    | MsgState {scriptMessageWhere :: Text}
    | MsgIsState {scriptMessageWhere :: Text}
    | MsgSCOPEEventTarget {scriptMessageTag :: Text}
    | MsgEventTargetVar {scriptMessageTag :: Text}
    | MsgSCOPEVariable {scriptMessageTag :: Text}
    | MsgVariable {scriptMessageTag :: Text}
    -- flow control messages
    | MsgAnd
    | MsgNot
    | MsgOr
    | MsgCountTriggers
    | MsgHiddenTriggers
    | MsgCustomTriggerTooltip
    | MsgHiddenEffect
    | MsgElse
    | MsgElseIf
    | MsgIf
    | MsgLimit
    | MsgPrioritize {scriptMessageWhat :: Text}
    | MsgOrignalTagToCheck {scriptMessageWho :: Text}
    | MsgWhile
    | MsgFor
    | MsgRandom
    | MsgRandomList
    | MsgRandomChance {scriptMessageChance :: Double}
    | MsgRandomVarChance {scriptMessageWhat :: Text}
    | MsgRandomChanceHOI4 {scriptMessageChance :: Double, scriptMessageAmt :: Double}
    -- other messages to be sorted
    | MsgYes {scriptMessageIcon :: Text}
    | MsgNo {scriptMessageIcon :: Text}
    | MsgAddCardinal
    | MsgHeirDies {scriptMessageYn :: Bool}
    | MsgRulerDies
    | MsgKillCountryLeader
    | MsgLoseCardinal
    | MsgLeaveHRE
    | MsgRetireCountryLeader
    | MsgIsJanissaryMod
    | MsgIsRajputMod
    | MsgIsImperialMod
    | MsgGainADM {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainAT {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainAuth {scriptMessageAmt :: Double}
    | MsgDrillGainMod {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainBT {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainBP {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainBM {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainDIP {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAddExtraStateSharedBuildingSlots {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainDoom {scriptMessageAmt :: Double}
    | MsgHeirGainClaim {scriptMessageAmt :: Double}
    | MsgGainDevotion {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainHordeUnity {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainImperialAuthority {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainKarma {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainLegitimacy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainMIL {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainNavyTradition {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainPapalInfluence {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainPoliticalPower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainPrestige {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainWarExhaustion {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainYearlyManpower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainADMSkill {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainDIPSkill {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainMILSkill {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainHeirADMSkill {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainHeirDIPSkill {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainHeirMILSkill {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainSiegeProgress {scriptMessageAmt :: Double}
    | MsgGainPatAuth {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainMysticism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainLegalism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgStrengthenStatists {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgStrengthenOrangists {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainRepTrad {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainRevolutionaryZeal {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainInflation {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainLocalAutonomy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgReformDesire {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainReformDesire {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainManpower {scriptMessageIcon :: Text, scriptMessageLoc :: Text, scriptMessageAmt :: Double}
    | MsgGainLocPC {scriptMessageIcon :: Text, scriptMessageLoc :: Text, scriptMessageAmt :: Double}
    | MsgGainMercantilism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainMP {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainMPFrac {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSeparatism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCountryMod
    | MsgProvMod
    | MsgPermanentProvMod
    | MsgRulerMod
    | MsgTradeMod
    | MsgAddMod {scriptMessageModid :: Text, scriptMessageName :: Text, scriptMessageDays :: Double}
    | MsgGainMod {scriptMessageModid :: Text, scriptMessageType :: Text, scriptMessageName :: Text}
    | MsgGainModDur {scriptMessageModid :: Text, scriptMessageType :: Text, scriptMessageName :: Text, scriptMessageDays :: Double}
    | MsgGainModPow {scriptMessageModid :: Text, scriptMessageType :: Text, scriptMessageName :: Text, scriptMessagePow :: Double}
    | MsgGainModPowDur {scriptMessageModid :: Text, scriptMessageType :: Text, scriptMessageName :: Text, scriptMessagePow :: Double, scriptMessageDays :: Double}
    | MsgActorGainsMod {scriptMessageModid :: Text, scriptMessageWho :: Text, scriptMessageType :: Text, scriptMessageName :: Text}
    | MsgActorGainsModDur {scriptMessageModid :: Text, scriptMessageWho :: Text, scriptMessageType :: Text, scriptMessageName :: Text, scriptMessageDays :: Double}
    | MsgActorGainsModPow {scriptMessageModid :: Text, scriptMessageWho :: Text, scriptMessageType :: Text, scriptMessageName :: Text, scriptMessagePow :: Double}
    | MsgActorGainsModPowDur {scriptMessageModid :: Text, scriptMessageWho :: Text, scriptMessageType :: Text, scriptMessageName :: Text, scriptMessagePow :: Double, scriptMessageDays :: Double}
    | MsgHasModifier {scriptMessageModid :: Text, scriptMessageKind :: Text, scriptMessageName :: Text}
    | MsgRemoveModifier {scriptMessageModid :: Text, scriptMessageKind :: Text, scriptMessageName :: Text}
    | MsgArea
    | MsgChangeGovernment {scriptMessageWhat :: Text}
    | MsgCreateFaction {scriptMessageWhat :: Text}
    | MsgContinentIs {scriptMessageWhat :: Text}
    | MsgContinentIsAs {scriptMessageWhat :: Text}
    | MsgCultureIs {scriptMessageWhat :: Text}
    | MsgCultureIsAs {scriptMessageWho :: Text}
    | MsgCultureIsGroup {scriptMessageWhat :: Text}
    | MsgCultureGroupAs {scriptMessageWhat :: Text}
    | MsgRulerIsDynasty {scriptMessageWhat :: Text}
    | MsgRulerIsSameDynasty {scriptMessageWho :: Text}
    | MsgHeirNationality {scriptMessageWhat :: Text}
    | MsgHeirNationalityAs {scriptMessageWho :: Text}
    | MsgHeirReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHeirReligionAs {scriptMessageWho :: Text}
    | MsgSetHeirReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgSetHeirReligionAs {scriptMessageWho :: Text}
    | MsgDisasterEnds {scriptMessageWhat :: Text}
    | MsgGovernmentIs {scriptMessageWhat :: Text}
    | MsgGovernmentIsIcon {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasAdvisor {scriptMessageWhom :: Text}
    | MsgHasAdvisorType {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasTech {scriptMessageWhat :: Text}
    | MsgHasTerrain {scriptMessageWhat :: Text}
    | MsgCavalrySpawnsCountry {scriptMessageWhom :: Text}
    | MsgCavalrySpawnsProvince {scriptMessageWhere :: Text}
    | MsgInfantrySpawnsCountry {scriptMessageWhom :: Text}
    | MsgInfantrySpawnsProvince {scriptMessageWhere :: Text}
    | MsgAdvisorDies {scriptMessageWho :: Text}
    | MsgDominantCultureIs {scriptMessageWhat :: Text}
    | MsgDominantCultureIsAs {scriptMessageWhat :: Text}
    | MsgDiplomaticRelation {scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgPrimaryCultureIs {scriptMessageWhat :: Text}
    | MsgPrimaryCultureIsAs {scriptMessageWhat :: Text}
    | MsgRegionIs {scriptMessageWhat :: Text}
    | MsgSuperRegionIs {scriptMessageWhat :: Text}
    | MsgTooltip {scriptMessageWhat :: Text}
    | MsgCustomEffectTooltip {scriptMessageWhat :: Text}
    | MsgLoseAdvisor {scriptMessageWho :: Text}
    | MsgRemoveFromEstate {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgDisasterOngoing {scriptMessageWhat :: Text}
    | MsgProvinceIs {scriptMessageWhat :: Text}
    | MsgRemoveStateClaim {scriptMessageWhat :: Text}
    | MsgOwnsState {scriptMessageWhat :: Text}
    | MsgOwnsCore {scriptMessageWhat :: Text}
    | MsgControlsState {scriptMessageWhat :: Text}
    | MsgHasFullControlOfState {scriptMessageWhat :: Text}
    | MsgAdvisorExists {scriptMessageAdvisorID :: Double}
    | MsgAdvisorIsEmployed {scriptMessageAdvisorID :: Double}
    | MsgClearFlag {scriptMessageFlagType :: Text, scriptMessageName :: Text}
    | MsgHasFlag {scriptMessageFlagType :: Text, scriptMessageName :: Text}
    | MsgHasFlagFor {scriptMessageFlagType :: Text, scriptMessageName :: Text, scriptMessageAmtText :: Text, scriptMessageTime :: Text, scriptMessageDate :: Text}
    | MsgSetFlag {scriptMessageFlagType :: Text, scriptMessageName :: Text}
    | MsgSetFlagFor {scriptMessageFlagType :: Text, scriptMessageName :: Text, scriptMessageAmtText :: Text, scriptMessageDaysText :: Text}
    | MsgHadFlag {scriptMessageFlagType :: Text, scriptMessageName :: Text, scriptMessageDays :: Double}
    | MsgModifyFlag {scriptMessageFlagType :: Text, scriptMessageFlag :: Text, scriptMessageAmt :: Double}
    | MsgCharacterFlag
    | MsgCountryFlag
    | MsgGlobalFlag
    | MsgStateFlag
    | MsgUnitLeaderFlag
    | MsgColonySettlers {scriptMessageAmt :: Double}
    | MsgWasAtWar {scriptMessageAmt :: Double}
    | MsgHasAddedTensionAmount {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHasManpower {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHasStability {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHasWarSupport {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHeirAge {scriptMessageAmt :: Double}
    | MsgYearIs {scriptMessageAmt :: Double}
    | MsgNumLoans {scriptMessageAmt :: Double}
    | MsgNumMercs {scriptMessageAmt :: Double}
    | MsgNumMissionaries {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumPorts {scriptMessageAmt :: Double}
    | MsgNumRebelArmies {scriptMessageAmt :: Double}
    | MsgNumEmbargoes {scriptMessageAmt :: Double}
    | MsgUnitsInProvince {scriptMessageAmt :: Double}
    | MsgNumCities {scriptMessageAmt :: Double}
    | MsgNumCitiesThan {scriptMessageWhom :: Text}
    | MsgToleranceToThis {scriptMessageAmt :: Double}
    | MsgRulerADM {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgADMTech {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgArmyTradition {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgArmyTraditionAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgYearlyArmyTradition {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgArmyTraditionFromBattles {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgBaseManpower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgBaseProduction {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgBaseTax {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCreateAdmiral {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCreateConquistador {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCreateExplorer {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCreateGeneral {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgDevelopment {scriptMessageIcon :: Text, scriptMessageDevelopment :: Double}
    | MsgDevelopmentAs {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgRulerDIP {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgDIPTech {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHordeUnity {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgYearlyHordeUnity {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgKarma {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLegitimacy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLegitimacyAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgLegitimacyEquivalent {scriptMessageAmt :: Double}
    | MsgYearlyLegitimacy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgRulerMIL {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMILTech {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumAllies {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumCardinals {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumColonists {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumHeavyShips {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumHeavyShipsMatches {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgNumLightShips {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumLightShipsMatches {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgNumGalleyShips {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumGalleyShipsMatches {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgNumTransportShips {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumTransportShipsMatches {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgNumMerchants {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgStability {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTotalDevelopment {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTotalDevelopmentAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgTotalCardinals {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgUnrest {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonthlyIncome {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonthlyIncomeAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgWarExhaustion {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonthlyWarExhaustion {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgWarScore {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgRepTrad {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgYearlyRepTrad {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgInflation {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgInflationAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgLocalAutonomy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonthlylAutonomyChange {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgManpower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgManpowerPercentage {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMercantilism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgChangeGoods {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgCreateAdvisor {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasIdeaGroup {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgProducesGoods {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgProducesSameGoods {scriptMessageWhere :: Text}
    | MsgEstateExists {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasEstate {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAssignToEstate {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgRulerIsGeneral {scriptMessageIcon :: Text, scriptMessage_what :: Text}
    | MsgAlliedWith {scriptMessageWhom :: Text}
    | MsgCedeProvinceTo {scriptMessageWhom :: Text}
    | MsgIsControlledBy {scriptMessageWhom :: Text}
    | MsgHasDefensiveWarWith {scriptMessageWhom :: Text}
    | MsgDiscoverCountry {scriptMessageWhom :: Text}
    | MsgDiscoverProvince {scriptMessageWhat :: Text}
    | MsgAddClaimBy {scriptMessageWho :: Text}
    | MsgGainCore {scriptMessageWho :: Text}
    | MsgAddStateClaim {scriptMessageWhat :: Text}
    | MsgAddStateCore {scriptMessageWhat :: Text}
    | MsgGainPermanentClaimCountry {scriptMessageWho :: Text}
    | MsgGainPermanentClaimProvince {scriptMessageWhere :: Text}
    | MsgHasDiscovered {scriptMessageWhomOrWhere :: Text}
    | MsgDiscoveredBy {scriptMessageWhom :: Text}
    | MsgSameContinent {scopeIsCountry :: Bool, paramIsCountry :: Bool, scriptMessageWhomOrWhere :: Text}
    | MsgInheritTechnology {scriptMessageWhom :: Text}
    | MsgNeighbors {scriptMessageWhom :: Text}
    | MsgIsRival {scriptMessageWhom :: Text}
    | MsgIsSubjectOf {scriptMessageWhom :: Text}
    | MsgLoseCoreCountry {scriptMessageWho :: Text}
    | MsgLoseCoreProvince {scriptMessageWhere :: Text}
    | MsgRoyalMarriageWith {scriptMessageWhom :: Text}
    | MsgIsOwnedBy {scriptMessageWhom :: Text}
    | MsgReleaseVassal {scriptMessageWhom :: Text}
    | MsgUnderSiegeBy {scriptMessageWhom :: Text}
    | MsgSupportIndependenceOf {scriptMessageWhom :: Text}
    | MsgCountryIs {scriptMessageWho :: Text}
    | MsgTruceWith {scriptMessageWhom :: Text}
    | MsgHasWarWith {scriptMessageWhom :: Text}
    | MsgHasWarTogetherWith {scriptMessageWhom :: Text}
    | MsgMakeWhitePeace {scriptMessageWhom :: Text}
    | MsgCountryExists {scriptMessageWho :: Text}
    | MsgExists {scriptMessageYn :: Bool}
    | MsgSameReligion {scriptMessageWhom :: Text}
    | MsgReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgSameReligionGroup {scriptMessageWhom :: Text}
    | MsgReligionGroup {scriptMessage_ :: Text, scriptMessageWhat :: Text}
    | MsgChangeSameReligion {scriptMessageWhom :: Text}
    | MsgChangeReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgChangeRulerSameReligion {scriptMessageWhom :: Text}
    | MsgChangeRulerReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgRulerReligionIs {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgRulerReligionIsSame {scriptMessageWhom :: Text}
    | MsgRulerCultureIs {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgRulerCultureIsSame {scriptMessageWhom :: Text}
    | MsgIsCoreOf {scriptMessageWhom :: Text}
    | MsgHasCoreOn {scriptMessageWhat :: Text}
    | MsgHasClaim {scriptMessageWho :: Text}
    | MsgHasClaimOn {scriptMessageWhat :: Text}
    | MsgIsAIControlled {scriptMessageYn :: Bool}
    | MsgHasCardinal {scriptMessageYn :: Bool}
    | MsgHasCapitulated {scriptMessageYn :: Bool}
    | MsgHasConsort {scriptMessageYn :: Bool}
    | MsgHasHeir {scriptMessageYn :: Bool}
    | MsgHasHeirNamed {scriptMessageWhom :: Text}
    | MsgHasOwnerCulture {scriptMessageYn :: Bool}
    | MsgHasOwnerAcceptedCulture {scriptMessageYn :: Bool}
    | MsgHasOwnerReligion {scriptMessageYn :: Bool}
    | MsgHasPort {scriptMessageYn :: Bool}
    | MsgHasSeatInParliament {scriptMessageYn :: Bool}
    | MsgIsInRegency {scriptMessageYn :: Bool}
    | MsgIsInExtendedRegency {scriptMessageYn :: Bool}
    | MsgIsInFaction {scriptMessageYn :: Bool}
    | MsgIsInHomeArea {scriptMessageYn :: Bool}
    | MsgUnderSiege {scriptMessageYn :: Bool}
    | MsgHasWar {scriptMessageYn :: Bool}
    | MsgIsCapital {scriptMessageYn :: Bool}
    | MsgIsCity {scriptMessageYn :: Bool}
    | MsgIsCoastal {scriptMessageYn :: Bool}
    | MsgIsColony {scriptMessageYn :: Bool}
    | MsgIsEmperor {scriptMessageYn :: Bool}
    | MsgIsFemale {scriptMessageYn :: Bool}
    | MsgIsInCapitalArea {scriptMessageYn :: Bool}
    | MsgIsLesserInUnion {scriptMessageYn :: Bool}
    | MsgIsLooted {scriptMessageYn :: Bool}
    | MsgIsOverseas {scriptMessageYn :: Bool}
    | MsgIsPartOfHRE {scriptMessageYn :: Bool}
    | MsgIsCenterOfReformation {scriptMessageYn :: Bool}
    | MsgIsSubject {scriptMessageYn :: Bool}
    | MsgPapacyIsActive {scriptMessageYn :: Bool}
    | MsgHasBeenPlayer {scriptMessageYn :: Bool}
    | MsgIsStatistsInPower {scriptMessageYn :: Bool}
    | MsgIsOrangistsInPower {scriptMessageYn :: Bool}
    | MsgGainCB {scriptMessageCbtype :: Text, scriptMessageWhom :: Text}
    | MsgGainCBDuration {scriptMessageCbtype :: Text, scriptMessageWhom :: Text, scriptMessageMonths :: Double}
    | MsgReverseGainCB {scriptMessageCbtype :: Text, scriptMessageWho :: Text}
    | MsgReverseGainCBDuration {scriptMessageCbtype :: Text, scriptMessageWho :: Text, scriptMessageMonths :: Double}
    | MsgFactionGainInfluence {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgFactionHasInfluence {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgFactionInPower {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgHasFaction {scriptMessageWhat :: Text}
    | MsgHasFactions {scriptMessageYn :: Bool}
    | MsgHasAdoptedCult {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasAutonomyState {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasUnlockedCult {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasBuilding {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgIndefinitely
    | MsgForDays {scriptMessageDays :: Double}
    | MsgEstateLoyalty {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double}
    | MsgEstateTerritory {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double}
    | MsgEstateInfluence {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double}
    | MsgAddEstateLoyalty {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double}
    | MsgAddEstateInfluence {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double}
    | MsgEstateLoyaltyModifier {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double, scriptMessageDur :: Text}
    | MsgEstateInfluenceModifier {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double, scriptMessageDur :: Text}
    | MsgAddOpinion {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgReverseAddOpinion {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWho :: Text}
    | MsgAddOpinionDur {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text, scriptMessageYears :: Double}
    | MsgReverseAddOpinionDur {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWho :: Text, scriptMessageYears :: Double}
    | MsgMutualOpinion {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgMutualOpinionDur {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text, scriptMessageDays :: Double}
    | MsgAddNamedThreat {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageWhom :: Text}
    | MsgAddTechBonus {scriptMessageAmt :: Double, scriptMessageName :: Text, scriptMessageUses :: Double}
    | MsgAddTechBonusAhead {scriptMessageAmt :: Double, scriptMessageName :: Text, scriptMessageUses :: Double}
    | MsgAddTechBonusAheadBoth {scriptMessageBonus :: Double, scriptMessageYearahead :: Double, scriptMessageName :: Text, scriptMessageUses :: Double}
    | MsgAddToWar {scriptMessageWho :: Text, scriptMessageWhom :: Text, scriptMessageWhy :: Text}
    | MsgCreateEquipmentVariant {scriptMessageWhat :: Text, scriptMessageWhat2 :: Text}
    | MsgCreateWG {scriptMessageWhat :: Text, scriptMessageWhom :: Text, scriptMessageStates :: Text}
    | MsgCreateWGDuration {scriptMessageWhat :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double, scriptMessageStates :: Text}
    | MsgHasOpinionMod {scriptMessageModid :: Text}
    | MsgReverseHasOpinionMod {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgRemoveOpinionMod {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgReverseRemoveOpinionMod {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgAddTreasury {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAddYearsOfIncome {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgDevelCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalDevelopmentCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNewHeir
    | MsgNewHeirAttribs
    | MsgNewConsort
    | MsgNewConsortAttribs
    | MsgBuildToForcelimitLand {scriptMessageInficon :: Text, scriptMessageInfantry :: Double, scriptMessageCavicon :: Text, scriptMessageCavalry :: Double, scriptMessageArticon :: Text, scriptMessageArtillery :: Double}
    | MsgBuildToForcelimitNavy {scriptMessageHeavyicon :: Text, scriptMessageHeavy :: Double, scriptMessageLighticon :: Text, scriptMessageLight :: Double, scriptMessageGallicon :: Text, scriptMessageGalley :: Double, scriptMessageTranspicon :: Text, scriptMessageTransport :: Double}
    | MsgBuildToForcelimit {scriptMessageInficon :: Text, scriptMessageInfantry :: Double, scriptMessageCavicon :: Text, scriptMessageCavalry :: Double, scriptMessageArticon :: Text, scriptMessageArtillery :: Double, scriptMessageHeavyicon :: Text, scriptMessageHeavy :: Double, scriptMessageLighticon :: Text, scriptMessageLight :: Double, scriptMessageGallicon :: Text, scriptMessageGalley :: Double, scriptMessageTranspicon :: Text, scriptMessageTransport :: Double}
    | MsgCountryEvent
    | MsgNewsEvent
    | MsgStateEvent
    | MsgOperativeEvent
    | MsgUnitLeaderEvent
    | MsgTriggerEvent {scriptMessageEvttype :: Text, scriptMessageEvtid :: Text, scriptMessageName :: Text}
    | MsgTriggerEventDays {scriptMessageEvttype :: Text, scriptMessageEvtid :: Text, scriptMessageName :: Text, scriptMessageDays :: Double}
    | MsgTriggerEventTime {scriptMessageEvttype :: Text, scriptMessageEvtid :: Text, scriptMessageName :: Text, scriptMessageTime :: Text}
    | MsgDeclareWarWithCB {scriptMessageWhom :: Text, scriptMessageCb :: Text}
    | MsgDeclareWarOn {scriptMessageWhom :: Text, scriptMessageWhat :: Text, scriptMessageStates :: Text}
    | MsgGainAdvisor {scriptMessageSkill :: Double, scriptMessageDiscount :: Double}
    | MsgGainAdvisorLoc {scriptMessageWhere :: Text, scriptMessageSkill :: Double, scriptMessageDiscount :: Double}
    | MsgGainAdvisorName {scriptMessageName :: Text, scriptMessageSkill :: Double, scriptMessageDiscount :: Double}
    | MsgGainAdvisorNameLoc {scriptMessageName :: Text, scriptMessageWhere :: Text, scriptMessageSkill :: Double, scriptMessageDiscount :: Double}
    | MsgGainAdvisorType {scriptMessageAdvtype :: Text, scriptMessageSkill :: Double, scriptMessageDiscount :: Double}
    | MsgGainAdvisorTypeLoc {scriptMessageAdvtype :: Text, scriptMessageWhere :: Text, scriptMessageSkill :: Double, scriptMessageDiscount :: Double}
    | MsgGainAdvisorTypeName {scriptMessageAdvtype :: Text, scriptMessageName :: Text, scriptMessageSkill :: Double, scriptMessageDiscount :: Double}
    | MsgGainAdvisorTypeNameLoc {scriptMessageAdvtype :: Text, scriptMessageName :: Text, scriptMessageWhere :: Text, scriptMessageSkill :: Double, scriptMessageDiscount :: Double}
    | MsgGainFemaleAdvisor {scriptMessageFemale :: Bool, scriptMessageSkill :: Double, scriptMessageDiscount :: Double}
    | MsgGainFemaleAdvisorLoc {scriptMessageFemale :: Bool, scriptMessageWhere :: Text, scriptMessageSkill :: Double, scriptMessageDiscount :: Double}
    | MsgGainFemaleAdvisorName {scriptMessageFemale :: Bool, scriptMessageName :: Text, scriptMessageSkill :: Double, scriptMessageDiscount :: Double}
    | MsgGainFemaleAdvisorNameLoc {scriptMessageFemale :: Bool, scriptMessageName :: Text, scriptMessageWhere :: Text, scriptMessageSkill :: Double, scriptMessageDiscount :: Double}
    | MsgGainFemaleAdvisorType {scriptMessageFemale :: Bool, scriptMessageAdvtype :: Text, scriptMessageSkill :: Double, scriptMessageDiscount :: Double}
    | MsgGainFemaleAdvisorTypeLoc {scriptMessageFemale :: Bool, scriptMessageAdvtype :: Text, scriptMessageWhere :: Text, scriptMessageSkill :: Double, scriptMessageDiscount :: Double}
    | MsgGainFemaleAdvisorTypeName {scriptMessageFemale :: Bool, scriptMessageAdvtype :: Text, scriptMessageName :: Text, scriptMessageSkill :: Double, scriptMessageDiscount :: Double}
    | MsgGainFemaleAdvisorTypeNameLoc {scriptMessageFemale :: Bool, scriptMessageAdvtype :: Text, scriptMessageName :: Text, scriptMessageWhere :: Text, scriptMessageSkill :: Double, scriptMessageDiscount :: Double}
    | MsgGainScaledAdvisor {scriptMessageAdvtype :: Text, scriptMessageDiscount :: Double}
    | MsgRebelLeaderRuler
    | MsgNewRuler {scriptMessageRegent :: Bool}
    | MsgNewRulerLeader {scriptMessageRegent :: Bool, scriptMessageName :: Text}
    | MsgNewRulerAttribs {scriptMessageRegent :: Bool}
    | MsgNewRulerLeaderAttribs {scriptMessageRegent :: Bool, scriptMessageName :: Text}
    | MsgLeaderRuler {scriptMessageRegent :: Bool, scriptMessageName :: Text}
    | MsgNamed {scriptMessageName :: Text}
    | MsgNewDynMemberDynasty {scriptMessageName :: Text}
    | MsgNewDynMemberDynastyAs {scriptMessageName :: Text}
    | MsgNewDynMemberOriginalDynasty
    | MsgNewDynMemberHistoricDynasty
    | MsgNewDynMemberAge {scriptMessageAmt :: Double}
    | MsgNewDynMemberAdm {scriptMessageFixed :: Bool, scriptMessageAmt :: Double}
    | MsgNewDynMemberDip {scriptMessageFixed :: Bool, scriptMessageAmt :: Double}
    | MsgNewDynMemberMil {scriptMessageFixed :: Bool, scriptMessageAmt :: Double}
    | MsgNewDynMemberMaxAdm {scriptMessageAmt :: Double}
    | MsgNewDynMemberMaxDip {scriptMessageAmt :: Double}
    | MsgNewDynMemberMaxMil {scriptMessageAmt :: Double}
    | MsgNewDynMemberClaim {scriptMessageAmt :: Double}
    | MsgNewDynMemberCulture {scriptMessageText :: Text}
    | MsgNewDynMemberCultureAs {scriptMessageText :: Text}
    | MsgNewDynMemberReligion {scriptMessageIcon :: Text, scriptMessageText :: Text}
    | MsgNewDynMemberReligionAs {scriptMessageText :: Text}
    | MsgNewDynMemberHiddenSkills
    | MsgNewDynMemberRandomGender
    | MsgWithGender {scriptMessageMale :: Bool}
    | MsgNewDynMemberMinAge {scriptMessageAge :: Double}
    | MsgNewDynMemberMaxAge {scriptMessageAge :: Double}
    | MsgNewDynMemberBirthdate {scriptMessageDate :: Text}
    | MsgNewDynMemberBlockDisinherit
    | MsgNewDynMemberBastard
    | MsgNewDynMemberCountry {scriptMessageWhere :: Text}
    | MsgNewDynMemberForceRepublicanNames
    | MsgEstateHasInfluenceModifier {scriptMessageIcon :: Text, scriptMessageEstate :: Text, scriptMessageModifier :: Text}
    | MsgEstateHasLoyaltyModifier {scriptMessageIcon :: Text, scriptMessageEstate :: Text, scriptMessageModifier :: Text}
    | MsgTriggerSwitch
    | MsgTriggerSwitchClause {scriptMessageCond :: Text}
    | MsgProvinceHasRebels {scriptMessageIcon :: Text, scriptMessageRtype :: Text}
    | MsgRebelsFriendlyTo {scriptMessageFriend :: Text}
    | MsgRebelsLedBy {scriptMessageLeader :: Text}
    | MsgRebelsGainProgress {scriptMessageAmt :: Double}
    | MsgSpawnRebels {scriptMessageRtype :: Text, scriptMessageSize :: Double, scriptMessageFriend :: Text, scriptMessageLeader :: Text, scriptMessageWin :: Bool, scriptMessageProgress :: Text}
    | MsgRebelsHaveRisen {scriptMessageIcon :: Text, scriptMessageRtype :: Text}
    | MsgAddCoreOf {scriptMessageWho :: Text}
    | MsgGainCoreOnProvince {scriptMessageProv :: Text}
    | MsgHasDLC {scriptMessageIcon :: Text, scriptMessageDlc :: Text}
    | MsgHasEquipment {scriptMessageCompare :: Text, scriptMessageAmt :: Double, scriptMessageWhat :: Text}
    | MsgTechGroup {scriptMessageIcon :: Text, scriptMessageName :: Text}
    | MsgUnlockCult {scriptMessageIcon :: Text, scriptMessageName :: Text}
    | MsgNumOfReligion {scriptMessageIcon :: Text, scriptMessageName :: Text, scriptMessageAmt :: Double}
    | MsgReligiousSchool {scriptSchoolIcon :: Text, scriptSchoolName :: Text, scriptGroupName :: Text}
    | MsgSetReligiousSchool {scriptSchoolIcon :: Text, scriptSchoolName :: Text, scriptGroupName :: Text}
    | MsgIsStrongestTradePower {scriptMessageWho :: Text}
    | MsgAreaIs {scriptMessageWhat :: Text}
    | MsgAreaIsAs {scriptMessageWhat :: Text}
    | MsgDominantReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgDominantReligionAs {scriptMessageWhom :: Text}
    | MsgEnableReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHREReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgSetDemilitarizedZone {scriptMessageYn :: Bool}
    | MsgSetHREReligionLocked {scriptMessageYn :: Bool}
    | MsgSetHREReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgSetHREHereticReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgSignWestphalia
    | MsgHRELeaguesEnabled {scriptMessageYn :: Bool}
    | MsgHREReligionLocked {scriptMessageYn :: Bool}
    | MsgHREWestphalia {scriptMessageYn :: Bool}
    | MsgIsElector {scriptMessageYn :: Bool}
    | MsgNoHREReforms
    | MsgHREPassedReform {scriptMessageWhat :: Text}
    | MsgEnableHRELeagues
    | MsgIsInLeagueWar {scriptMessageYn :: Bool}
    | MsgIsLeagueEnemy {scriptMessageWhom :: Text}
    | MsgIsLeagueFriend {scriptMessageWhom :: Text}
    | MsgReligionYears {scriptMessageIcon :: Text, scriptMessageName :: Text, scriptMessageYears :: Double}
    | MsgHasIdea {scriptMessageWhat :: Text, scriptMessageIcon :: Text, scriptMessageKey :: Text, scriptMessageLoc :: Text}
    | MsgAddIdea {scriptMessageWhat :: Text, scriptMessageIcon :: Text, scriptMessageKey :: Text, scriptMessageLoc :: Text}
    | MsgRemoveIdea {scriptMessageWhat :: Text, scriptMessageIcon :: Text, scriptMessageKey :: Text, scriptMessageLoc :: Text}
    | MsgAddTimedIdea {scriptMessageWhat :: Text, scriptMessageIcon :: Text, scriptMessageKey :: Text, scriptMessageLoc :: Text, scriptMessageDays :: Double}
    | MsgModifyTimedIdea {scriptMessageWhat :: Text, scriptMessageIcon :: Text, scriptMessageKey :: Text, scriptMessageLoc :: Text, scriptMessageDays :: Double}
    | MsgModifyIdea {scriptMessageCategory :: Text, scriptMessageIcon :: Text, scriptMessageKey :: Text, scriptMessageLoc :: Text, scriptMessageCategory2 :: Text, scriptMessageIcon2 :: Text, scriptMessageKey2 :: Text, scriptMessageLoc2 :: Text}
    | MsgReplaceIdea {scriptMessageCategory :: Text, scriptMessageIcon :: Text, scriptMessageKey :: Text, scriptMessageLoc :: Text, scriptMessageCategory2 :: Text, scriptMessageIcon2 :: Text, scriptMessageKey2 :: Text, scriptMessageLoc2 :: Text}
    | MsgEffectBox {scriptMessageLoc :: Text, scriptMessageKey :: Text, scriptMessageIcon :: Text, scriptMessageDesc :: Text}
    | MsgEffectBoxEnd
    | MsgHasReform {scriptMessageWhat :: Text}
    | MsgHasReformTier {scriptMessageAmt :: Double}
    | MsgReligionProvinces {scriptMessageIcon :: Text, scriptMessageName :: Text, scriptMessageAmt :: Double}
    | MsgGoodsProvinces {scriptMessageIcon :: Text, scriptMessageName :: Text, scriptMessageAmt :: Double}
    | MsgHasAristocraticIdea {scriptMessageName :: Text, scriptMessageNum :: Int}
    | MsgHasEconomicIdea {scriptMessageName :: Text, scriptMessageNum :: Int}
    | MsgHasDefensiveIdea {scriptMessageName :: Text, scriptMessageNum :: Int}
    | MsgHasInnovativeIdea {scriptMessageName :: Text, scriptMessageNum :: Int}
    | MsgHasOffensiveIdea {scriptMessageName :: Text, scriptMessageNum :: Int}
    | MsgHasMaritimeIdea {scriptMessageName :: Text, scriptMessageNum :: Int}
    | MsgColonists {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMayExplore
    | MsgGainColonialRange {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSettlerChance {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGlobalSettlers {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGlobalTariffs {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNavalForcelimitMod {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainOverseasCB
    | MsgGainPrimitivesCB
    | MsgNavyTradition {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgYearlyNavyTradition {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHeavyShipCombatAbility {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLightShipCombatAbility {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGalleyCombatAbility {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGlobalShipRepair {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGlobalShipCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgRegimentCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgBlockadeEfficiency {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainSeaRepair
    | MsgPrimitives {scriptMessageYn :: Bool}
    | MsgRulerIsForeigner {scriptMessageYn :: Bool}
    | MsgGlobalTaxModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgBuildCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgYearlyInflationReduction {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgInterestPerAnnum {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGlobalAutonomy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLandMaintenanceMod {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNavalMaintenanceMod {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgProdEff {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgProdEffAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgProdEffBonus {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainReligiousCB
    | MsgMissionaries {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMissionaryMaintenanceCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgStabilityCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMissionaryStrength {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgToleranceHeathen {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgToleranceHeretic {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgToleranceTrue {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPapalInfluence {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgYearlyPapalInfluence {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgYearlyDevotion {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonthlyFervor {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgChurchPowerModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPrestige {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPrestigeAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgYearlyPrestige {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMissionaryStrengthVsHeretics {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCultureConvCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasOpinion {scriptMessageAmtText :: Text, scriptMessageWhom :: Text, scriptMessageCompare :: Text }
    | MsgReverseHasOpinion {scriptMessageAmt :: Double, scriptMessageWhom :: Text}
    | MsgNormalOrHistoricalNations {scriptMessageYn :: Bool}
    | MsgIsCustomNation {scriptMessageYn :: Bool}
    | MsgReligionEnabled {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgCapitalIs {scriptMessageWhat :: Text}
    | MsgFullIdeaGroup {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgTradeIncomePercentage {scriptMessageAmt :: Double}
    | MsgReligiousUnity {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgReligiousUnityBonus {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasADM {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasDIP {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasMIL {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSetRule {scriptMessageAmt :: Double}
    | MsgSetRuleYes {scriptMessageWhat :: Text}
    | MsgSetRuleNo {scriptMessageWhat :: Text}
    | MsgAddDoctrineCostReduction {scriptMessageAmt :: Double, scriptMessageAmt2 :: Double, scriptMessageWhat :: Text}
    | MsgFreeBuildingSlots {scriptMessageCompare :: Text, scriptMessageAmt :: Double, scriptMessageWhat :: Text, scriptMessageYn :: Bool }
    | MsgRankDuchy
    | MsgRankKingdom
    | MsgRankEmpire
    | MsgSetRankDuchy
    | MsgSetRankKingdom
    | MsgSetRankEmpire
    | MsgOverextension {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgRandomNewWorld {scriptMessageYn :: Bool}
    | MsgIsColonialNation {scriptMessageYn :: Bool}
    | MsgIsFormerColonialNation {scriptMessageYn :: Bool}
    | MsgIsFreeOrTributaryTrigger {scriptMessageYn :: Bool}
    | MsgIsNomad {scriptMessageYn :: Bool}
    | MsgReligionReformed {scriptMessageYn :: Bool}
    | MsgChangeTagFrom {scriptMessageWho :: Text}
    | MsgSetInEmpire {scriptMessageYn :: Bool}
    | MsgHasSecondaryReligion {scriptMessageYn :: Bool}
    | MsgSecondaryReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgIsDefenderOfFaith {scriptMessageYn :: Bool}
    | MsgLegitimacyOrHordeUnity {scriptMessageAmt :: Double}
    | MsgCheckVariable {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgChangeTechGroup {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgChangeUnitType {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgNoBaseWeight
    | MsgAIBaseWeight {scriptMessageAmt :: Double}
    | MsgAIFactorOneline {scriptMessageFactor :: Text, scriptMessageMultiplier :: Double}
    | MsgAIAddOneline {scriptMessageFactor :: Text, scriptMessageMultiplier :: Double}
    | MsgAIFactorHeader {scriptMessageMultiplier :: Double}
    | MsgAIAddHeader {scriptMessageMultiplier :: Double}
    | MsgLucky {scriptMessageYn :: Bool}
    | MsgAirExperience {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgArmyExperience {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgNavyExperience {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgHasAdvisorLevel {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageLevel :: Double}
    | MsgNumRoyalMarriages {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgIsBankrupt {scriptMessageYn :: Bool}
    | MsgNumColonialSubjects {scriptMessageAmt :: Double}
    | MsgTradeEfficiency {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTradeEfficiencyBonus {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasWarTaxes {scriptMessageYn :: Bool}
    | MsgRevoltPercentage {scriptMessageAmt :: Double}
    | MsgResetProvinceName {scriptMessageAmt :: Double}
    | MsgHasAnyDisaster {scriptMessageYn :: Bool}
    | MsgHasActivePolicy {scriptMessageWhat :: Text}
    | MsgHasCompletedFocus {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageLoc :: Text}
    | MsgCompleteNationalFocus {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageLoc :: Text}
    | MsgFocus {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageLoc :: Text}
    | MsgFocusProgress {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageLoc :: Text, scriptMessageCompare :: Text}
    | MsgHasArmySize {scriptMessageCompare :: Text, scriptMessageAmt :: Double, scriptMessageWhat :: Text}
    | MsgHasDucats {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasParliament {scriptMessageYn :: Bool}
    | MsgHasReligiousSchool {scriptMessageYn :: Bool}
    | MsgHasTruce {scriptMessageYn :: Bool}
    | MsgNumRebelControlledProvinces {scriptMessageAmt :: Double}
    | MsgFortLevel {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasTradeModifier {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgIsMonth {scriptMessageWhat :: Text}
    | MsgIsSea {scriptMessageYn :: Bool}
    | MsgHeavyShip {scriptMessageWhom :: Text}
    | MsgLightShip {scriptMessageWhom :: Text}
    | MsgGalley {scriptMessageWhom :: Text}
    | MsgGiveGuarantee {scriptMessageWhom :: Text}
    | MsgGiveMilitaryAccess {scriptMessageWhom :: Text}
    | MsgHasMerchant {scriptMessageWho :: Text}
    | MsgNumColonies {scriptMessageAmt :: Double}
    | MsgChangeSameCulture {scriptMessageWhom :: Text}
    | MsgChangeCulture {scriptMessageWhat :: Text}
    | MsgNavalForcelimit {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgBlockade {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCreateAlliance {scriptMessageWhom :: Text}
    | MsgAddLocalUnrest {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGoldIncomePercentage {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgIsTribal {scriptMessageYn :: Bool}
    | MsgSetCapital {scriptMessageWhat :: Text}
    | MsgTransferState {scriptMessageWhat :: Text}
    | MsgChangePrimaryCulture {scriptMessageWhat :: Text}
    | MsgColonialRegion {scriptMessageWhere :: Text}
    | MsgJuniorUnionWith {scriptMessageWhom :: Text}
    | MsgSeniorUnionWith {scriptMessageWhom :: Text}
    | MsgVassalOf {scriptMessageWhom :: Text}
    | MsgOverlordOf {scriptMessageWhom :: Text}
    | MsgSetStateName {scriptMessageWhat :: Text}
    | MsgSetStateCategory {scriptMessageWhat :: Text}
    | MsgRenameCapital {scriptMessageWhat :: Text}
    | MsgOwnsOrVassal {scriptMessageWhere :: Text}
    | MsgIsInColonialRange {scriptMessageWhom :: Text}
    | MsgConstructingGreatProject {scriptMessageWhat :: Text}
    | MsgConstructing {scriptMessageWhat :: Text}
    | MsgStartConstructingGreatProject {scriptMessageWhat :: Text}
    | MsgCancelConstruction
    | MsgYearsOfIncome {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLibertyDesire {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLibertyDesireModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainLibertyDesire {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAlways {scriptMessageYn :: Bool}
    | MsgCapitalCultureDominant
    | MsgNumUnions {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumVassals {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgFreeVassal {scriptMessageWhom :: Text}
    | MsgHasMissionary {scriptMessageYn :: Bool}
    | MsgNavyPercentage {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgWasForceConverted {scriptMessageYn :: Bool}
    | MsgFemaleEmperorAllowed {scriptMessageYn :: Bool}
    | MsgImperialAuthority {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgImperialMandate {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgImperialMandateGrowth {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasFemaleHeir {scriptMessageYn :: Bool}
    | MsgHasForeignHeir {scriptMessageYn :: Bool}
    | MsgPiety {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgIsInTutorial {scriptMessageYn :: Bool}
    | MsgIsUnitLeader {scriptMessageYn :: Bool}
    | MsgGainFervor {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainChurchPower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgIncomeFromVassals {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCostToFabricateClaims {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTimeToFabricateClaims {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgDiploAnnexCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAEImpact {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgDiploRep {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgEnvoyTravelTime {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgDiploRelations {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgVassalForcelimitContribution {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgUnjustifiedDemands {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgInfantryCombatAbility {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCavalryCombatAbility {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgArtilleryCombatAbility {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgShipDurability {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMoraleOfArmies {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMoraleOfArmiesAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgMoraleOfNavies {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNavalAttrition {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgDiscipline {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNationalManpowerMod {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgManpowerRecoverySpeed {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAvailableMercs {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGarrisonSize {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLandAttrition {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLandForcelimitMod {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPrestigeDecay {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMercCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTechCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPossibleAdvisors {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgReduceInflationCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLeadersWithoutUpkeep {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAdvisorCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCoreCreationCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMercMaintenance {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgADMTechCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgDIPTechCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGoodsProducedMod {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainNavalLeaderFire {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainNavalLeaderShock {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainNavalLeaderManeuver {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainNavalLeaderSiege {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPrestigeFromLand {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPrestigeFromNaval {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgDiplomats {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgWarExhaustionCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgImproveRelations {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgProvinceWarscoreCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgReducedStabImpacts
    | MsgNationalUnrest {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgYearsOfSeparatism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAccCultureThreshold {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgBetterRelationsOverTime {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgIdeaCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMerchants {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgRecruitmentTime {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgShipbuildingTime {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGlobalTradePower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgEmbargoEff {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPrivateerEff {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGlobalSpyDefence {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMaySabotageReputation
    | MsgSpyOffense {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCovertActionRelationImpact {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMayStudyTech
    | MsgMaySowDiscontent
    | MsgMayAgitateForLiberty
    | MsgMayInfiltrateAdministration
    | MsgRebelSupportEff {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgArmyTraditionDecay {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNavyTraditionDecay {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgInfantryCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCavalryCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgArtilleryCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMILTechCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHostileCoreCreation {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCaravanPower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainLandLeaderFire {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainLandLeaderShock {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainLandLeaderManeuver {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainLandLeaderSiege {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgFortDefense {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgFortMaintenance {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgReinforceSpeed {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAttritionForEnemies {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSiegeAbility {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgRecoverArmyMoraleSpeed {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTradeRange {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTradeSteering {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTextIs {scriptMessageWhat :: Text}
    | MsgModifier {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierSign {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierColourPos {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierColourNeg {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPc {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcSign {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcReduced {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcReducedSign {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcPos {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcNeg {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcPosReduced {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcNegReduced {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgAnyOwnedPlanet
    | MsgAnyOwnedShip
    | MsgAnyPop
    | MsgEveryOwnedPlanet
    | MsgEveryOwnedPop
    | MsgRandomOwnedShip
    | MsgRandomPop
    | MsgRandomSystem
    | MsgRandomTile
    | MsgGainTrait {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAbsolutism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainAbsolutism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMaxAbsolutism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgYearlyAbsolutism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCurrentAge {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAcceptedCulture {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgCalcTrueIf {scriptMessageAmt :: Double}
    | MsgGainConstructionProgress {scriptMessageAmt :: Double}
    | MsgGainHarmonizationProgress {scriptMessageAmt :: Double}
    | MsgGainHeirSupport {scriptMessageAmt :: Double}
    | MsgGainYearsOfSeparatism {scriptMessageAmt :: Double}
    | MsgAddResearchSlot {scriptMessageAmt :: Double}
    | MsgAddThreat {scriptMessageAmt :: Double}
    | MsgAuth {scriptMessageAmt :: Double}
    | MsgGainColonyPopulation {scriptMessageAmt :: Double}
    | MsgGainCorruption {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainDevastation {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainHarmony {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainMilitarization {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainProsperity {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainSplendor {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAddTariffValue {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainYearlySailors {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAdminEfficiencyBonus {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAdminEfficiency {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgDisasterMod
    | MsgAddClaimFor {scriptMessageWho :: Text}
    | MsgAddClaimOn {scriptMessageWhere :: Text}
    | MsgAddAcceptedCulture {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAddBuilding {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAddHarmonizedReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAddHeirPersonality {scriptMessageAncestor :: Bool, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAddConsortPersonality {scriptMessageAncestor :: Bool, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAddRulerPersonality {scriptMessageAncestor :: Bool, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgRemoveRulerPersonality {scriptMessageAncestor :: Bool, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgRulerHasPersonality {scriptMessageAncestor :: Bool, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHeirHasPersonality {scriptMessageAncestor :: Bool, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgConsortHasPersonality {scriptMessageAncestor :: Bool, scriptMessageIcon :: Text, scriptMessageWhat :: Text }
    | MsgAddCenterOfReformation {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAddTruceWith {scriptMessageWho :: Text}
    | MsgGainSailors {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainSailorsFrac {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgArmyProfessionalism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgArmyProfessionalismAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgGainArmyProfessionalism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSailorsPercentage {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNationalSailorsMod {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCorruption {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAddIncidentVariableValue {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgIncidentVariableValue {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgAddInstitutionEmbracement {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgAddIsolationism {scriptMessageAmt :: Double}
    | MsgGainMandate {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAddMandateEffect
    | MsgAddMandateLargeEffect
    | MsgAddMeritocracyEffect
    | MsgAddMeritocracyLargeEffect
    | MsgGainMeritocracy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAddNextInstitutionEmbracement {scriptMessageAmt :: Double}
    | MsgAddSpyNetworkFrom {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgAddSpyNetworkIn {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgSudebnikProgress {scriptMessageAmt :: Double}
    | MsgOprichninaProgress {scriptMessageAmt :: Double}
    | MsgStreltsyProgress {scriptMessageAmt :: Double}
    | MsgAddLootFromProvinceEffect
    | MsgGenericTemplate {scriptMessageTemplate :: Text}
    | MsgAddStabilityOrAdm
    | MsgAddTrust {scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgAddTrustMutual {scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgSaveEventTargetAs {scriptMessageName :: Text}
    | MsgSaveGlobalEventTargetAs {scriptMessageName :: Text}
    | MsgHasSavedEventTarget {scriptMessageName :: Text}
    | MsgRemoveClaim {scriptMessageWho :: Text}
    | MsgRemoveCoreOf {scriptMessageWho :: Text}
    | MsgRemoveFromFaction {scriptMessageWho :: Text}
    | MsgTribalAllegianceBonus {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTribalAllegiance {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainTribalAllegiance {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgArmySizePc {scriptMessageAmt :: Double}
    | MsgBuildHeavyShips {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageSpeed :: Double, scriptMessageCost :: Double}
    | MsgBuildLightShips {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageSpeed :: Double, scriptMessageCost :: Double}
    | MsgBuildGalleys {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageSpeed :: Double, scriptMessageCost :: Double}
    | MsgBuildTransports {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageSpeed :: Double, scriptMessageCost :: Double}
    | MsgAristocratsInfluence {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgDomesticTradePower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgEmbracementCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGlobalTaxIncome {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHeavyShipCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHeirChance {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgInstitutionSpread {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLandFireDamage {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalConstructionCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalCultureConversionCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalDefensiveness {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalGoodsProduced {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalGoodsProducedMod {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalHostileMovementSpeed {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalInstitutionSpread {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalManpowerMod {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalMissionaryStrength {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalMonthlyDevastation {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalProdEff {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalSettlerIncrease {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalStateMaintMod {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalTaxMod {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalTradePower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalTradePowerMod {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalUnrest {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMaxPromotedCultures {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMercenaryDiscipline {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMeritocracy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMovementSpeed {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgProvTradePowerMod {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgRazingPowerGain {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgRecoverNavyMoraleSpeed {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgShockDamage {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgStateMaintMod {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSubjectLibertyDesire {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTaxIncome {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTradePowerAbroad {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTradeValueMod {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgYearlyArmyProfessionalism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgYearlyCorruption {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgYearlyMeritocracy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAddInnovativenessSmallEffect
    | MsgAddInnovativenessBigEffect
    | MsgAddReformProgressMediumEffect
    | MsgAddReformProgressSmallEffect
    | MsgBoostBureaucratsEffect
    | MsgBoostBureaucratsLargeEffect
    | MsgBoostEunuchsEffect
    | MsgBoostEunuchsLargeEffect
    | MsgBoostTemplesEffect
    | MsgBoostTemplesLargeEffect
    | MsgCheckIfNonStateAdvisorEffect
    | MsgEraseAdvisorFlagsEffect
    | MsgIncreaseHeirAdmEffect
    | MsgIncreaseHeirDipEffect
    | MsgIncreaseHeirMilEffect
    | MsgIncreaseLegitimacyHugeEffect
    | MsgIncreaseLegitimacyMediumEffect
    | MsgIncreaseLegitimacySmallEffect
    | MsgMoveCapitalEffect
    | MsgPrevMoveCapitalEffect
    | MsgReduceBureaucratsEffect
    | MsgReduceTemplesEffect
    | MsgReduceEunuchsEffect
    | MsgReduceLegitimacyEffect
    | MsgReduceLegitimacySmallEffect
    | MsgReduceMandateEffect
    | MsgReduceMandateLargeEffect
    | MsgReduceMeritocracyEffect
    | MsgReduceMeritocracyLargeEffect
    | MsgReduceReformProgressSmallEffect
    | MsgReduceReformProgressMediumEffect
    | MsgReduceReformProgressBigEffect
    | MsgRemoveAdvisorAdmEffect
    | MsgDivorceConsortEffect
    | MsgDismantleFaction
    | MsgDropCosmeticTag
    | MsgADMTechAs {scriptMessageIcon :: Text, scriptMessageWho :: Text}
    | MsgAddGovernmentReform {scriptMessageWhat :: Text}
    | MsgRemoveGovernmentReform {scriptMessageWhat :: Text}
    | MsgAddCOTLevel {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgRulerAge {scriptMessageAmt :: Double}
    | MsgSetCompliance {scriptMessageAmt :: Double}
    | MsgSurrenderProgress {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgEmployedAdvisor
    | MsgEmployedAdvisorWhere
    | MsgEmployedAdvisorAdmin
    | MsgEmployedAdvisorDiplo
    | MsgEmployedAdvisorMiltary
    | MsgEmployedAdvisorType {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgEmployedAdvisorMale {scriptMessageMale :: Bool}
    | MsgNumOwnedProvincesWith {scriptMessageAmt :: Double}
    | MsgNumOwnedProvincesOrNonSovereignSubjectsWith {scriptMessageAmt :: Double}
    | MsgNumOwnedStatesOrNonSovereignSubjectsWith {scriptMessageAmt :: Double}
    | MsgSetVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgSetTempVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgSetVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgSetTempVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgAddVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgAddTempVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgAddVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgAddTempVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgSubVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgSubTempVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgSubVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgSubTempVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgMulVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgMulTempVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgMulVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgMulTempVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgDivVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgDivTempVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgDivVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgDivTempVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgChkVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgChkVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgEquVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgEquVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgIsColonialNationOf { scriptMessageWho :: Text }
    | MsgHasInstitution { scriptMessageIcon :: Text, scriptMessageWhat :: Text }
    | MsgWasNeverEndGameTag { scriptMessageYn :: Bool }
    | MsgHasCompletedAllReforms { scriptMessageYn :: Bool }
    | MsgHasFinalTierReform { scriptMessageYn :: Bool }
    | MsgPctBackingParliamentIssue { scriptMessageAmt :: Double }
    | MsgIsBackingCurrentIssue { scriptMessageYn :: Bool }
    | MsgHasActiveDebate { scriptMessageYn :: Bool }
    | MsgCurrentDebate { scriptMessageWhat :: Text }
    | MsgBackCurrentIssue { scriptMessageYn :: Bool }
    | MsgSetSeatInParliament { scriptMessageYn :: Bool }
    | MsgHasCustomIdeas { scriptMessageYn :: Bool }
    | MsgHasDefensiveWar { scriptMessageYn :: Bool }
    | MsgIsProvinceEmpty { scriptMessageYn :: Bool }
    | MsgIsEmperorOfChina { scriptMessageYn :: Bool }
    | MsgHasStatesGeneralMechanic { scriptMessageYn :: Bool }
    | MsgIsInWar
    | MsgDurationAtLeast { scriptMessageDays :: Double }
    | MsgIsAttackerWarLeader { scriptMessageWho :: Text }
    | MsgIsDefenderWarLeader { scriptMessageWho :: Text }
    | MsgIsAttacker { scriptMessageWho :: Text }
    | MsgIsDefender { scriptMessageWho :: Text }
    | MsgLoadFocusTree { scriptMessageWhat :: Text }
    | MsgLoadFocusTreeKeep {scriptSchoolIcon :: Text, scriptMessageWhat :: Text, scriptMessageYesNo :: Text }
    | MsgCasusBelliIs { scriptMessageCb :: Text }
    | MsgGainNewMissions
    | MsgIsRevolutionary { scriptMessageYn :: Bool }
    | MsgIsRevolutionaryRepublic { scriptMessageYn :: Bool }
    | MsgHasRevolutionInProvince { scriptMessageYn :: Bool }
    | MsgRevolutionTargetExists { scriptMessageYn :: Bool }
    | MsgIsCenterOfRevolution { scriptMessageYn :: Bool }
    | MsgSetRevolutionProvince { scriptMessageYn :: Bool }
    | MsgGovernmentHasAttribute { scriptMessageWhat :: Text }
    | MsgReligiousModifier
    | MsgIsEnemy { scriptMessageWho :: Text }
    | MsgIsFullyControlledBy { scriptMessageWho :: Text }
    | MsgIsGuaranteedBy { scriptMessageWho :: Text }
    | MsgHasSpyNetworkFrom { scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double }
    | MsgHasSpyNetworkIn { scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double }
    | MsgDefineGeneral { scriptMessageIcon :: Text }
    | MsgDefineRulerToGeneral { scriptMessageIcon :: Text }
    | MsgDefineConquistador { scriptMessageIcon :: Text }
    | MsgDefineAdmiral { scriptMessageIcon :: Text }
    | MsgDefineExplorer { scriptMessageIcon :: Text }
    | MsgMilitaryLeaderTrait { scriptMessageWhat :: Text }
    | MsgTypeAll
    | MsgSetSavedName { scriptMessageVar :: Text, scriptMessageType :: Text, scriptMessageFemale :: Bool }
    | MsgSetSavedNameScope { scriptMessageVar :: Text, scriptMessageType :: Text, scriptMessageScope :: Text, scriptMessageFemale :: Bool }
    | MsgClearSavedName { scriptMessageVar :: Text }
    | MsgProvinceTradePower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasPermanentClaim { scriptMessageWhat :: Text }
    | MsgIsPermanentClaim { scriptMessageWhom :: Text }
    | MsgIsSubjectOfType { scriptMessageType :: Text }
    | MsgHasRuler { scriptMessageWho :: Text }
    | MsgHeirADM { scriptMessageIcon :: Text, scriptMessageAmt :: Double }
    | MsgHeirDIP { scriptMessageIcon :: Text, scriptMessageAmt :: Double }
    | MsgHeirMIL { scriptMessageIcon :: Text, scriptMessageAmt :: Double }
    | MsgConsortADM { scriptMessageIcon :: Text, scriptMessageAmt :: Double }
    | MsgConsortDIP { scriptMessageIcon :: Text, scriptMessageAmt :: Double }
    | MsgConsortMIL { scriptMessageIcon :: Text, scriptMessageAmt :: Double }
    | MsgLandLeaderFire {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLandLeaderShock {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLandLeaderManeuver {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLandLeaderSiege {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNavalLeaderFire {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNavalLeaderShock {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNavalLeaderManeuver {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNavalLeaderSiege {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCountryOrNonSovereignSubjectHolds {scriptMessageWhom :: Text}
    | MsgCountryOrSubjectHolds {scriptMessageWhom :: Text}
    | MsgAdmiralCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAllowedMarineFraction {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAllowedNumOfBuildings {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAmountOfBanners {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAppointCardinalCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgArmyTraditionFromBattle {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgArtilleryFire {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAutoExploreAdjacentToColony
    | MsgAutonomyChangeTime {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgBackrowArtilleryDamage {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgBrahminsHinduLoyaltyModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgBrahminsMuslimLoyaltyModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgBuildTime {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgBurghersInfluenceModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgBurghersLoyaltyModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCanFabricateForVassals
    | MsgCaptureShipChance {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCavToInfRatio {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCavalryFlanking {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCenterOfTradeUpgradeCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgChurchLoyaltyModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCuriaTreasuryContribution {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgDhimmiLoyaltyModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgDisengagementChance {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgDrillDecayModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgEnforceReligionCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgEstablishOrderCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgExpelMinoritiesCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgFemaleAdvisorChance {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgFireDamageReceived {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgFlagshipCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgFreeAdmPolicy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgFreeDipPolicy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgFreeMilPolicy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGalleyCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGeneralCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGlobalGarrisonGrowth {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGlobalNavalEngagementModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGlobalReligiousConversionResistance {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGlobalSailorsModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGlobalShipTradePower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGlobalSupplyLimitModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGoverningCapacityModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHarshTreatmentCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgIdeaClaimColonies
    | MsgImperialAuthorityGrowthModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgImperialAuthorityValue {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgInnovativenessGain {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgJustifyTradeConflictCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLeaderSiege {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLegitimateSubjectElector {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLibertyDesireFromSubjectDevelopment {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLightShipCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalFriendlyMovementSpeed {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalMissionaryMaintenanceCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalRegimentCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalReligiousConversionResistance {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalSailorsModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalShipCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalShipRepair {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLootAmount {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMaxRevolutionaryZeal {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMayEstablishFrontier
    | MsgMayPerformSlaveRaid
    | MsgMayPerformSlaveRaidOnSameReligion
    | MsgMayRecruitFemaleGenerals
    | MsgMercenaryManpower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMigrationCooldown {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMinAutonomyInTerritories {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonarchDiplomaticPower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonarchMilitaryPower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonthlyPiety {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMrGuildsInfluence {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMrTradersInfluence {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNativeAssimilation {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNativeUprisingChance {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNavalTraditionFromBattle {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNavalTraditionFromTrade {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNoReligionPenalty
    | MsgNoblesInfluenceModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNoblesLoyaltyModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgOwnCoastNavalCombatBonus {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPlacedMerchantPower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPossibleAdmPolicy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPossibleDipPolicy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPossibleMilPolicy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPossiblePolicy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPowerProjectionFromInsults {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPrCaptainsInfluence {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgReelectionCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgReformProgressGrowth {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgReinforceCostModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgRivalBorderFortMaintenance {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSailorMaintenanceModifer {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSailorsRecoverySpeed {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSameCultureAdvisorCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgShockDamageReceived {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSiegeBlockadeProgress {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSpecialUnitForcelimit {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSunkShipMoraleHitRecieved {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTradeCompanyInvestmentCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTransportCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTreasureFleetIncome {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgVaisyasLoyaltyModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgWarscoreCostVsOtherReligion {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgYearlyHarmony {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgYearlyRevolutionaryZeal {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMapSetupRandom
    | MsgValidForPU {scriptMessageYn :: Bool}
    | MsgIsGreatPower {scriptMessageYn :: Bool}
    | MsgTradeShare {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgProviceHasCenterOfTrade {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPrivateerPower {scriptMessageAmt :: Double}
    | MsgPrivateerPowerCountry {scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgDevastation {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasEstatePrivilege {scriptMessageWhat :: Text}
    | MsgOwnsOrNonTribSubject {scriptMessageWhat :: Text}
    | MsgHasConsortRegency {scriptMessageYn :: Bool}
    | MsgHasCivilWar {scriptMessageYn :: Bool}
    | MsgIsOwnedByTradeCompany {scriptMessageYn :: Bool}
    | MsgOrignalTag {scriptMessageWhom :: Text}
    | MsgArmySize {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgArmySizeMatches {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgNavySize {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNavySizeMatches {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgAddCuriaTreasury {scriptMessageAmt :: Double}
    | MsgReduceCuriaTreasury {scriptMessageAmt :: Double}
    | MsgHasClimate {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasGovernment {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgTradingBonus {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgNumSubjects {scriptMessageAmt :: Double}
    | MsgApplyEstateModifer {scriptMessageWhat :: Text}
    | MsgRemoveEstateModifer {scriptMessageWhat :: Text}
    | MsgReapplyEstatePrivilege {scriptMessageWhat :: Text}
    | MsgLeaderTradition {scriptMessageNaval :: Bool, scriptMessageAmt :: Double}
    | MsgTradeCompanySize {scriptMessageAmt :: Double}
    | MsgNumFreeBuildingSlots {scriptMessageAmt :: Double}
    | MsgCanBuild {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgCanHaveCenterOfReformation
    | MsgCreateColony {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumInvestmentsInTradeCompanyReigion {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgHasTradeCompanyInvestmentInArea {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageWho :: Text}
    | MsgIncreaseReligiousCurrencyEffect
    | MsgReduceReligiousCurrencyEffect
    | MsgHasPrivateers { scriptMessageYn :: Bool }
    | MsgIsWasteland { scriptMessageYn :: Bool }
    | MsgHasRiverEstuary
    | MsgTradingPolicyInNode { scriptMessageNode :: Text, scriptMessagePolicy :: Text }
    | MsgTradingPolicyInNodeAny { scriptMessageNode :: Text }
    | MsgInstitutionDifference { scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double }
    | MsgEmbargoedBy { scriptMessageWho :: Text }
    | MsgRandomAdvisor { scriptMessageIcon :: Text, scriptMessageText :: Text, scriptMessageYn :: Bool }
    | MsgRandomAdvisorSkill { scriptMessageAmt :: Double }
    | MsgRandomAdvisorScaledSkill
    | MsgRandomAdvisorNonState { scriptMessageIcon :: Text, scriptMessageText :: Text }
    | MsgConvertFemaleRulerGeneral { scriptMessageAmt :: Double }
    | MsgConvertHeirGeneral { scriptMessageYn :: Bool, scriptMessageAmt :: Double }
    | MsgRemoveCurrentLeader
    | MsgIsHeirLeader { scriptMessageYn :: Bool }
    | MsgIsHistoricalFocusOn { scriptMessageYn :: Bool }
    | MsgAtWarWithReligiousEnemy { scriptMessageYn :: Bool }
    | MsgHasAdvisorCategory { scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageYn :: Bool }
    | MsgHasAdvisorCategoryLevel { scriptMessageAmt :: Double, scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageYn :: Bool }
    | MsgTradeNodeIsInTCRegion { scriptMessageYn :: Bool }
    | MsgHasEmptyAdjProvince { scriptMessageYn :: Bool }
    | MsgIsInDeficit { scriptMessageYn :: Bool }
    | MsgIsReligiousCenterProvince { scriptMessageYn :: Bool }
    | MsgNumCavalry {scriptMessageAmt :: Double}
    | MsgNumCavalryThan {scriptMessageWhom :: Text}
    | MsgNumArtillery {scriptMessageAmt :: Double}
    | MsgNumArtilleryThan {scriptMessageWhom :: Text}
    | MsgAdoptReformProgress {scriptMessageWhom :: Text}
    | MsgCuriaTreasurySize {scriptMessageAmt :: Double}
    | MsgCuriaTreasuryIncome {scriptMessageAmt :: Double}
    | MsgAmountResearchSlots {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgAnyWarScore {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgCompareAutonomyProgressRatio {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgEnemiesStrengthRatio {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgChangeInnovativeness {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgIsCouncilEnabled {scriptMessageYn :: Bool}
    | MsgCouncilPosition {scriptMessageWhat :: Text}
    | MsgAllConcesssionsTaken {scriptMessageYn :: Bool}
    | MsgIsDotfTier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHRESize {scriptMessageAmt :: Double}
    | MsgHREExists
    | MsgInLeague {scriptMessageWhat :: Text}
    | MsgIsCharacter {scriptMessageWhat :: Text}
    | MsgNumOwnInstitutionProvinces {scriptMessageAmt :: Double}
    | MsgIsLeagueLeader {scriptMessageYn :: Bool}
    | MsgGainScaledImperialAuthority {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasWinter {scriptMessageWhat :: Text}
    | MsgHasCountryLeader {scriptMessageWhom :: Text}
    | MsgIsIsland {scriptMessageYn :: Bool}
    | MsgIsBlockaded {scriptMessageYn :: Bool}
    | MsgKillLeaderType {scriptMessageIcon :: Text, scriptMessageText :: Text}
    | MsgKillLeaderRandom {scriptMessageIcon :: Text}
    | MsgKillLeaderNamed {scriptMessageIcon :: Text, scriptMessageText :: Text}
    | MsgAddEstateLoyaltyModifier {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageWhat :: Text, scriptMessageDays :: Double, scriptMessageAmt :: Double}
    | MsgExportVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgExportVariableWho { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text, scriptMessageWhom :: Text}
    | MsgCanBeOverlord {scriptMessageType :: Text}
    | MsgTrust {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgTechDifference {scriptMessageAmt :: Double}
    | MsgThreat {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgFascismCompare {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgDemocraticCompare {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgCommunismCompare {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgNeutralityCompare {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgAiAttitude {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text, scriptMessageYn :: Bool}
    | MsgAnnexCountry {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgDevelopmentInProvinces {scriptMessageAmt :: Double}
    | MsgEstateLandShareEffect {scriptMessageAmt :: Double, scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgEstateLandShareEffectAll {scriptMessageAmt :: Double}
    | MsgIsInFactionWith {scriptMessageWhom :: Text}
    | MsgIsJustifyingWargoalAgainst {scriptMessageWhom :: Text}
    | MsgIsTradeLeagueLeader {scriptMessageYn :: Bool}
    | MsgInstitutionEnabled {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgCenterOfTrade {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgArmyStrength {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgNavalStrength {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgHigherDevelopmentThan {scriptMessageWhat :: Text}
    | MsgCrownlandShare {scriptMessageAmt :: Double}
    | MsgNumEstatePrivileges {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgRemoveAdvisor {scriptMessageType :: Text}
    | MsgAcceptVassalizationReasons {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAdmAdvisorCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAllPowerCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAvailableProvinceLoot {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCavalryFire {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgChurchInfluenceModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCountryAdminPower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCuriaPowersCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgDipAdvisorCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgExpandAdministrationCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGarrisonGrowth {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGoverningCapacity {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGreatProjectUpgradeCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHarmonizationSpeed {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgInfantryShock {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgInstitutionSpreadFromTrueFaith {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgJainsLoyaltyModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLandForcelimit {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLandForcelimitIncrease {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLeaderCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalBuildTime {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalCoreCreation {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalSailors {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMercantilismCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMigrationCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonarchAdminPower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonarchLifespan {scriptMessageAmt :: Double}
    | MsgMonthlyFederationFavorGrowth {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonthlyKarma {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonthlyMilitarizedSociety {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonthlyReformProgressModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonthlySplendor {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPromoteCultureCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgReducedLibertyDesireOnSameContinent {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgRivalChangeCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgShipPowerPropagation {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgStabilityCostToDeclareWar {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSupplyLimitModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTradeValue {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTribalDevelopmentGrowth {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgWarTaxesCostModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgYearlyPatriarchAuthority {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasGlobalModifierValue {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgHasAnyGreatProject
    | MsgHasAnyGreatProjectTier {scriptMessageAmt :: Double }
    | MsgHasAnyMonument
    | MsgHasAnyMonumentTier {scriptMessageAmt :: Double }
    | MsgHasGreatProject {scriptMessageWhat :: Text}
    | MsgHasGreatProjectTier {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgSetGreatProjectTier {scriptMessageAmt :: Double, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgSetNationality {scriptMessageWhat :: Text}
    | MsgSetNationalityChar {scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgEstateRegency
    | MsgEstateRegencyDuration {scriptMessageAmt :: Double}
    | MsgEstateRegencySpecific {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgEstateRegencySpecificDur {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgHasAnyManufactory {scriptMessageYn :: Bool}
    | MsgHighestValueTradeNode
    | MsgHasNumVassals {scriptMessageAmt :: Double}
    | MsgYearlyKarmaDecay {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGuaranteedBy {scriptMessageWhom :: Text}
    | MsgHasGuaranteed {scriptMessageWhom :: Text}
    | MsgPuppet {scriptMessageWhom :: Text}
    | MsgMissionCompleted {scriptMessageWhat :: Text}
    | MsgCompleteMission {scriptMessageWhat :: Text}
    | MsgHasMission {scriptMessageWhat :: Text}
    | MsgHasNumberOfBuildingType {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgFederationSize {scriptMessageAmt :: Double}
    | MsgGrownByDevelopment {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGrownByStates {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumAdmirals {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumGenerals {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumGeneralsWithTrait {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgShareOfStartingIncome {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumNonTribSubjects {scriptMessageAmt :: Double}
    | MsgChangeGovernmentReformProgress {scriptMessageAmt :: Double}
    | MsgTradeGoodsProduced {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgProvinceSameReligion {scriptMessageWhom :: Text}
    | MsgProvinceReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgGrantEstatePrivilege {scriptMessageWhat :: Text}
    | MsgRemoveEstatePrivilege {scriptMessageWhat :: Text}
    | MsgNumTrustedAllies {scriptMessageAmt :: Double}
    | MsgIsFederationLeader {scriptMessageYn :: Bool}
    | MsgAverageUnrest {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasPillagedCapitalAgainst {scriptMessageWhom :: Text}
    | MsgIsIroquois {scriptMessageYn :: Bool}
    | MsgMilitaryStrength { scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double }
    | MsgModifyTechSharingBonus { scriptMessage_icon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double }
    | MsgNumUnitsInProvince {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgNativeSize {scriptMessageAmt :: Double}
    | MsgChangeNativeSize {scriptMessageAmt :: Double}
    | MsgNumTributaryStates {scriptMessageAmt :: Double}
    | MsgIsThreat {scriptMessageWhom :: Text}
    | MsgGrantIndependence
    | MsgIsVassal {scriptMessageYn :: Bool}
    | MsgIsPapalController {scriptMessageYn :: Bool}
    | MsgIsFederationNation {scriptMessageYn :: Bool}
    | MsgNumFederationAdvancements {scriptMessageAmt :: Double}
    | MsgHistoricalFriendWith {scriptMessageWhom :: Text}
    | MsgHistoricalRivalWith {scriptMessageWhom :: Text}
    | MsgAddHistoricalFriend {scriptMessageWhom :: Text}
    | MsgAddHistoricalRival {scriptMessageWhom :: Text}
    | MsgAddToFaction {scriptMessageWhom :: Text}
    | MsgRemoveHistoricalFriend {scriptMessageWhom :: Text}
    | MsgRemoveHistoricalRival {scriptMessageWhom :: Text}
    | MsgHasAnyEstates {scriptMessageYn :: Bool}
    | MsgGovernmentReformProgress {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHumiliatedBy {scriptMessageWhom :: Text}
    | MsgCreateGuarantee {scriptMessageWhom :: Text}
    | MsgCreateSubject {scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgHeirClaim { scriptMessageIcon :: Text, scriptMessageAmt :: Double }
    | MsgExtendRegency { scriptMessageAmt :: Double }
    | MsgAddPowerProjection {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgAddResource {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgAddPopularity {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgRemoveCasusBelli {scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgHasWonWarAgainst {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgChangePrice {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageName :: Text, scriptMessageAmt :: Double, scriptMessageDays :: Double }
    | MsgBuildRailway {scriptMessageAmt :: Double, scriptMessageStart :: Text, scriptMessageEnd :: Text}
    | MsgBuildRailwayProv {scriptMessageAmt :: Double, scriptMessageStartProv :: Double, scriptMessageEndProv :: Double}
    | MsgBuildRailwayPath {scriptMessageAmt :: Double, scriptMessageWhat :: Text}
    | MsgCanBuildRailway {scriptMessageStart :: Text, scriptMessageEnd :: Text}
    | MsgCanBuildRailwayProv {scriptMessageStartProv :: Double, scriptMessageEndProv :: Double}
    | MsgCreateNamedShip {scriptMessageText :: Text, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgCreateFlagShip {scriptMessageText :: Text, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgTradingPart {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgGenerateTraitorAdvisor {scriptMessageSkill :: Double}
    | MsgGenerateExileAdvisor {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgOurScholarMatchesTheirSchool {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasScholar
    | MsgRulerHasIslamModifier {scriptMessageWhat :: Text, scriptMessageYn :: Bool}
    | MsgSchoolOpinion {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgSetProvinceName {scriptMessage_icon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgSetSchoolOpinion {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgSetVictoryPoints {scriptMessageAmt2 :: Double, scriptMessageAmt :: Double}
    | MsgStrengthRatio {scriptMessage_icon :: Text, scriptMessageWhom :: Text, scriptMessageCompare :: Text, scriptMessageAmt :: Double}
    | MsgHasReligiousSchoolOf {scriptMessageWhom :: Text}
    | MsgHasSubject {scriptMessageWhom :: Text}
    | MsgUsesPiety { scriptMessageYn :: Bool }
    | MsgUsesDevotion { scriptMessageYn :: Bool }
    | MsgHasBorderWithReligiousEnemy
    | MsgHasSunniSchool
    | MsgHasShiaSchool
    | MsgNewExiledRuler
    | MsgNewExiledRulerAttribs
    | MsgExiledAs {scriptMessageWhat :: Text}
    | MsgSetHeir {scriptMessageWhat :: Text}
    | MsgSetCosmeticTag {scriptMessageWhat :: Text}
    | MsgSetRuler {scriptMessageWhat :: Text}
    | MsgExileHeir {scriptMessageWhat :: Text}
    | MsgExileRuler {scriptMessageWhat :: Text}
    | MsgClearExiledRuler {scriptMessageWhat :: Text}
    | MsgExiledRulerSameDynastyAsCurrent {scriptMessageWhat :: Text}
    | MsgHasFocusTree {scriptMessageWhat :: Text}
    | MsgAddAutonomyRatio {scriptMessage_icon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgAddGreatProjectTier {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgWarscoreAgainst {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgBorderDistance {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgAddNamedUnrest {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgCheckEstateRevoltSize {scriptMessageYn :: Bool, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasLeaderWith
    | MsgHasMonarchLeaderWith
    | MsgHasGeneralWith {scriptMessageIcon :: Text}
    | MsgHasAdmiralWith {scriptMessageIcon :: Text}
    | MsgTotalPips {scriptMessageAmt :: Double}
    | MsgAddLootFromRichProvince {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgSetAiAttitude {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text, scriptMessageYn :: Bool}
    | MsgSetAutonomy {scriptMessageWho :: Text, scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double, scriptMessageWar :: Text}
    | MsgSetPolitics {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageMonths :: Double}
    | MsgStartCivilWar {scriptMessageWhat :: Text, scriptMessageAmtText :: Text}
    | MsgSetPartyName {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgRegion
    | MsgAddDisasterProgress {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgYearsInUnionUnder {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgHasAnyHolyOrder
    | MsgHasHolyOrder {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgNativePolicy {scriptMessageWhat :: Text}
    | MsgCanEstablishHolyOrder {scriptMessageYn :: Bool}
    | MsgEndIncident {scriptMessageWhat :: Text}
    | MsgIsIncidentActive {scriptMessageWhat :: Text}
    | MsgHasIncidentHappened {scriptMessageWhat :: Text}
    | MsgIsIncidentPossible {scriptMessageWhat :: Text}
    | MsgIsInTechSharingGroup {scriptMessageWhat :: Text}
    | MsgAddToTechSharingGroup {scriptMessageWhat :: Text}
    | MsgNumStreltsy {scriptMessageAmt :: Double}
    | MsgSetPersonalDiety {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasPersonalDiety {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgNumAspects {scriptMessageAmt :: Double}
    | MsgInstitutionPresence {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgKnowsCountry {scriptMessageWhom :: Text}
    | MsgIsTerritory {scriptMessageYn :: Bool}
    | MsgIsStateCore {scriptMessageWhat :: Text}
    | MsgChurchPower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasChurchAspect {scriptMessageWhat :: Text}
    | MsgCreateUnion {scriptMessageWhom :: Text}
    | MsgCreateVassal {scriptMessageWhom :: Text}
    | MsgCreateMarch {scriptMessageWhom :: Text}
    | MsgHighestSupplyLimitInArea
    | MsgStartEstateAgenda {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgPickRandomEstateIfPresent {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgHasRule {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgHasAnyActiveEstateAgenda {scriptMessageYn :: Bool}
    | MsgClearEstateAgendaCache {scriptMessageWhom :: Text}
    | MsgNativeFerocity {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNativeAggressiveness {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgChangeNativeFerocity {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgChangeNativeAggressiveness {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgExpulsionTarget {scriptMessageWhat :: Text}
    | MsgHasSupportLoyalists {scriptMessageYn :: Bool}
    | MsgHasSubsidizeArmies {scriptMessageYn :: Bool}
    | MsgHasNewDynasty {scriptMessageYn :: Bool}
    | MsgHasOffensiveWar {scriptMessageYn :: Bool}
    | MsgHasSendOfficers {scriptMessageYn :: Bool}
    | MsgHasEmbargoRivals {scriptMessageYn :: Bool}
    | MsgHasDivertTrade {scriptMessageYn :: Bool}
    | MsgHasScutage {scriptMessageYn :: Bool}
    | MsgIsMarch {scriptMessageYn :: Bool}
    | MsgIsMajor {scriptMessageYn :: Bool}
    | MsgIsSubjectOtherThanTributary
    | MsgSpawnScaledRebels {scriptMessageRtype :: Text, scriptMessageLeader :: Text, scriptMessageYn :: Bool}
    | MsgCreateIndependentEstate {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageDesc :: Text, scriptMessageYn :: Bool}
    | MsgHasLeaders {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageDesc :: Text, scriptMessageAmt :: Double}
    | MsgScaledEstateLandShareEffect {scriptMessageYn :: Bool, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgProvinceDistance {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgNumOfReligionSecondary {scriptMessageAmt :: Double}
    | MsgCreateSuccessionCrisis {scriptMessageAttacker :: Text, scriptMessageDefender :: Text, scriptMessageWhom :: Text}
    | MsgDate {scriptMessageCompare :: Text, scriptMessageDate :: Text}
    | MsgDefinerLeaderToRuler
    | MsgChangeSubjectType {scriptMessageIcon :: Text, scriptMessageType :: Text}
    | MsgRemoveTradeModifier {scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgSendEquipment {scriptMessageAmtT :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgHasTradeCompanyInvestmentInState {scriptMessageWhom :: Text}
    | MsgRandomListTrigger
    | MsgRandomListModifier {scriptMessageAmt :: Double}
    | MsgRandomListAddModifier {scriptMessageAmt :: Double}
    | MsgOwnOrNonTribSubjectDevelopment {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgOwnOrNonTribSubjectDevelopmentAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgHasOneOfBuildings {scriptMessageYn :: Bool, scriptMessageWhat :: Text}
    | MsgNumBuildings {scriptMessageAmt :: Double}
    | MsgTradeCompanyRegion {scriptMessageWhat :: Text}
    | MsgUnlockDecisionCategoryTooltip {scriptMessageWhat :: Text}
    | MsgPreferredEmperor {scriptMessageWhom :: Text}
    | MsgCurrentIcon {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgUsesIcons {scriptMessageYn :: Bool}
    | MsgPatriarchAuthority {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgIsRevolutionTarget {scriptMessageYn :: Bool}
    | MsgRevolutionaryZeal {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSameGovtAsRoot
    | MsgOverrideCountryName {scriptMessageWhat :: Text}
    | MsgFervor {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasFlagship {scriptMessageYn :: Bool}
    | MsgIsCapitalOf {scriptMessageWhom :: Text}
    | MsgIsProductionLeader {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgInnovativeness {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgStartHREIncident {scriptMessageWhat :: Text}
    | MsgIsForeignCompany {scriptMessageYn :: Bool}
    | MsgHasStatePatriach {scriptMessageYn :: Bool}
    | MsgHasForeignConsort {scriptMessageYn :: Bool}
    | MsgSwapFreeIdeaGroup
    | MsgUsesDoom {scriptMessageYn :: Bool}
    | MsgAverageAutonomy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPowerProjection {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgElector {scriptMessageYn :: Bool}
    | MsgNumOfWarReparations {scriptMessageAmt :: Double}
    | MsgNumOfHiredMercCompanies {scriptMessageAmt :: Double}
    | MsgNumOfForeignHREProvinces {scriptMessageAmt :: Double}
    | MsgNumOfStates {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumOfExplorers {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumOfConquistadors {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumOfBanners {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonthlyADM {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonthlyDIP {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonthlyMIL {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAnyActiveImperialIncident
    | MsgMaxSailors {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgInGoldenAge {scriptMessageYn :: Bool}
    | MsgHasHadGoldenAge {scriptMessageYn :: Bool}
    | MsgHasTrader {scriptMessageWhom :: Text}
    | MsgArtilleryFraction {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCavalryFraction {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLightShipFraction {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgProsperity {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgIsProsperous {scriptMessageYn :: Bool}
    | MsgIsPuppet {scriptMessageYn :: Bool}
    | MsgNumElectors {scriptMessageAmt :: Double}
    | MsgHarmony {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTradeEmbargoing {scriptMessageWhom :: Text}
    | MsgTotalBaseTax {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSuccessionClaim {scriptMessageWhom :: Text}
    | MsgHegemonStrength {scriptMessageAmt :: Double}
    | MsgHasActiveFervor {scriptMessageYn :: Bool}
    | MsgNumCentersOfTrade {scriptMessageAmt :: Double}
    | MsgNumDiplomaticRelations {scriptMessageAmt :: Double}
    | MsgNumHarmonized {scriptMessageAmt :: Double}
    | MsgNumRajput {scriptMessageAmt :: Double}
    | MsgNumTimesImproved {scriptMessageAmt :: Double}
    | MsgNumTimesImprovedByOwner {scriptMessageAmt :: Double}
    | MsgIsHarmonizingWith {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasHarmonizedWith {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgNumTimesUsedTransferDevelopment {scriptMessageAmt :: Double}
    | MsgProvinceHasCurrentTechFort {scriptMessageYn :: Bool}
    | MsgHasMostProvinceTradePower {scriptMessageWhom :: Text}
    | MsgHasNonAggressionPactWith {scriptMessageWhom :: Text}
    | MsgHasOffensiveWarWith {scriptMessageWhom :: Text}
    | MsgAddDynamicModifier {scriptMessageWhat :: Text, scriptMessageWho :: Text, scriptMessageDaysText :: Text}
    | MsgHasInfluencingFort {scriptMessageYn :: Bool}
    | MsgIsInCoalition {scriptMessageYn :: Bool}
    | MsgChangeController {scriptMessageWhom :: Text}
    | MsgIsExcommunicated {scriptMessageYn :: Bool}
    | MsgIsFactionLeader {scriptMessageYn :: Bool}
    | MsgExcommunicate {scriptMessageWhom :: Text}
    | MsgChangeConsortSameCulture {scriptMessageWhom :: Text}
    | MsgChangeConsortCulture {scriptMessageWhat :: Text}
    | MsgChangeHeirSameCulture {scriptMessageWhom :: Text}
    | MsgChangeHeirCulture {scriptMessageWhat :: Text}
    | MsgChangeRulerSameCulture {scriptMessageWhom :: Text}
    | MsgChangeRulerCulture {scriptMessageWhat :: Text}
    | MsgConsortCultureIs {scriptMessageWhat :: Text}
    | MsgConsortCultureIsSame {scriptMessageWhom :: Text}
    | MsgHeirCultureIs {scriptMessageWhat :: Text}
    | MsgHeirCultureIsSame {scriptMessageWhom :: Text}
    | MsgHasFemaleConsort {scriptMessageYn :: Bool}
    | MsgConsortAge {scriptMessageAmt :: Double}
    | MsgIsOriginOfConsort {scriptMessageWhat :: Text}
    | MsgIsOwnedAndControlledBy {scriptMessageWhom :: Text}
    | MsgIsPuppetOf {scriptMessageWhom :: Text}
    | MsgRemoveConsort
    | MsgClearRebels
    | MsgMonthsSinceDefection {scriptMessageAmt :: Double}
    | MsgNumJanissaries {scriptMessageAmt :: Double}
    | MsgJanissaryPercentage {scriptMessageAmt :: Double}
    | MsgBreakUnion {scriptMessageWhom :: Text}
    | MsgCreateMarriage {scriptMessageWhom :: Text}
    | MsgAddTradeNodeIcome {scriptMessageAmt :: Double}
    | MsgYearlyCorruptionIncrease {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgWasNeverGermanReigionalTag
    | MsgReformLevel {scriptMessageAmt :: Double}
    | MsgHasWargoalAgainst {scriptMessageWhom :: Text}
    | MsgHasWargoalAgainstType {scriptMessage_icon :: Text, scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgIsSupportingIndependenceOf {scriptMessageWhom :: Text}
    | MsgFormCoalitionAgainst {scriptMessageWhom :: Text}
    | MsgProvincesOnCapitalContinentOf {scriptMessageWhom :: Text}
    | MsgExpellingMinorities {scriptMessageYn :: Bool}
    | MsgHasOrBuildingFlagship {scriptMessageYn :: Bool}
    | MsgRecentTreasureShipPassage {scriptMessageYn :: Bool}
    | MsgNewEstateRegency {scriptMessageIcon :: Text, scriptMessageWho :: Text}
    | MsgEstateLedRegencyInfluence {scriptMessageAmt :: Double}
    | MsgEstateLedRegencyLoyalty {scriptMessageAmt :: Double}
    | MsgSetEstateLedRegencyPrivilegeRandom
    | MsgTradeNode {scriptMessageWhat :: Text}
    | MsgGlobalHeathenMissionaryStrength {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgManpowerInTrueFaithProvinces {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgYearlyDoomReduction {scriptMessageAmt :: Double}
    | MsgBlockadeForceRequired {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgFreeCityImperialAuthority {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHostileDisembarkSpeed {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalReligiousUnityContribution {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAllEstateLoyaltyEquilibrium {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGlobalManpower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGlobalProsperityGrowth {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHostileFleetAttrition {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalGoldDepletionChanceModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalGreatProjectUpgradeCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalHostileAttrition {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalManpower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalProsperityGrowth {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLocalYearsOfNationalism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMinLocalAutonomy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonthlyGoldInflationModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonthlyHeirClaimIncrease {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMoveCapitalCostModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPrestigePerDevelopmentFromConversion {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgStateGoverningCost {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgToleranceOfHeathensCapacity {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgYearlyAuthority {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgColonyMissionReward {scriptMessageProv :: Text}
    | MsgClearPreviousPrimaryCults
    | MsgNumUnlockedCults {scriptMessageAmt :: Double}
    | MsgHasPrimaryCult {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgChangeCult {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgSelectPrimaryCult {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgChangePrimaryCult {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgUnlockEstatePrivilege {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgKillUnits {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double}
    | MsgConstructBuilding {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageSpeed :: Double, scriptMessageCost :: Double}
    | MsgAddBuildingConstruction {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double, scriptMessageVar :: Text, scriptMessageProv :: Text}
    | MsgAllowBaselineInviteScholar {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgRemoveBuilding {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgRemoveLoot {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double}
    | MsgSwitchTag {scriptMessageWho :: Text}
    | MsgMonthlyPietyAccelerator {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMovementSpeedInFleetModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}

-- | Whether to default to English localization.
useEnglish :: [Text] -> Bool
useEnglish [] = True
useEnglish ("en":_) = True
useEnglish _ = False

instance RenderMessage Script ScriptMessage where
    renderMessage _ (useEnglish -> True) msg = case msg of
        MsgUnprocessed {scriptMessageMsg = _msg}
            -> _msg
        -- scope messages
        -- trigger scope messages
        MsgAllAlliedCountry
            -> "[SCOPE]All allied countries:"
        MsgAllArmyLeader
            -> "[SCOPE]All employed army leaders:"
        MsgAllCharacter
            -> "[SCOPE]All recruited characters:"
        MsgAllControlledState
            -> "[SCOPE]All controlled states:"
        MsgAllCoreState
            -> "[SCOPE]All core states:"
        MsgAllCountry
            -> "[SCOPE]All countries in the world:"
        MsgAllCountryWithOriginalTag {scriptMessageWho = _who}
            -> mconcat
                ["[SCOPE]All countries in the world which are or originally were "
                , _who
                , ":"
                ]
        MsgAllEnemyCountry
            -> "[SCOPE]All enemy countries:"
        MsgAllGuaranteedCountry
            -> "[SCOPE]All guaranteed countries:"
        MsgAllNavyLeader
            -> "[SCOPE]All employed navy leaders:"
        MsgAllNeighborCountry
            -> "[SCOPE]All neighbouring countries:"
        MsgAllNeighborState
            -> "[SCOPE]All neighbouring states:"
        MsgAllOccupiedCountry
            -> "[SCOPE]All occupied countries:"
        MsgAllOperativeLeader
            -> "[SCOPE]All employed operatives:"
        MsgAllOtherCountry
            -> "[SCOPE]All other countries:"
        MsgAllOwnedState
            -> "[SCOPE]All owned states:"
        MsgAllState
            -> "[SCOPE]All states:"
        MsgAllSubjectCountries
            -> "[SCOPE]All subject countries:"
        MsgAllUnitLeader
            -> "[SCOPE]All employed unit leaders:"
        MsgAnyAlliedCountry
            -> "[SCOPE]Any allied country:"
        MsgAnyArmyLeader
            -> "[SCOPE]Any employed army leader:"
        MsgAnyCharacter
            -> "[SCOPE]Any recruited character:"
        MsgAnyControlledState
            -> "[SCOPE]Any controlled state:"
        MsgAnyCoreState
            -> "[SCOPE]Any core state:"
        MsgAnyCountry
            -> "[SCOPE]Any country in the world:"
        MsgAnyCountryWithOriginalTag {scriptMessageWho = _who}
            -> mconcat
                ["[SCOPE]Any country in the world which is or originally was "
                , _who
                , ":"
                ]
        MsgAnyEnemyCountry
            -> "[SCOPE]Any enemy country:"
        MsgAnyGuaranteedCountry
            -> "[SCOPE]Any guaranteed country:"
        MsgAnyHomeAreaNeighborCountry
            -> "[SCOPE]Any neighbouring country with direct land connection:"
        MsgAnyNavyLeader
            -> "[SCOPE]Any employed navy leader:"
        MsgAnyNeighborCountry
            -> "[SCOPE]Any neighbouring country:"
        MsgAnyNeighborState
            -> "[SCOPE]Any neighbouring state:"
        MsgAnyOccupiedCountry
            -> "[SCOPE]Any occupied country:"
        MsgAnyOperativeLeader
            -> "[SCOPE]Any employed operative:"
        MsgAnyOtherCountry
            -> "[SCOPE]Any other country:"
        MsgAnyOwnedState
            -> "[SCOPE]Any owned state:"
        MsgAnyState
            -> "[SCOPE]Any state:"
        MsgAnySubjectCountry
            -> "[SCOPE]Any subject country:"
        MsgAnyUnitLeader
            -> "[SCOPE]Any employed unit leader:"
        -- effect scope messages
        MsgEveryArmyLeader
            -> "[SCOPE]Every employed army leader:"
        MsgEveryCharacter
            -> "[SCOPE]Every recruited character:"
        MsgEveryControlledState
            -> "[SCOPE]Every controlled state:"
        MsgEveryCoreState
            -> "[SCOPE]Every core state:"
        MsgEveryCountry
            -> "[SCOPE]Every country in the world:"
        MsgEveryCountryWithOriginalTag  {scriptMessageWho = _who}
            -> mconcat
                ["[SCOPE]Every country in the world which is or originally was "
                , _who
                , ":"
                ]
        MsgEveryEnemyCountry
            -> "[SCOPE]Every enemy country:"
        MsgEveryNavyLeader
            -> "[SCOPE]Every employed navy leader:"
        MsgEveryNeighborCountry
            -> "[SCOPE]Every neighbouring country:"
        MsgEveryNeighborState
            -> "[SCOPE]Every neighbouring state:"
        MsgEveryOccupiedCountry
            -> "[SCOPE]Every occupied country:"
        MsgEveryOperative
            -> "[SCOPE]Every employed operative:"
        MsgEveryOtherCountry
            -> "[SCOPE]Every other country:"
        MsgEveryOwnedState
            -> "[SCOPE]Every owned state:"
        MsgEveryState
            -> "[SCOPE]Every state:"
        MsgEverySubjectCountry
            -> "[SCOPE]Every subject country:"
        MsgEveryUnitLeader
            -> "[SCOPE]Every employed unit leader:"
        MsgGlobalEveryArmyLeader
            -> "[SCOPE]Every employed  army leaderin the world:"
        MsgRandomArmyLeader
            -> "[SCOPE]One random employed army leader:"
        MsgRandomCharacter
            -> "[SCOPE]One random recruited character:"
        MsgRandomControlledState
            -> "[SCOPE]One random controlled state:"
        MsgRandomCoreState
            -> "[SCOPE]One random core state:"
        MsgRandomCountry
            -> "[SCOPE]One random country in the world:"
        MsgRandomCountryWithOriginalTag  {scriptMessageWho = _who}
            -> mconcat
                ["[SCOPE]One random country in the world which is or originally was "
                , _who
                , ":"
                ]
        MsgRandomEnemyCountry
            -> "[SCOPE]One random enemy country:"
        MsgRandomNavyLeader
            -> "[SCOPE]One random employed navy leader:"
        MsgRandomNeighborCountry
            -> "[SCOPE]One random neighbouring country:"
        MsgRandomNeighborState
            -> "[SCOPE]One random neighbouring state:"
        MsgRandomOccupiedCountry
            -> "[SCOPE]One random occupied country:"
        MsgRandomOperative
            -> "[SCOPE]One random employed operative:"
        MsgRandomOtherCountry
            -> "[SCOPE]One random other country:"
        MsgRandomOwnedControlledState
            -> "[SCOPE]One random owned and controlled state:"
        MsgRandomOwnedState
            -> "[SCOPE]One random owned state:"
        MsgRandomState
            -> "[SCOPE]One random state:"
        MsgRandomSubjectCountry
            -> "[SCOPE]One random subject country:"
        MsgRandomUnitLeader
            -> "[SCOPE]One random employed unit leader:"
        -- dual scope messages
        MsgROOT
            -> "[SCOPE]ROOT"
        MsgROOTSCOPECountry
            -> "[SCOPE]Our country"
        MsgROOTSCOPEState
            -> "[SCOPE]The currently considered state"
        MsgROOTSCOPECharacter
            -> "[SCOPE]The currently considered character"
        MsgROOTSCOPEOperative
            -> "[SCOPE]The currently considered operative"
        MsgROOTSCOPEUnitLeader
            -> "[SCOPE]The currently considered unit leader"
        MsgROOTCountry
            -> "our country"
        MsgROOTCountryAsOther
            -> "same as our country"
        MsgROOTOperative
            -> "the currently considered operative"
        MsgROOTOperativeOwner
            -> "the employer of the currently considered operative"
        MsgROOTOperativeAsOther
            -> "same as the currently considered operative"
        MsgROOTState
            -> "the currently considered state"
        MsgROOTStateOwner
            -> "the owner of the currently consideredstate"
        MsgROOTStateAsOther
            -> "same as the currently considered state"
        MsgROOTUnitLeader
            -> "the currently considered unit leader"
        MsgROOTUnitLeaderOwner
            -> "the employer of the  currently considered unit leader"
        MsgROOTUnitLeaderAsOther
            -> "same as the currently considered unit leader"

        MsgPREV
            -> "[SCOPE]PREV"
        MsgPREVSCOPECharacter
            -> "[SCOPE]The previously mentioned character"
        MsgPREVSCOPECountry
            -> "[SCOPE]Previously mentioned country"
        MsgPREVSCOPEOperative
            -> "[SCOPE]The previously mentioned operative"
        MsgPREVSCOPEState
            -> "[SCOPE]The previously mentioned state"
        MsgPREVSCOPEUnitLeader
            -> "[SCOPE]The previously mentioned unit leader"
        MsgPREVCharacter
            -> "the previously mentioned character"
        MsgPREVCharacterOwner
            -> "the employer of the previously mentioned character"
        MsgPREVCharacterAsOther
            -> "same as the previously mentioned character"
        MsgPREVCountry
            -> "the previously mentioned country"
        MsgPREVCountryAsOther
            -> "same as the previously mentioned country"
        MsgPREVState
            -> "the previously mentioned state"
        MsgPREVStateOwner
            -> "the owner of the previously mentioned state"
        MsgPREVStateAsOther
            -> "same as the previously mentioned state"
        MsgPREVOperative
            -> "the previously mentioned operative"
        MsgPREVOperativeOwner
            -> "the employer of the previously mentioned operative"
        MsgPREVOperativeAsOther
            -> "same as the previously mentioned operative"
        MsgPREVUnitLeader
            -> "the previously mentioned unit leader"
        MsgPREVUnitLeaderOwner
            -> "the employer of the previously mentioned unit leader"
        MsgPREVUnitLeaderAsOther
            -> "same as the previously mentioned unit leader"

        MsgTHISCharacter
            -> "this character"
        MsgTHISCharacterOwner
            -> "the employer of this character"
        MsgTHISCharacterAsOther
            -> "same as this character"
        MsgTHISCountry
            -> "this country"
        MsgTHISCountryAsOther
            -> "same as this country"
        MsgTHISState
            -> "this state"
        MsgTHISStateOwner
            -> "the owner of this state"
        MsgTHISStateAsOther
            -> "same as this state"
        MsgTHISOperative
            -> "this operative"
        MsgTHISOperativeOwner
            -> "the employer of this operative"
        MsgTHISOperativeAsOther
            -> "same as this operative"
        MsgTHISUnitLeader
            -> "this unit leader"
        MsgTHISUnitLeaderOwner
            -> "the employer of this unit leader"
        MsgTHISUnitLeaderAsOther
            -> "same as this unit leader"

        MsgFROM
            -> "FROM"
        MsgFROMSCOPE
            -> "[SCOPE]FROM"

        MsgCapital
            -> "[SCOPE]Capital state:"
        MsgController
            -> "[SCOPE]State controller:"
        MsgOverlord
            -> "[SCOPE]Overlord:"
        MsgOwner
            -> "[SCOPE]State owner:"
        MsgState {scriptMessageWhere = _where}
            -> mconcat
                [ "[Scope]"
                , _where
                , ":"
                ]
        MsgIsState {scriptMessageWhere = _where}
            -> mconcat
                [ "State "
                , _where
                ]
        MsgSCOPEEventTarget {scriptMessageTag = _tag}
            -> mconcat
                [ "[SCOPE]Event target <tt>"
                , _tag
                , "</tt>:"
                ]
        MsgEventTargetVar {scriptMessageTag = _tag}
            -> mconcat
                [ "event target <tt>"
                , _tag
                , "</tt>"
                ]
        MsgSCOPEVariable {scriptMessageTag = _tag}
            -> mconcat
                [ "[SCOPE]Variable <tt>"
                , _tag
                , "</tt>:"
                ]
        MsgVariable {scriptMessageTag = _tag}
            -> mconcat
                [ "variable <tt>"
                , _tag
                , "</tt>"
                ]
        -- flow control messages
        MsgAnd
            -> "All of:"
        MsgNot
            -> "None of:"
        MsgOr
            -> "At least one of:"


        MsgCountTriggers
            -> "Count trigger:"
        MsgHiddenTriggers
            -> "Hidden trigger:"
        MsgHiddenEffect
            -> "Hidden effect:"
        MsgCustomTriggerTooltip
            -> "Custom trigger tooltip:"

        MsgElse
            -> "Else:"
        MsgElseIf
            -> "Else, if:"
        MsgIf
            -> "If:"
        MsgLimit
            -> "Limited to:"
        MsgPrioritize {scriptMessageWhat = _what}
            -> mconcat
                [ "Prioritizing the "
                , _what
                ]
        MsgOrignalTagToCheck {scriptMessageWho = _who}
            -> mconcat
                [ "originally "
                , _who
                ]
        MsgWhile
            -> "While:"
        MsgFor
            -> "For:"
        MsgRandom
            -> "One of the following at random:"
        MsgRandomList
            -> "One of the following at random:"
        MsgRandomChance {scriptMessageChance = _chance}
            -> mconcat
                [ toMessage (plainPc _chance)
                , " chance of:"
                ]
        MsgRandomChanceHOI4 {scriptMessageChance = _chance, scriptMessageAmt = _amt}
            -> mconcat
                [ toMessage (plainPc _chance)
                ," (",toMessage (plainNum _amt),")"
                , " chance of:"
                ]
        MsgRandomVarChance {scriptMessageWhat = _what}
            -> mconcat
                [ "Based on "
                , _what
                , " chance of:"
                ]
        --unsorted messages
        MsgYes {scriptMessageIcon = _icon}
            -> mconcat
                [ _icon
                , " Yes"
                ]
        MsgNo {scriptMessageIcon = _icon}
            -> mconcat
                [ _icon
                , " No"
                ]
        MsgAddCardinal
            -> "Gain a cardinal"
        MsgHeirDies {scriptMessageYn = _yn}
            -> mconcat
                [ "Heir dies"
                , ifThenElseT _yn "" "<!-- allow_new_heir=no -->"
                ]
        MsgRulerDies
            -> "Ruler dies"
        MsgKillCountryLeader
            -> "Kill the current country leader"
        MsgLoseCardinal
            -> "Lose a cardinal"
        MsgLeaveHRE
            -> "Remove all provinces from the Holy Roman Empire, unless an elector or the Emperor"
        MsgRetireCountryLeader
            -> "Retire the current country leader"
        MsgIsJanissaryMod
            -> "This modifier only applies to janissary regiments"
        MsgIsRajputMod
            -> "This modifier only applies to rajput regiments"
        MsgIsImperialMod
            -> "This modifier only applies to members of the HRE"
        MsgGainADM {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " administrative power"
                ]
        MsgGainAT {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " army tradition"
                ]
        MsgGainAuth {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " authority"
                ]
        MsgDrillGainMod {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Army drill gain modifier"
                ]
        MsgGainBT {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " base tax"
                ]
        MsgGainBP {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " base production"
                ]
        MsgGainBM {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " base manpower"
                ]
        MsgGainDIP {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " diplomatic power"
                ]
        MsgAddExtraStateSharedBuildingSlots {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ addOrRemove _amt
                , " "
                , toMessage (colourNum True _amt)
                , " "
                , _icon
                , " "
                , plural _amt "building slot" "building slots"
                ]
        MsgGainDoom {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum False _amt)
                , " doom"
                ]
        MsgHeirGainClaim {scriptMessageAmt = _amt}
            -> mconcat
                [ "Heir "
                , gainsOrLoses _amt
                , " "
                , toMessage (colourNum True _amt)
                , " claim strength"
                ]
        MsgGainDevotion {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " devotion"
                ]
        MsgGainHordeUnity {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " horde unity"
                ]
        MsgGainImperialAuthority {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " imperial authority"
                ]
        MsgGainKarma {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " karma"
                ]
        MsgGainLegitimacy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " legitimacy"
                ]
        MsgGainMIL {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " military power"
                ]
        MsgGainNavyTradition {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " navy tradition"
                ]
        MsgGainPapalInfluence {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " papal influence"
                ]
        MsgGainPrestige {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " prestige"
                ]
        MsgGainRepTrad {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " republican tradition"
                ]
        MsgGainRevolutionaryZeal {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " {{DLC-only|revolutionary zeal}}"
                ]
        MsgGainPoliticalPower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " Political power"
                ]
        MsgGainWarExhaustion {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum False _amt)
                , " war exhaustion"
                ]
        MsgGainYearlyManpower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , plural _amt " year's" " years'"
                , " worth of manpower"
                ]
        MsgGainADMSkill {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Ruler "
                , gainsOrLoses _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " administrative skill"
                ]
        MsgGainDIPSkill {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Ruler "
                , gainsOrLoses _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " diplomatic skill"
                ]
        MsgGainMILSkill {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Ruler "
                , gainsOrLoses _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " military skill"
                ]
        MsgGainHeirADMSkill {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Heir "
                , gainsOrLoses _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " administrative skill"
                ]
        MsgGainHeirDIPSkill {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Heir "
                , gainsOrLoses _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " diplomatic skill"
                ]
        MsgGainHeirMILSkill {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Heir "
                , gainsOrLoses _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " military skill"
                ]
        MsgGainSiegeProgress {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " siege progress"
                ]
        MsgGainPatAuth {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (reducedNum (colourPc True) _amt)
                , " Patriarch authority"
                ]
        MsgGainMysticism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Gain "
                , _icon
                , " '''"
                , toMessage (reducedNum plainNum (negate _amt))
                , "''' Mysticism"
                ]
        MsgGainLegalism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (reducedNum plainNum _amt)
                , ifThenElseT (_amt < 0) " Mysticism" " Legalism"
                ]
        MsgStrengthenStatists {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Strengthen "
                , _icon
                , " Statists by '''"
                , toMessage (reducedNum plainPc (negate _amt))
                , "'''"
                ]
        MsgStrengthenOrangists {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Strengthen "
                , _icon
                , " Monarchists by '''"
                , toMessage (reducedNum plainPc _amt)
                , "'''"
                ]
        MsgGainInflation {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourPc False _amt)
                , " inflation"
                ]
        MsgGainLocalAutonomy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourPc False _amt)
                , " local autonomy"
                ]
        MsgReformDesire {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "{{icon|catholic}} Catholicism has at least "
                , _icon
                , " "
                , toMessage (reducedNum plainPc _amt)
                , " reform desire"
                ]
        MsgGainReformDesire {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "{{icon|catholic}} Catholicism "
                , gainsOrLoses _amt
                , " "
                , _icon
                , " "
                , toMessage (reducedNum (colourPc False) _amt)
                , " reform desire"
                ]
        MsgGainManpower {scriptMessageIcon = _icon, scriptMessageLoc = _loc, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " "
                , _loc
                ]
        MsgGainLocPC {scriptMessageIcon = _icon, scriptMessageLoc = _loc, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (reducedNum (colourPc True) _amt)
                , " "
                , _icon
                , " "
                , _loc
                ]
        MsgGainMercantilism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourPc True _amt)
                , " mercantilism"
                ]
        MsgGainMP {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " manpower"
                ]
        MsgGainMPFrac {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " manpower equal to "
                , toMessage (reducedNum (colourPc True) _amt)
                , " of maximum"
                ]
        MsgSeparatism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "year" "years"
                , " of separatism"
                ]
        MsgCountryMod
            -> "country modifier"
        MsgProvMod
            -> "province modifier"
        MsgPermanentProvMod
            -> "permanent province modifier"
        MsgRulerMod
            -> "ruler modifier"
        MsgTradeMod
            -> "trade modifier"
        MsgAddMod {scriptMessageModid = _modid, scriptMessageName = _name, scriptMessageDays = _days}
            -> mconcat
                [ "Gain modifier "
                , toMessage (iquotes _name)
                , " <!-- "
                , _modid
                , " --> for "
                , toMessage $ formatDays _days
                ]
        MsgGainMod {scriptMessageModid = _modid, scriptMessageType = _type, scriptMessageName = _name}
            -> mconcat
                [ "Gain "
                , _type
                , " "
                , toMessage (iquotes _name)
                , ", <!-- "
                , _modid
                , " --> giving the following effects:"
                ]
        MsgGainModDur {scriptMessageModid = _modid, scriptMessageType = _type, scriptMessageName = _name, scriptMessageDays = _days}
            -> mconcat
                [ "Gain "
                , _type
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _modid
                , " --> for "
                , if _days < 0
                    then if _type == "ruler"
                        then "the duration of the current ruler's reign"
                        else "the rest of the game"
                    else toMessage $ formatDays _days
                , ", giving the following effects:"
                ]
        MsgGainModPow {scriptMessageModid = _modid, scriptMessageType = _type, scriptMessageName = _name, scriptMessagePow = _pow}
            -> mconcat
                [ "Gain "
                , _type
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _modid
                , " --> ("
                , toMessage (colourNumSign True _pow)
                , " Power"
                ]
        MsgGainModPowDur {scriptMessageModid = _modid, scriptMessageType = _type, scriptMessageName = _name, scriptMessagePow = _pow, scriptMessageDays = _days}
            -> mconcat
                [ "Gain "
                , _type
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _modid
                , " --> ("
                , toMessage (colourNumSign True _pow)
                , " Power) for "
                , toMessage (formatDays _days)
                ]
        MsgActorGainsMod {scriptMessageModid = _modid, scriptMessageWho = _who, scriptMessageType = _type, scriptMessageName = _name}
            -> mconcat
                [ _who
                , " gains "
                , _type
                , " "
                , toMessage (iquotes _name)
                , ", <!-- "
                , _modid
                , " --> giving the following effects:"
                ]
        MsgActorGainsModDur {scriptMessageModid = _modid, scriptMessageWho = _who, scriptMessageType = _type, scriptMessageName = _name, scriptMessageDays = _days}
            -> mconcat
                [ _who
                , " gains "
                , _type
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _modid
                , " --> for "
                , toMessage $ formatDays _days
                , ", giving the following effects:"
                ]
        MsgActorGainsModPow {scriptMessageModid = _modid, scriptMessageWho = _who, scriptMessageType = _type, scriptMessageName = _name, scriptMessagePow = _pow}
            -> mconcat
                [ _who
                , " gains "
                , _type
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _modid
                , " --> ("
                , toMessage (colourNumSign True _pow)
                , " Power"
                ]
        MsgActorGainsModPowDur {scriptMessageModid = _modid, scriptMessageWho = _who, scriptMessageType = _type, scriptMessageName = _name, scriptMessagePow = _pow, scriptMessageDays = _days}
            -> mconcat
                [ _who
                , " gains "
                , _type
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _modid
                , " --> ("
                , toMessage (colourNumSign True _pow)
                , " Power) for "
                , toMessage (formatDays _days)
                ]
        MsgHasModifier {scriptMessageModid = _modid, scriptMessageKind = _kind, scriptMessageName = _name}
            -> mconcat
                [ "Has "
                , _kind
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _modid
                , " -->"
                ]
        MsgRemoveModifier {scriptMessageModid = _modid, scriptMessageKind = _kind, scriptMessageName = _name}
            -> mconcat
                [ "Remove "
                , _kind
                , " ''\""
                , _name
                , "\"'' <!-- "
                , _modid
                , " -->"
                ]
        MsgArea
            -> "Area containing this province:"
        MsgChangeGovernment {scriptMessageWhat = _what}
            -> mconcat
                [ "Change government to "
                , _what
                ]
        MsgCreateFaction {scriptMessageWhat = _what}
            -> mconcat
                [ "Create faction called "
                , toMessage (iquotes _what)
                ]
        MsgContinentIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Continent is "
                , _what
                ]
        MsgContinentIsAs {scriptMessageWhat = _what}
            -> mconcat
                [ "Continent is the same as "
                , _what
                ]
        MsgCultureIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Culture is "
                , _what
                ]
        MsgCultureIsAs {scriptMessageWho = _who}
            -> mconcat
                [ "Culture is the same as "
                , _who
                ]
        MsgCultureIsGroup {scriptMessageWhat = _what}
            -> mconcat
                [ "Culture is in "
                , _what
                , " group"
                ]
        MsgCultureGroupAs {scriptMessageWhat = _what}
            -> mconcat
                [ "Culture is in the same group as "
                , _what
                ]
        MsgRulerIsDynasty {scriptMessageWhat = _what}
            -> mconcat
                [ "Ruler is of the "
                , toMessage (quotes _what)
                , " dynasty"
                ]
        MsgRulerIsSameDynasty {scriptMessageWho = _who}
            -> mconcat
                [ "Ruler is of the same dynasty as "
                , _who
                ]
        MsgHeirNationality {scriptMessageWhat = _what}
            -> mconcat
                [ "Heir's culture is "
                , _what
                ]
        MsgHeirNationalityAs {scriptMessageWho = _who}
            -> mconcat
                [ "Heir's culture is the same as "
                , _who
                ]
        MsgHeirReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Heir's religion is "
                , _icon
                , " "
                , _what
                ]
        MsgHeirReligionAs {scriptMessageWho = _who}
            -> mconcat
                [ "Heir's religion is the same as "
                , _who
                ]
        MsgSetHeirReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Heir's religion becomes "
                , _icon
                , " "
                , _what
                ]
        MsgSetHeirReligionAs {scriptMessageWho = _who}
            -> mconcat
                [ "Heir's religion becomes that of "
                , _who
                ]
        MsgDisasterEnds {scriptMessageWhat = _what}
            -> mconcat
                [ "Disaster "
                , toMessage (iquotes _what)
                , " ends"
                ]
        MsgGovernmentIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Government is "
                , _what
                ]
        MsgGovernmentIsIcon {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Government is "
                , _icon
                , " "
                , _what
                ]
        MsgHasAdvisor {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has advisor "
                , _whom
                ]
        MsgHasAdvisorType {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has "
                , _icon
                , " "
                , _what
                , " advisor"
                ]
        MsgHasTech {scriptMessageWhat = _what}
            -> mconcat
                [ "Has "
                , _what
                , " technology researched"
                ]
        MsgHasTerrain {scriptMessageWhat = _what}
            -> mconcat
                [ "Has "
                , _what
                , " terrain"
                ]
        MsgCavalrySpawnsCountry {scriptMessageWhom = _whom}
            -> mconcat
                [ "A cavalry regiment loyal to "
                , _whom
                , " spawns"
                ]
        MsgCavalrySpawnsProvince {scriptMessageWhere = _where}
            -> mconcat
                [ "A cavalry regiment spawns in "
                , _where
                ]
        MsgInfantrySpawnsCountry {scriptMessageWhom = _whom}
            -> mconcat
                [ "An infantry regiment loyal to "
                , _whom
                , " spawns"
                ]
        MsgInfantrySpawnsProvince {scriptMessageWhere = _where}
            -> mconcat
                [ "An infantry regiment spawns in "
                , _where
                ]
        MsgAdvisorDies {scriptMessageWho = _who}
            -> mconcat
                [ "Advisor "
                , _who
                , " dies"
                ]
        MsgDominantCultureIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Dominant culture is "
                , _what
                ]
        MsgDominantCultureIsAs {scriptMessageWhat = _what}
            -> mconcat
                [ "Dominant culture is the same as "
                , _what
                ]
        MsgDiplomaticRelation {scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ _what
                , _whom
                ]
        MsgPrimaryCultureIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Primary culture is "
                , _what
                ]
        MsgPrimaryCultureIsAs {scriptMessageWhat = _what}
            -> mconcat
                [ "Primary culture is the same as "
                , _what
                ]
        MsgRegionIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Province is in "
                , _what
                , " region"
                ]
        MsgSuperRegionIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Province is in "
                , _what
                , " [[super-region]]"
                ]
        MsgTooltip {scriptMessageWhat = _what}
            -> mconcat
                [ "Tooltip: "
                , _what
                ]
        MsgCustomEffectTooltip {scriptMessageWhat = _what}
            -> mconcat
                [ "Custom effect tooltip: "
                , _what
                ]
        MsgLoseAdvisor {scriptMessageWho = _who}
            -> mconcat
                [ "Advisor "
                , _who
                , " leaves the country's court"
                ]
        MsgRemoveFromEstate {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ "Remove province from the "
                , _icon
                , " "
                , _whom
                , " estate"
                ]
        MsgDisasterOngoing {scriptMessageWhat = _what}
            -> mconcat
                [ "The "
                , toMessage (iquotes _what)
                , " disaster is ongoing"
                ]
        MsgProvinceIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Province is "
                , _what
                ]
        MsgRemoveStateClaim {scriptMessageWhat = _what}
            -> mconcat
                [ "Lose a claim on "
                , _what
                ]
        MsgOwnsState {scriptMessageWhat = _what}
            -> mconcat
                [ "Owns state "
                , _what
                ]
        MsgOwnsCore {scriptMessageWhat = _what}
            -> mconcat
                [ "Owns core province "
                , _what
                ]
        MsgControlsState {scriptMessageWhat = _what}
            -> mconcat
                [ "Controls state "
                , _what
                ]
        MsgHasFullControlOfState {scriptMessageWhat = _what}
            -> mconcat
                [ "Has full control of state "
                , _what
                ]
        MsgAdvisorExists {scriptMessageAdvisorID = _advisorID}
            -> mconcat
                [ "Advisor with ID "
                , toMessage (plainNum _advisorID)
                , " exists"
                ]
        MsgAdvisorIsEmployed {scriptMessageAdvisorID = _advisorID}
            -> mconcat
                [ "Advisor with ID "
                , toMessage (plainNum _advisorID)
                , " is employed"
                ]
        MsgClearFlag {scriptMessageFlagType = _flagType, scriptMessageName = _name}
            -> mconcat
                [ "Clear "
                , _flagType
                , " flag <tt>"
                , _name
                , "</tt>"
                ]
        MsgHasFlag {scriptMessageFlagType = _flagType, scriptMessageName = _name}
            -> mconcat
                [ toMessage (T.toTitle _flagType)
                , " flag <tt>"
                , _name
                , "</tt> is set "
                ]
        MsgHasFlagFor {scriptMessageFlagType = _flagType, scriptMessageName = _name, scriptMessageAmtText = _amtT, scriptMessageTime = _time, scriptMessageDate = _date}
            -> mconcat
                [ toMessage (T.toTitle _flagType)
                , " flag <tt>"
                , _name
                , "</tt> is set"
                , _amtT
                , _time
                , _date
                ]
        MsgSetFlag {scriptMessageFlagType = _flagType, scriptMessageName = _name}
            -> mconcat
                [ "Set "
                , _flagType
                , " flag <tt>"
                , _name
                , "</tt>"
                ]
        MsgSetFlagFor {scriptMessageFlagType = _flagType, scriptMessageName = _name, scriptMessageAmtText = _amtT, scriptMessageDaysText = _days}
            -> mconcat
                [ "Set "
                , _flagType
                , " flag <tt>"
                , _name
                , "</tt>"
                , _amtT
                , _days
                ]
        MsgHadFlag {scriptMessageFlagType = _flagType, scriptMessageName = _name, scriptMessageDays = _days}
            -> mconcat
                [ "Has had "
                , _flagType
                , " flag <tt>"
                , _name
                , "</tt> for "
                , toMessage (formatDays _days)
                ]
        MsgModifyFlag {scriptMessageFlagType = _flagType, scriptMessageFlag = _flag, scriptMessageAmt = _amt}
            -> mconcat
                [ "Modify "
                , _flagType
                , " flag <tt>"
                , _flag
                , "</tt> by "
                , toMessage (plainNumSign _amt)
                ]
        MsgCharacterFlag
            -> "character"
        MsgCountryFlag
            -> "country"
        MsgGlobalFlag
            -> "global"
        MsgStateFlag
            -> "state"
        MsgUnitLeaderFlag
            -> "unit leader"
        MsgColonySettlers {scriptMessageAmt = _amt}
            -> mconcat
                [ "Colony has at least "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "settler" "settlers"
                ]
        MsgWasAtWar {scriptMessageAmt = _amt}
            -> mconcat
                [ "Was at war within the last "
                , toMessage (formatMonths _amt)
                ]
        MsgHasAddedTensionAmount {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has caused"
                , _comp
                , " {{icon|world tension|1}} "
                , toMessage (colourNum False _amt)
                ]
        MsgHasManpower {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " {{icon|manpower|1}} "
                , toMessage (plainNum _amt)
                ]
        MsgHasStability {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " {{icon|stability|1}} "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgHasWarSupport {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPc _amt))
                , " {{icon|war support|1}}"
                ]
        MsgHeirAge {scriptMessageAmt = _amt}
            -> mconcat
                [ "Heir is at least "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "year" "years"
                , " old"
                ]
        MsgYearIs {scriptMessageAmt = _amt}
            -> mconcat
                [ "Year is "
                , toMessage (roundNumNoSpace _amt)
                , " or later"
                ]
        MsgNumLoans {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , " "
                , plural _amt "loan" "loans"
                ]
        MsgNumMercs {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (roundNum _amt)
                , " mercenary "
                , plural _amt "regiment" "regiments"
                ]
        MsgNumMissionaries {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "missionary" "missionaries"
                ]
        MsgNumPorts {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , " "
                , plural _amt "port" "ports"
                ]
        MsgNumRebelArmies {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (roundNum _amt)
                , " rebel "
                , plural (round _amt) "army is" "armies are"
                , " present in the country"
                ]
        MsgNumEmbargoes {scriptMessageAmt = _amt}
            -> mconcat
                [ "Is embargoing at least "
                , toMessage (roundNum _amt)
                , " other "
                , plural (round _amt) "country" "countries"
                ]
        MsgUnitsInProvince {scriptMessageAmt = _amt}
            -> mconcat
                [ "Province contains at least "
                , toMessage (roundNum _amt)
                , " "
                , plural (round _amt) "regiment" "regiments"
                ]
        MsgNumCities {scriptMessageAmt = _amt}
            -> mconcat
                [ "Owns at least "
                , toMessage (roundNum _amt)
                , " non-colony "
                , plural _amt "province" "provinces"
                ]
        MsgNumCitiesThan {scriptMessageWhom = _whom}
            -> mconcat
                [ "Owns at least as many cities as "
                , _whom
                ]
        MsgToleranceToThis {scriptMessageAmt = _amt}
            -> mconcat
                [ "Tolerance to this religion is at least "
                , toMessage (colourNum True _amt)
                ]
        MsgRulerADM {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Ruler's "
                , _icon
                , " administrative skill is at least "
                , toMessage (roundNum _amt)
                ]
        MsgADMTech {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Administrative technology is at least "
                , toMessage (roundNum _amt)
                ]
        MsgADMTechAs {scriptMessageIcon = _icon, scriptMessageWho = _who}
            -> mconcat
                [ _icon
                , " Administrative technology is at least that of "
                , _who
                ]
        MsgArmyTradition {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Army tradition is at least "
                , toMessage (plainNum _amt)
                ]
        MsgArmyTraditionAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ _icon
                , " Army tradition is at least that of "
                , _whom
                ]
        MsgArmyTraditionFromBattles {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNum True _amt)
                , " Army tradition from battles"
                ]
        MsgYearlyArmyTradition {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Yearly army tradition"
                ]
        MsgBaseManpower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Base manpower is at least "
                , toMessage (roundNum _amt)
                ]
        MsgBaseProduction {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Base production is at least "
                , toMessage (roundNum _amt)
                ]
        MsgBaseTax {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Base tax is at least "
                , toMessage (roundNum _amt)
                ]
        MsgCreateAdmiral {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Gain "
                , _icon
                , " admiral with "
                , toMessage (roundNum _amt)
                , " navy tradition"
                ]
        MsgCreateConquistador {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Gain "
                , _icon
                , " conquistador with "
                , toMessage (roundNum _amt)
                , " army tradition"
                ]
        MsgCreateExplorer {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Gain "
                , _icon
                , " explorer with "
                , toMessage (roundNum _amt)
                , " navy tradition"
                ]
        MsgCreateGeneral {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Gain "
                , _icon
                , " general with "
                , toMessage (roundNum _amt)
                , " army tradition"
                ]
        MsgDevelopment {scriptMessageIcon = _icon, scriptMessageDevelopment = _development}
            -> mconcat
                [ _icon
                , " Development is at least "
                , toMessage (roundNum _development)
                ]
        MsgDevelopmentAs {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ _icon
                , " Development is at least that of "
                , _what
                ]
        MsgRulerDIP {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Ruler's "
                , _icon
                , " diplomatic skill is at least "
                , toMessage (roundNum _amt)
                ]
        MsgDIPTech {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Diplomatic technology is at least "
                , toMessage (roundNum _amt)
                ]
        MsgHordeUnity {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Horde unity is at least "
                , toMessage (roundNum _amt)
                ]
        MsgYearlyHordeUnity {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " {{DLC-only|Yearly horde unity}}"
                ]
        MsgKarma {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Karma is at least "
                , toMessage (colourPc True _amt)
                ]
        MsgLegitimacy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Legitimacy is at least "
                , toMessage (roundNum _amt)
                ]
        MsgLegitimacyAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ _icon
                , " Legitimacy is at least that of "
                , _whom
                ]
        MsgLegitimacyEquivalent {scriptMessageAmt = _amt}
            -> mconcat
                [ "{{icon|legitimacy}} Legitimacy (or equivalent) is at least "
                , toMessage (roundNum _amt)
                ]
        MsgYearlyLegitimacy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Yearly legitimacy"
                ]
        MsgRulerMIL {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Ruler's "
                , _icon
                , " military skill is at least "
                , toMessage (roundNum _amt)
                ]
        MsgMILTech {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Military technology is at least "
                , toMessage (roundNum _amt)
                ]
        MsgNumAllies {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "ally" "allies"
                ]
        MsgNumCardinals {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "cardinal" "cardinals"
                ]
        MsgNumColonists {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "colonist" "colonists"
                ]
        MsgNumHeavyShips {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " heavy "
                , plural _amt "ship" "ships"
                ]
        MsgNumHeavyShipsMatches {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ "Has at least as many "
                , _icon
                , " heavy ships as "
                , _whom
                ]
        MsgNumLightShipsMatches {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ "Has at least as many "
                , _icon
                , " light ships as "
                , _whom
                ]
        MsgNumLightShips {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " light "
                , plural _amt "ship" "ships"
                ]
        MsgNumGalleyShipsMatches {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ "Has at least as many "
                , _icon
                , " galley ships as "
                , _whom
                ]
        MsgNumGalleyShips {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " galley "
                , plural _amt "ship" "ships"
                ]
        MsgNumTransportShipsMatches {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ "Has at least as many "
                , _icon
                , " transport ships as "
                , _whom
                ]
        MsgNumTransportShips {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " transport "
                , plural _amt "ship" "ships"
                ]
        MsgNumMerchants {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "merchant" "merchants"
                ]
        MsgStability {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Stability is at least "
                , toMessage (colourNumSign True _amt)
                ]
        MsgTotalDevelopment {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Country's total "
                , _icon
                , " development is at least "
                , toMessage (roundNum _amt)
                ]
        MsgTotalDevelopmentAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ "Country's total "
                , _icon
                , " development is at least that of "
                , _whom
                ]
        MsgTotalCardinals {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "cardinal" "cardinals"
                , " exist in the world"
                ]
        MsgUnrest {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Unrest is at least "
                , _icon
                , " "
                , toMessage (colourNum False _amt)
                ]
        MsgMonthlyIncome {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Monthly income is at least "
                , toMessage (colourNum True _amt)
                , " ducats"
                ]
        MsgMonthlyIncomeAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ _icon
                , " Monthly income is at least that of "
                , _whom
                ]
        MsgWarExhaustion {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " War exhaustion is at least "
                , toMessage (colourNum False _amt)
                ]
        MsgMonthlyWarExhaustion {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign False _amt)
                , " Monthly war exhaustion"
                ]
        MsgWarScore {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "War score is at least "
                , _icon
                , " "
                , toMessage (colourPc True _amt)
                ]
        MsgRepTrad {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Republican tradition is at least "
                , toMessage (roundNum _amt)
                ]
        MsgYearlyRepTrad {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Yearly republican tradition"
                ]
        MsgInflation {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Inflation is at least "
                , toMessage (colourPc False _amt)
                ]
        MsgInflationAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ _icon
                , " Inflation is at least that of "
                , _whom
                ]
        MsgLocalAutonomy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Local autonomy is at least "
                , toMessage (colourPc False _amt)
                ]
        MsgMonthlylAutonomyChange {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Monthly autonomy change "
                , toMessage (colourNumSign False _amt)
                ]
        MsgManpower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , toMessage (plainNum (_amt * 1000))
                , " manpower"
                ]
        MsgManpowerPercentage {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Manpower reserves are at least "
                , toMessage (reducedNum plainPc _amt)
                , " of maximum"
                ]
        MsgMercantilism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Mercantilism is at least "
                , toMessage (plainNum _amt)
                ]
        MsgChangeGoods {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Change province's goods produced to "
                , _icon
                , " "
                , _what
                ]
        MsgCreateAdvisor {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Gain "
                , _icon
                , " "
                , _what
                , " advisor"
                ]
        MsgHasIdeaGroup {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has activated "
                , _icon
                , " "
                , _what
                ]
        MsgProducesGoods {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Produces "
                , _icon
                , " "
                , _what
                ]
        MsgProducesSameGoods {scriptMessageWhere = _where}
            -> mconcat
                [ "Produces the same goods as "
                , _where
                ]
        MsgEstateExists {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ _icon
                , " "
                , _what
                , " estate exists"
                ]
        MsgHasEstate {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has estate "
                , _icon
                , " "
                , _what
                ]
        MsgAssignToEstate {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Assign province to the "
                , _icon
                , " "
                , _what
                , " estate"
                ]
        MsgRulerIsGeneral {scriptMessageIcon = _icon}
            -> mconcat
                [ "Ruler is a "
                , _icon
                , " general"
                ]
        MsgAlliedWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is allied to "
                , _whom
                ]
        MsgCedeProvinceTo {scriptMessageWhom = _whom}
            -> mconcat
                [ "Cede province to "
                , _whom
                ]
        MsgIsControlledBy {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is controlled by "
                , _whom
                ]
        MsgHasDefensiveWarWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is defending in a war against "
                , _whom
                ]
        MsgDiscoverCountry {scriptMessageWhom = _whom}
            -> mconcat
                [ "Discover "
                , _whom
                ]
        MsgDiscoverProvince {scriptMessageWhat = _what}
            -> mconcat
                [ "Discover "
                , _what
                ]
        MsgAddClaimBy {scriptMessageWho = _who}
            -> mconcat
                [ "Is claimed by "
                , _who
                ]
        MsgGainCore {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " gains a core on this province"
                ]
        MsgAddStateClaim {scriptMessageWhat = _what}
            -> mconcat
                [ "Gains a claim on "
                , _what
                ]
        MsgAddStateCore {scriptMessageWhat = _what}
            -> mconcat
                [ "Gains a core on "
                , _what
                ]
        MsgGainPermanentClaimCountry {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " gains a permanent claim on this province"
                ]
        MsgGainPermanentClaimProvince {scriptMessageWhere = _where}
            -> mconcat
                [ "Gain a permanent claim on "
                , _where
                ]
        MsgHasDiscovered {scriptMessageWhomOrWhere = _whomOrWhere}
            -> mconcat
                [ "Has discovered "
                , _whomOrWhere
                ]
        MsgDiscoveredBy {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has been discovered by "
                , _whom
                ]
        MsgSameContinent {scopeIsCountry = _scope, paramIsCountry = _param, scriptMessageWhomOrWhere = _whomOrWhere}
            -> mconcat
                [ ifThenElseT _scope "The capital is" "Is"
                , " on the same continent as "
                , ifThenElseT _param "the capital of " ""
                , _whomOrWhere
                ]
        MsgInheritTechnology {scriptMessageWhom = _whom}
            -> mconcat
                [ "Gain the same technologies as "
                , _whom
                ]
        MsgNeighbors {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has a border with "
                , _whom
                ]
        MsgIsRival {scriptMessageWhom = _whom}
            -> mconcat
                [ _whom
                , " is a rival"
                ]
        MsgIsSubjectOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is a subject of "
                , _whom
                ]
        MsgLoseCoreCountry {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " loses their core on this province"
                ]
        MsgLoseCoreProvince {scriptMessageWhere = _where}
            -> mconcat
                [ "Lose core on "
                , _where
                ]
        MsgRoyalMarriageWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has a royal marriage with "
                , _whom
                ]
        MsgIsOwnedBy {scriptMessageWhom = _whom}
            -> mconcat
                [ "State is owned by "
                , _whom
                ]
        MsgReleaseVassal {scriptMessageWhom = _whom}
            -> mconcat
                [ "Release "
                , _whom
                , " as a vassal"
                ]
        MsgUnderSiegeBy {scriptMessageWhom = _whom}
            -> mconcat
                [ "Province is under siege by "
                , _whom
                ]
        MsgSupportIndependenceOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Support the independence of "
                , _whom
                ]
        MsgCountryIs {scriptMessageWho = _who}
            -> mconcat
                [ "Is "
                , _who
                ]
        MsgTruceWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has a truce with "
                , _whom
                ]
        MsgHasWarWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is at war with "
                , _whom
                ]
        MsgHasWarTogetherWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is in a war with "
                , _whom
                ]
        MsgMakeWhitePeace {scriptMessageWhom = _whom}
            -> mconcat
                [ "Make a white peace with "
                , _whom
                ]
        MsgCountryExists {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " exists"
                ]
        MsgExists {scriptMessageYn = _yn}
            -> toMessage (ifThenElseT _yn "Exists" "Does ''not'' exist")
        MsgSameReligion {scriptMessageWhom = _whom}
            -> mconcat
                [ "Religion is same as "
                , _whom
                ]
        MsgReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Religion is "
                , _icon
                , " "
                , _what
                ]
        MsgSameReligionGroup {scriptMessageWhom = _whom}
            -> mconcat
                [ "Religion group is same as "
                , _whom
                ]
        MsgReligionGroup {scriptMessage_ = __, scriptMessageWhat = _what}
            -> mconcat
                [ "Religion is in "
                , _what
                , " group"
                ]
        MsgChangeSameReligion {scriptMessageWhom = _whom}
            -> mconcat
                [ "Change religion to that of "
                , _whom
                ]
        MsgChangeReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Change religion to "
                , _icon
                , " "
                , _what
                ]
        MsgChangeRulerSameReligion {scriptMessageWhom = _whom}
            -> mconcat
                [ "Change ruler religion to that of "
                , _whom
                ]
        MsgChangeRulerReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Change ruler religion to "
                , _icon
                , " "
                , _what
                ]
        MsgRulerReligionIsSame {scriptMessageWhom = _whom}
            -> mconcat
                [ "Ruler religion is the same as that of "
                , _whom
                ]
        MsgRulerReligionIs {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Ruler religion is "
                , _icon
                , " "
                , _what
                ]
        MsgRulerCultureIsSame {scriptMessageWhom = _whom}
            -> mconcat
                [ "Ruler culture is the same as that of "
                , _whom
                ]
        MsgRulerCultureIs {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Ruler culture is "
                , _icon
                , " "
                , _what
                ]
        MsgIsCoreOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is a core of "
                , _whom
                ]
        MsgHasCoreOn {scriptMessageWhat = _what}
            -> mconcat
                [ "Has a core on "
                , _what
                ]
        MsgHasClaim {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " has a claim on this province"
                ]
        MsgHasClaimOn {scriptMessageWhat = _what}
            -> mconcat
                [ "Has a claim on "
                , _what
                ]
        MsgIsAIControlled {scriptMessageYn = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "AI" "player")
                , "-controlled"
                ]
        MsgHasCardinal {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " a cardinal"
                ]
        MsgHasCapitulated {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Has ''not''")
                , " capitulated"
                ]
        MsgHasConsort {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " a consort"
                ]
        MsgHasHeir {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " an heir"
                ]
        MsgHasHeirNamed {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has "
                , toMessage (quotes _whom)
                , " as heir"
                ]
        MsgHasOwnerCulture {scriptMessageYn = _yn}
            -> mconcat
                [ "Has "
                , toMessage (ifThenElseT _yn "the same culture as" "a different culture from")
                , " its owner"
                ]
        MsgHasOwnerAcceptedCulture {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " an accepted culture of its owner"
                ]
        MsgHasOwnerReligion {scriptMessageYn = _yn}
            -> mconcat
                [ "Has "
                , toMessage (ifThenElseT _yn "the same religion as" "a different religion from")
                , " its owner"
                ]
        MsgHasPort {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " a port"
                ]
        MsgHasSeatInParliament {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " a seat in Parliament"
                ]
        MsgIsInRegency {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " in a regency"
                ]
        MsgIsInExtendedRegency {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " in an extended regency"
                ]
        MsgIsInFaction {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " in a faction"
                ]
        MsgIsInHomeArea {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " connected to the owner's capital"
                ]
        MsgUnderSiege {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " under siege"
                ]
        MsgHasWar {scriptMessageYn = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "at war" "at peace")
                ]
        MsgIsCapital {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " the country's capital"
                ]
        MsgIsCity {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a city"
                ]
        MsgIsCoastal {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a coastal state"
                ]
        MsgIsColony {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a colony"
                ]
        MsgIsEmperor {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " the Holy Roman Emperor"
                ]
        MsgIsFemale {scriptMessageYn = _yn}
            -> mconcat
                [ "Ruler is "
                , toMessage (ifThenElseT _yn "female" "male")
                ]
        MsgIsInCapitalArea {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " connected to the capital of its owner"
                ]
        MsgIsLesserInUnion {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a lesser partner in a personal union"
                ]
        MsgIsLooted {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " looted"
                ]
        MsgIsOverseas {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " overseas"
                ]
        MsgIsPartOfHRE {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " part of the Holy Roman Empire"
                ]
        MsgIsCenterOfReformation {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a Center of Reformation"
                ]
        MsgIsSubject {scriptMessageYn = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "a subject nation" "a independent nation")
                ]
        MsgPapacyIsActive {scriptMessageYn = _yn}
            -> mconcat
                [ "Papal interaction is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " active"
                ]
        MsgHasBeenPlayer {scriptMessageYn = _yn}
            -> mconcat
                [ "Has"
                , toMessage (ifThenElseT _yn "" " ''never''")
                , " been player-controlled"
                ]
        MsgIsStatistsInPower {scriptMessageYn = _yn}
            -> mconcat
                [ "The {{icon|republic}} Statists are"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " in power"
                ]
        MsgIsOrangistsInPower {scriptMessageYn = _yn}
            -> mconcat
                [ "The {{icon|monarchy}} Orangists are"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " in power"
                ]
        MsgGainCB {scriptMessageCbtype = _cbtype, scriptMessageWhom = _whom}
            -> mconcat
                [ "Gain "
                , _cbtype
                , " casus belli against "
                , _whom
                ]
        MsgGainCBDuration {scriptMessageCbtype = _cbtype, scriptMessageWhom = _whom, scriptMessageMonths = _months}
            -> mconcat
                [ "Gain "
                , _cbtype
                , " casus belli against "
                , _whom
                , " for "
                , toMessage (formatMonths _months)
                ]
        MsgReverseGainCB {scriptMessageCbtype = _cbtype, scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " gains "
                , _cbtype
                , " casus belli against this country"
                ]
        MsgReverseGainCBDuration {scriptMessageCbtype = _cbtype, scriptMessageWho = _who, scriptMessageMonths = _months}
            -> mconcat
                [ _who
                , " gains "
                , _cbtype
                , " casus belli against this country for "
                , toMessage (formatMonths _months)
                ]
        MsgFactionGainInfluence {scriptMessageIcon = _icon, scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " influence for the "
                , _whom
                , " faction"
                ]
        MsgFactionHasInfluence {scriptMessageIcon = _icon, scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ _whom
                , " faction has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " influence"
                ]
        MsgFactionInPower {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ _icon
                , " "
                , _whom
                , " faction is in power"
                ]
        MsgHasFaction {scriptMessageWhat = _what}
            -> mconcat
                [ "Has the "
                , _what
                , " faction"
                ]
        MsgHasFactions {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " factions"
                ]
        MsgHasAdoptedCult {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has adopted the "
                , _icon
                , " "
                , _what
                , " cult"
                ]
        MsgHasAutonomyState {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has autonomy level of "
                , _icon
                , " "
                , _what
                ]
        MsgHasUnlockedCult {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has unlocked the "
                , _icon
                , " "
                , _what
                , " cult"
                ]
        MsgHasBuilding {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has "
                , _icon
                , " "
                , _what
                , " building"
                ]
        MsgIndefinitely
            -> "indefinitely"
        MsgForDays {scriptMessageDays = _days}
            -> mconcat
                [ "for "
                , toMessage (formatDays _days)
                ]
        MsgEstateLoyalty {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , _who
                , " has at least "
                , toMessage (plainNum _amt)
                , " loyalty"
                ]
        MsgEstateTerritory {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , _who
                , " control at least '''"
                , toMessage (plainPc _amt)
                , "''' of the land"
                ]
        MsgEstateInfluence {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , _who
                , " has at least "
                , toMessage (plainNum _amt)
                , " influence"
                ]
        MsgAddEstateLoyalty {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , _who
                , " "
                , gainsOrLoses _amt
                , " "
                , toMessage (colourNum True _amt)
                , " loyalty"
                ]
        MsgAddEstateInfluence {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , _who
                , " "
                , gainsOrLoses _amt
                , " "
                , toMessage (plainNum _amt)
                , " influence"
                ]
        MsgEstateLoyaltyModifier {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageWhat = _what, scriptMessageAmt = _amt, scriptMessageDur = _dur}
            -> mconcat
                [ _icon
                , " "
                , _who
                , " gains loyalty modifier "
                , toMessage (iquotes _what)
                , " ("
                , toMessage (colourNum True _amt)
                , " loyalty "
                , _dur
                ]
        MsgEstateInfluenceModifier {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageWhat = _what, scriptMessageAmt = _amt, scriptMessageDur = _dur}
            -> mconcat
                [ _icon
                , " "
                , _who
                , " gains influence modifier "
                , toMessage (iquotes _what)
                , " ("
                , toMessage (colourNum True _amt)
                , " influence) "
                , _dur
                ]
        MsgAddOpinion {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ "Gains opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards "
                , _whom
                ]
        MsgReverseAddOpinion {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " gains opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards this country"
                ]
        MsgAddOpinionDur {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWhom = _whom, scriptMessageYears = _years}
            -> mconcat
                [ "Gain opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards "
                , _whom
                , " for "
                , toMessage (plainNum _years)
                , " years"
                ]
        MsgReverseAddOpinionDur {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWho = _who, scriptMessageYears = _years}
            -> mconcat
                [ _who
                , " gains opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards this country for "
                , toMessage (plainNum _years)
                , " years"
                ]
        MsgHasOpinionMod {scriptMessageModid = _modid}
            -> mconcat
                [ "Has opinion modifier {{opinion_modifier|"
                , _modid
                , "}}"
                ]
        MsgReverseHasOpinionMod {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ _whom
                , " has opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards this country scope"
                ]
        MsgRemoveOpinionMod {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ "Lose opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards "
                , _whom
                ]
        MsgReverseRemoveOpinionMod {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ _whom
                , " loses opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards this country"
                ]
        MsgAddTreasury {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " ducats"
                ]
        MsgAddYearsOfIncome {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " ducats equal to "
                , toMessage (colourNum True _amt)
                , " "
                , plural (round _amt) "year" "years"
                , " of income"
                ]
        MsgNewHeir
            -> "Gain a new heir"
        MsgNewHeirAttribs
            -> "Gain a new heir with the following attributes:"
        MsgNewConsort
            -> "Gain a new consort"
        MsgNewConsortAttribs
            -> "Gain a new consort with the following attributes:"
        MsgBuildToForcelimitLand {scriptMessageInficon = _inficon, scriptMessageInfantry = _infantry, scriptMessageCavicon = _cavicon, scriptMessageCavalry = _cavalry, scriptMessageArticon = _articon, scriptMessageArtillery = _artillery}
            -> mconcat
                [ "Build land units to forcelimit: "
                , _inficon
                , " "
                , toMessage (reducedNum plainPc _infantry)
                , " infantry, "
                , _cavicon
                , " "
                , toMessage (reducedNum plainPc _cavalry)
                , " cavalry, "
                , _articon
                , " "
                , toMessage (reducedNum plainPc _artillery)
                , " artillery"
                ]
        MsgBuildToForcelimitNavy {scriptMessageHeavyicon = _heavyicon, scriptMessageHeavy = _heavy, scriptMessageLighticon = _lighticon, scriptMessageLight = _light, scriptMessageGallicon = _gallicon, scriptMessageGalley = _galley, scriptMessageTranspicon = _transpicon, scriptMessageTransport = _transport}
            -> mconcat
                [ "Build naval units to forcelimit: "
                , _heavyicon
                , " "
                , toMessage (reducedNum plainPc _heavy)
                , " heavy ships, "
                , _lighticon
                , " "
                , toMessage (reducedNum plainPc _light)
                , " light ships, "
                , _gallicon
                , " "
                , toMessage (reducedNum plainPc _galley)
                , " galleys, "
                , _transpicon
                , " "
                , toMessage (reducedNum plainPc _transport)
                , " transports"
                ]
        MsgBuildToForcelimit {scriptMessageInficon = _inficon, scriptMessageInfantry = _infantry, scriptMessageCavicon = _cavicon, scriptMessageCavalry = _cavalry, scriptMessageArticon = _articon, scriptMessageArtillery = _artillery, scriptMessageHeavyicon = _heavyicon, scriptMessageHeavy = _heavy, scriptMessageLighticon = _lighticon, scriptMessageLight = _light, scriptMessageGallicon = _gallicon, scriptMessageGalley = _galley, scriptMessageTranspicon = _transpicon, scriptMessageTransport = _transport}
            -> mconcat
                [ "Build units to forcelimit: "
                , _inficon
                , " "
                , toMessage (reducedNum plainPc _infantry)
                , " infantry, "
                , _cavicon
                , " "
                , toMessage (reducedNum plainPc _cavalry)
                , " cavalry, "
                , _articon
                , " "
                , toMessage (reducedNum plainPc _artillery)
                , " artillery, "
                , _heavyicon
                , " "
                , toMessage (reducedNum plainPc _heavy)
                , " heavy ships, "
                , _lighticon
                , " "
                , toMessage (reducedNum plainPc _light)
                , " light ships, "
                , _gallicon
                , " "
                , toMessage (reducedNum plainPc _galley)
                , " galleys, "
                , _transpicon
                , " "
                , toMessage (reducedNum plainPc _transport)
                , " transports"
                ]
        MsgCountryEvent
            -> "country event"
        MsgNewsEvent
            -> "news event"
        MsgStateEvent
            -> "state event"
        MsgOperativeEvent
            -> "operative event"
        MsgUnitLeaderEvent
            -> "unit leader event"
        MsgTriggerEvent {scriptMessageEvttype = _evttype, scriptMessageEvtid = _evtid, scriptMessageName = _name}
            -> mconcat
                [ "Trigger "
                , _evttype
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _evtid
                , " -->"
                ]
        MsgTriggerEventDays {scriptMessageEvttype = _evttype, scriptMessageEvtid = _evtid, scriptMessageName = _name, scriptMessageDays = _days}
            -> mconcat
                [ "Trigger "
                , _evttype
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _evtid
                , " --> in "
                , toMessage (formatDays _days)
                ]
        MsgTriggerEventTime {scriptMessageEvttype = _evttype, scriptMessageEvtid = _evtid, scriptMessageName = _name, scriptMessageTime = _time}
            -> mconcat
                [ "Trigger "
                , _evttype
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _evtid
                , " --> in "
                , _time
                ]
        MsgDeclareWarWithCB {scriptMessageWhom = _whom, scriptMessageCb = _wgtype}
            -> mconcat
                [ "Declare war on "
                , _whom
                , " using "
                , _wgtype
                , " casus belli"
                ]
        MsgDeclareWarOn {scriptMessageWhom = _whom, scriptMessageWhat = _war, scriptMessageStates = _states}
            -> mconcat
                [ "Declares a "
                , toMessage (italicText _war)
                , " war "
                , _states
                , " against "
                , _whom
                ]
        MsgGainAdvisor {scriptMessageSkill = _skill, scriptMessageDiscount = _discount}
            -> mconcat
                [ "Gain skill "
                , toMessage (roundNum _skill)
                , " advisor"
                , toMessage (advisorDiscountText _discount)
                ]
        MsgGainAdvisorLoc {scriptMessageWhere = _where, scriptMessageSkill = _skill, scriptMessageDiscount = _discount}
            -> mconcat
                [ "Gain skill "
                , toMessage (roundNum _skill)
                , " advisor in "
                , _where
                , toMessage (advisorDiscountText _discount)
                ]
        MsgGainAdvisorName {scriptMessageName = _name, scriptMessageSkill = _skill, scriptMessageDiscount = _discount}
            -> mconcat
                [ "Gain skill "
                , toMessage (roundNum _skill)
                , " advisor named "
                , _name
                , toMessage (advisorDiscountText _discount)
                ]
        MsgGainAdvisorNameLoc {scriptMessageName = _name, scriptMessageWhere = _where, scriptMessageSkill = _skill, scriptMessageDiscount = _discount}
            -> mconcat
                [ "Gain skill "
                , toMessage (roundNum _skill)
                , " advisor named "
                , _name
                , " in "
                , _where
                , toMessage (advisorDiscountText _discount)
                ]
        MsgGainAdvisorType {scriptMessageAdvtype = _advtype, scriptMessageSkill = _skill, scriptMessageDiscount = _discount}
            -> mconcat
                [ "Gain skill "
                , toMessage (roundNum _skill)
                , " "
                , _advtype
                , " advisor"
                , toMessage (advisorDiscountText _discount)
                ]
        MsgGainAdvisorTypeLoc {scriptMessageAdvtype = _advtype, scriptMessageWhere = _where, scriptMessageSkill = _skill, scriptMessageDiscount = _discount}
            -> mconcat
                [ "Gain skill "
                , toMessage (roundNum _skill)
                , " "
                , _advtype
                , " advisor in "
                , _where
                , toMessage (advisorDiscountText _discount)
                ]
        MsgGainAdvisorTypeName {scriptMessageAdvtype = _advtype, scriptMessageName = _name, scriptMessageSkill = _skill, scriptMessageDiscount = _discount}
            -> mconcat
                [ "Gain skill "
                , toMessage (roundNum _skill)
                , " "
                , _advtype
                , " advisor named "
                , _name
                , toMessage (advisorDiscountText _discount)
                ]
        MsgGainAdvisorTypeNameLoc {scriptMessageAdvtype = _advtype, scriptMessageName = _name, scriptMessageWhere = _where, scriptMessageSkill = _skill, scriptMessageDiscount = _discount}
            -> mconcat
                [ "Gain skill "
                , toMessage (roundNum _skill)
                , " "
                , _advtype
                , " advisor named "
                , _name
                , " in "
                , _where
                , toMessage (advisorDiscountText _discount)
                ]
        MsgGainFemaleAdvisor {scriptMessageFemale = _female, scriptMessageSkill = _skill, scriptMessageDiscount = _discount}
            -> mconcat
                [ "Gain skill "
                , toMessage (roundNum _skill)
                , " "
                , toMessage (ifThenElseT _female "female" "male")
                , " advisor"
                , toMessage (advisorDiscountText _discount)
                ]
        MsgGainFemaleAdvisorLoc {scriptMessageFemale = _female, scriptMessageWhere = _where, scriptMessageSkill = _skill, scriptMessageDiscount = _discount}
            -> mconcat
                [ "Gain skill "
                , toMessage (roundNum _skill)
                , " "
                , toMessage (ifThenElseT _female "female" "male")
                , " advisor in "
                , _where
                , toMessage (advisorDiscountText _discount)
                ]
        MsgGainFemaleAdvisorName {scriptMessageFemale = _female, scriptMessageName = _name, scriptMessageSkill = _skill, scriptMessageDiscount = _discount}
            -> mconcat
                [ "Gain skill "
                , toMessage (roundNum _skill)
                , " "
                , toMessage (ifThenElseT _female "female" "male")
                , " advisor named "
                , _name
                , toMessage (advisorDiscountText _discount)
                ]
        MsgGainFemaleAdvisorNameLoc {scriptMessageFemale = _female, scriptMessageName = _name, scriptMessageWhere = _where, scriptMessageSkill = _skill, scriptMessageDiscount = _discount}
            -> mconcat
                [ "Gain skill "
                , toMessage (roundNum _skill)
                , " "
                , toMessage (ifThenElseT _female "female" "male")
                , " advisor named "
                , _name
                , " in "
                , _where
                , toMessage (advisorDiscountText _discount)
                ]
        MsgGainFemaleAdvisorType {scriptMessageFemale = _female, scriptMessageAdvtype = _advtype, scriptMessageSkill = _skill, scriptMessageDiscount = _discount}
            -> mconcat
                [ "Gain skill "
                , toMessage (roundNum _skill)
                , " "
                , toMessage (ifThenElseT _female "female" "male")
                , " "
                , _advtype
                , " advisor"
                , toMessage (advisorDiscountText _discount)
                ]
        MsgGainFemaleAdvisorTypeLoc {scriptMessageFemale = _female, scriptMessageAdvtype = _advtype, scriptMessageWhere = _where, scriptMessageSkill = _skill, scriptMessageDiscount = _discount}
            -> mconcat
                [ "Gain skill "
                , toMessage (roundNum _skill)
                , " "
                , toMessage (ifThenElseT _female "female" "male")
                , " "
                , _advtype
                , " advisor in "
                , _where
                , toMessage (advisorDiscountText _discount)
                ]
        MsgGainFemaleAdvisorTypeName {scriptMessageFemale = _female, scriptMessageAdvtype = _advtype, scriptMessageName = _name, scriptMessageSkill = _skill, scriptMessageDiscount = _discount}
            -> mconcat
                [ "Gain skill "
                , toMessage (roundNum _skill)
                , " "
                , toMessage (ifThenElseT _female "female" "male")
                , " "
                , _advtype
                , " advisor named "
                , _name
                , toMessage (advisorDiscountText _discount)
                ]
        MsgGainFemaleAdvisorTypeNameLoc {scriptMessageFemale = _female, scriptMessageAdvtype = _advtype, scriptMessageName = _name, scriptMessageWhere = _where, scriptMessageSkill = _skill, scriptMessageDiscount = _discount}
            -> mconcat
                [ "Gain skill "
                , toMessage (roundNum _skill)
                , " "
                , toMessage (ifThenElseT _female "female" "male")
                , " "
                , _advtype
                , " advisor named "
                , _name
                , " in "
                , _where
                , toMessage (advisorDiscountText _discount)
                ]
        MsgGainScaledAdvisor {scriptMessageAdvtype = _advtype, scriptMessageDiscount = _discount}
            -> mconcat
                [ "Gain a "
                , _advtype
                , " with skill level scaled to monthly income"
                , toMessage (advisorDiscountText _discount)
                ]
        MsgRebelLeaderRuler
            -> "The leader of the rebels becomes the country's new ruler"
        MsgNewRuler {scriptMessageRegent = _regent}
            -> mconcat
                [ "A new "
                , toMessage (ifThenElseT _regent "regent" "ruler")
                , " comes to power"
                ]
        MsgNewRulerLeader {scriptMessageRegent = _regent, scriptMessageName = _name}
            -> mconcat
                [ "The leader "
                , _name
                , " becomes "
                , toMessage (ifThenElseT _regent "regent" "ruler")
                ]
        MsgNewRulerAttribs {scriptMessageRegent = _regent}
            -> mconcat
                [ "A new "
                , toMessage (ifThenElseT _regent "regent" "ruler")
                , " comes to power with the following attributes:"
                ]
        MsgNewRulerLeaderAttribs {scriptMessageRegent = _regent, scriptMessageName = _name}
            -> mconcat
                [ "The leader "
                , _name
                , " becomes "
                , toMessage (ifThenElseT _regent "regent" "ruler")
                , " with the following attributes:"
                ]
        MsgLeaderRuler {scriptMessageRegent = _regent, scriptMessageName = _name}
            -> mconcat
                [ "The leader "
                , _name
                , " comes to power as "
                , toMessage (ifThenElseT _regent "regent" "ruler")
                ]
        MsgNamed {scriptMessageName = _name}
            -> mconcat
                [ "Named "
                , toMessage $ quotes _name
                ]
        MsgNewDynMemberDynasty {scriptMessageName = _name}
            -> mconcat
                [ "Of the "
                , _name
                , " dynasty"
                ]
        MsgNewDynMemberDynastyAs {scriptMessageName = _name}
            -> mconcat
                [ "Of the same dynasty as "
                , _name
                ]
        MsgNewDynMemberOriginalDynasty
            -> "Of the country's original dynasty"
        MsgNewDynMemberHistoricDynasty
            -> "Of one of the country's historic dynasties"
        MsgNewDynMemberAge {scriptMessageAmt = _amt}
            -> mconcat
                [ "Aged "
                , toMessage (roundNum _amt)
                , " years"
                ]
        MsgNewDynMemberAdm {scriptMessageFixed = _fixed, scriptMessageAmt = _amt}
            -> mconcat
                [ toMessage (ifThenElseT _fixed "Fixed " "")
                , "{{icon|adm}} "
                , toMessage ((if _fixed then roundNum else plainNumSign) _amt)
                , " administrative skill"
                ]
        MsgNewDynMemberDip {scriptMessageFixed = _fixed, scriptMessageAmt = _amt}
            -> mconcat
                [ toMessage (ifThenElseT _fixed "Fixed " "")
                , "{{icon|dip}} "
                , toMessage ((if _fixed then roundNum else plainNumSign) _amt)
                , " diplomatic skill"
                ]
        MsgNewDynMemberMil {scriptMessageFixed = _fixed, scriptMessageAmt = _amt}
            -> mconcat
                [ toMessage (ifThenElseT _fixed "Fixed " "")
                , "{{icon|mil}} "
                , toMessage ((if _fixed then roundNum else plainNumSign) _amt)
                , " military skill"
                ]
        MsgNewDynMemberMaxAdm {scriptMessageAmt = _amt}
            -> mconcat
                [ "At most {{icon|adm}} "
                , toMessage (roundNum _amt)
                , " administrative skill"
                ]
        MsgNewDynMemberMaxDip {scriptMessageAmt = _amt}
            -> mconcat
                [ "At most {{icon|dip}} "
                , toMessage (roundNum _amt)
                , " diplomatic skill"
                ]
        MsgNewDynMemberMaxMil {scriptMessageAmt = _amt}
            -> mconcat
                [ "At most {{icon|mil}} "
                , toMessage (roundNum _amt)
                , " military skill"
                ]
        MsgNewDynMemberClaim {scriptMessageAmt = _amt}
            -> mconcat
                [ "{{icon|legitimacy}} [[heir claim|Claim strength]] "
                , toMessage (roundNum _amt)
                ]
        MsgNewDynMemberCulture {scriptMessageText = _text}
            -> mconcat
                [ "Of {{icon|culture|28px}} "
                , toMessage _text
                , " culture"
                ]
        MsgNewDynMemberCultureAs {scriptMessageText = _text}
            -> mconcat
                [ "Of the same {{icon|culture|28px}} culture as "
                , toMessage _text
                ]
        MsgNewDynMemberReligion {scriptMessageIcon = _icon, scriptMessageText = _text}
            -> mconcat
                [ "Following the "
                , toMessage _icon
                , " "
                , toMessage _text
                , " religion"
                ]
        MsgNewDynMemberReligionAs {scriptMessageText = _text}
            -> mconcat
                [ "Following the same religion as "
                , toMessage _text
                ]
        MsgNewDynMemberHiddenSkills
            -> "With skills hidden"
        MsgNewDynMemberRandomGender
            -> "With random gender"
        MsgWithGender {scriptMessageMale = _male}
            -> mconcat
               [ "Is "
               , toMessage $ ifThenElseT _male "male" "female"
               ]
        MsgNewDynMemberMinAge {scriptMessageAge = _age}
            -> mconcat
                [ "At least "
                , toMessage (roundNum _age)
                , " years old"
                ]
        MsgNewDynMemberMaxAge {scriptMessageAge = _age}
            -> mconcat
                [ "At most "
                , toMessage (roundNum _age)
                , " years old"
                ]
        MsgNewDynMemberBirthdate {scriptMessageDate = _date}
            -> mconcat
                [ "With birth date "
                , _date
                ]
        MsgNewDynMemberBlockDisinherit
            -> "Can ''not'' be disinherited"
        MsgNewDynMemberBastard
            -> "Not a child of the consort"
        MsgNewDynMemberCountry {scriptMessageWhere = _where}
            -> mconcat
                [ "From "
                , _where
                ]
        MsgNewDynMemberForceRepublicanNames
            -> "Using a republican name"
        MsgEstateHasInfluenceModifier {scriptMessageIcon = _icon, scriptMessageEstate = _estate, scriptMessageModifier = _modifier}
            -> mconcat
                [ _icon
                , " "
                , _estate
                , " estate has influence modifier "
                , toMessage (iquotes _modifier)
                ]
        MsgEstateHasLoyaltyModifier {scriptMessageIcon = _icon, scriptMessageEstate = _estate, scriptMessageModifier = _modifier}
            -> mconcat
                [ _icon
                , " "
                , _estate
                , " estate has loyalty modifier "
                , toMessage (iquotes _modifier)
                ]
        MsgTriggerSwitch
            -> "The first of the following that is true:"
        MsgTriggerSwitchClause {scriptMessageCond = _cond}
            -> mconcat
                [ "If "
                , _cond
                , ":"
                ]
        MsgProvinceHasRebels {scriptMessageIcon = _icon, scriptMessageRtype = _rtype}
            -> mconcat
                [ "Province's most likely rebel type is "
                , _icon
                , " "
                , _rtype
                ]
        MsgRebelsFriendlyTo {scriptMessageFriend = _friend}
            -> mconcat
                [ "friendly to "
                , _friend
                ]
        MsgRebelsLedBy {scriptMessageLeader = _leader}
            -> mconcat
                [ "led by "
                , _leader
                ]
        MsgRebelsGainProgress {scriptMessageAmt = _amt}
            -> mconcat
                [ "gaining "
                , toMessage (roundNum _amt)
                , " progress towards their next uprising"
                ]
        MsgSpawnRebels {scriptMessageRtype = _rtype, scriptMessageSize = _size, scriptMessageFriend = _friend, scriptMessageLeader = _leader, scriptMessageWin = _win, scriptMessageProgress = _progress}
            -> mconcat
                [ _rtype
                , " (size "
                , toMessage (roundNum _size)
                , ")"
                , _friend
                , " rise in revolt"
                , _leader
                , toMessage (ifThenElseT _win " and occupy the province" "")
                , _progress
                ]
        MsgRebelsHaveRisen {scriptMessageIcon = _icon, scriptMessageRtype = _rtype}
            -> mconcat
                [ _icon
                , " "
                , _rtype
                , " have risen in revolt"
                ]
        MsgAddCoreOf {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " gains a core on this state"
                ]
        MsgGainCoreOnProvince {scriptMessageProv = _prov}
            -> mconcat
                [ "Gain core on "
                , _prov
                ]
        MsgHasDLC {scriptMessageIcon = _icon, scriptMessageDlc = _dlc}
            -> mconcat
                [ "DLC "
                , _icon
                , " "
                , _dlc
                , " is active"
                ]
        MsgHasEquipment {scriptMessageCompare = _comp, scriptMessageAmt = _amt, scriptMessageWhat = _what}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (plainNum _amt)
                , " "
                , _what
                ]
        MsgTechGroup {scriptMessageIcon = _icon, scriptMessageName = _name}
            -> mconcat
                [ "Technology group is "
                , _icon
                , " "
                , _name
                ]
        MsgUnlockCult {scriptMessageIcon = _icon, scriptMessageName = _name}
            -> mconcat
                [ "Unlock the "
                , _icon
                , " "
                , _name
                , " cult"
                ]
        MsgNumOfReligion {scriptMessageIcon = _icon, scriptMessageName = _name, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (roundNum _amt)
                , " "
                , plural (round _amt) "province" "provinces"
                , " of "
                , _icon
                , " "
                , _name
                , " religion"
                ]
        MsgSetReligiousSchool {scriptSchoolIcon = _icon, scriptSchoolName = _name, scriptGroupName = _group}
            -> mconcat
                [ "The country begins following the "
                , toMessage _group
                , " "
                , toMessage _icon
                , " "
                , toMessage _name
                , " religious school"
                ]
        MsgReligiousSchool {scriptSchoolIcon = _icon, scriptSchoolName = _name, scriptGroupName = _group}
            -> mconcat
                [ "Has the "
                , toMessage _group
                , " "
                , toMessage _icon
                , " "
                , toMessage _name
                , " religious school"
                ]
        MsgIsStrongestTradePower {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " is the strongest trade power in this node"
                ]
        MsgAreaIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Is in "
                , _what
                , " area"
                ]
        MsgAreaIsAs {scriptMessageWhat = _what}
            -> mconcat
                [ "Is in the same area as "
                , _what
                ]
        MsgDominantReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "The country's dominant religion is "
                , _icon
                , " "
                , _what
                ]
        MsgDominantReligionAs {scriptMessageWhom = _whom}
            -> mconcat
                [ "The country's dominant religion is that of "
                , _whom
                ]
        MsgEnableReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Enable the "
                , _icon
                , " "
                , _what
                , " religion"
                ]
        MsgHREReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "The Holy Roman Empire's official religion is "
                , _icon
                , " "
                , _what
                ]
        MsgSetDemilitarizedZone {scriptMessageYn = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "demilitarized" "remilitarized")
                ]
        MsgSetHREReligionLocked {scriptMessageYn = _yn}
            -> mconcat
                [ "The Holy Roman Empire's religion "
                , toMessage (ifThenElseT _yn "becomes fixed" "is no longer fixed")
                ]
        MsgSetHREReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "The Holy Roman Empire's official religion becomes "
                , _icon
                , " "
                , _what
                ]
        MsgSetHREHereticReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "The "
                , _icon
                , " "
                , _what
                , " religion is considered heretical within the Holy Roman Empire"
                ]
        MsgSignWestphalia
            -> "From now on, the Emperor, Electors and Princes of the {{icon|hre}} Holy Roman Empire may be of any Christian religion without being considered heretics."
        MsgHRELeaguesEnabled {scriptMessageYn = _yn}
            -> mconcat
                [ "Leagues for the religion of the Holy Roman Empire "
                , toMessage (ifThenElseT _yn "have" "have ''not''")
                , " begun to form"
                ]
        MsgHREReligionLocked {scriptMessageYn = _yn}
            -> mconcat
                [ "The religion of the Holy Roman Empire "
                , toMessage (ifThenElseT _yn "is" "is ''not''")
                , " fixed"
                ]
        MsgHREWestphalia {scriptMessageYn = _yn}
            -> mconcat
                [ "The Peace of Westphalia "
                , toMessage (ifThenElseT _yn "has" "has ''not''")
                , " been signed"
                ]
        MsgIsElector {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " an Elector of the Holy Roman Empire"
                ]
        MsgNoHREReforms
            -> "No reforms have been passed in the Holy Roman Empire"
        MsgHREPassedReform {scriptMessageWhat = _what}
            -> mconcat
                [ "The imperial reform ''"
                , _what
                , "'' has been passed"
                ]
        MsgEnableHRELeagues
            -> "Leagues for the religion of the Holy Roman Empire begin to form."
        MsgIsInLeagueWar {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " involved in a religious league war"
                ]
        MsgIsLeagueEnemy {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is in the opposite religious league to "
                , _whom
                ]
        MsgIsLeagueFriend {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is in the same religious league as "
                , _whom
                ]
        MsgReligionYears {scriptMessageIcon = _icon, scriptMessageName = _name, scriptMessageYears = _years}
            -> mconcat
                [ "The "
                , _icon
                , " "
                , _name
                , " religion has existed for at least "
                , toMessage (plainNum _years)
                , " years"
                ]
        MsgHasIdea {scriptMessageWhat = _what, scriptMessageIcon = _icon, scriptMessageKey = _key, scriptMessageLoc = _loc}
            -> mconcat
                [ "Has the"
                , _what
                , " "
                , "[[File:"
                , _icon
                ,".png|28px]]"
                , " <!-- "
                , _key
                , " -->"
                , toMessage (iquotes _loc)
                ]
        MsgAddIdea {scriptMessageWhat = _what, scriptMessageIcon = _icon, scriptMessageKey = _key, scriptMessageLoc = _loc}
            -> mconcat
                [ "Gets the "
                , _what
                , " "
                , "[[File:"
                , _icon
                ,".png|28px]]"
                , " <!-- "
                , _key
                ,  " -->"
                , toMessage (iquotes _loc)
                ]
        MsgRemoveIdea {scriptMessageWhat = _what, scriptMessageIcon = _icon, scriptMessageKey = _key, scriptMessageLoc = _loc}
            -> mconcat
                [ "Remove the "
                , _what
                , " "
                , "[[File:"
                , _icon
                ,".png|28px]]"
                , " <!-- "
                , _key
                , " -->"
                , toMessage (iquotes _loc)
                ]
        MsgAddTimedIdea {scriptMessageWhat = _what, scriptMessageIcon = _icon, scriptMessageKey = _key, scriptMessageLoc = _loc, scriptMessageDays = _days}
            -> mconcat
                [ "Gets the "
                , _what
                , " "
                , "[[File:"
                , _icon
                ,".png|28px]]"
                , " <!-- "
                , _key
                ,  " -->"
                , toMessage (iquotes _loc)
                ," for "
                , toMessage (formatDays _days)
                ]
        MsgModifyTimedIdea {scriptMessageWhat = _what, scriptMessageIcon = _icon, scriptMessageKey = _key, scriptMessageLoc = _loc, scriptMessageDays = _days}
            -> mconcat
                [ "Extend the "
                , _what
                , " "
                , "[[File:"
                , _icon
                ,".png|28px]]"
                , " <!-- "
                , _key
                ,  " -->"
                , toMessage (iquotes _loc)
                ," by "
                , toMessage (formatDays _days)
                ]
        MsgModifyIdea { scriptMessageKey = _key, scriptMessageCategory2 = _cat2, scriptMessageIcon2 = _icon2, scriptMessageKey2 = _key2, scriptMessageLoc2 = _loc2}
            -> mconcat
                [ "Modify the "
                , "<!-- "
                , _key
                ,  " -->"
                , _cat2
                , " "
                , "[[File:"
                , _icon2
                ,".png|28px]]"
                , " <!-- "
                , _key2
                ,  " -->"
                , toMessage (iquotes _loc2)
                ]
        MsgReplaceIdea { scriptMessageCategory = _cat, scriptMessageIcon = _icon, scriptMessageKey = _key, scriptMessageLoc = _loc, scriptMessageCategory2 = _cat2, scriptMessageIcon2 = _icon2, scriptMessageKey2 = _key2, scriptMessageLoc2 = _loc2}
            -> mconcat
                [ "Replace the "
                , _cat
                , " "
                , "[[File:"
                , _icon
                ,".png|28px]]"
                , " <!-- "
                , _key
                ,  " -->"
                , toMessage (iquotes _loc)
                ," with the "
                , _cat2
                , " "
                , "[[File:"
                , _icon2
                ,".png|28px]]"
                , " <!-- "
                , _key2
                ,  " -->"
                , toMessage (iquotes _loc2)
                ]
        MsgEffectBox {scriptMessageLoc = _loc, scriptMessageKey = _key, scriptMessageIcon = _icon, scriptMessageDesc = _desc}
            -> mconcat
                [ "{{effectbox|"
                , _loc
                , " <!-- "
                , _key
                ,  " -->"
                , "|file="
                , _icon
                , "|"
                , _desc
                , "\n"
                , "|modifiers="
                ]
        MsgEffectBoxEnd
            -> "}}"
        MsgHasReform {scriptMessageWhat = _what}
            -> mconcat
                [ "Has enacted the "
                , toMessage (iquotes _what)
                , " government reform"
                ]
        MsgHasReformTier {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has enacted a tier "
                , toMessage (plainNum _amt)
                , " government reform"
                ]
        MsgReligionProvinces {scriptMessageIcon = _icon, scriptMessageName = _name, scriptMessageAmt = _amt}
            -> mconcat
                [ "Country has at least "
                , toMessage (roundNum _amt)
                , " "
                , plural (round _amt) "province" "provinces"
                , " following the "
                , _icon
                , " "
                , _name
                , " religion"
                ]
        MsgGoodsProvinces {scriptMessageIcon = _icon, scriptMessageName = _name, scriptMessageAmt = _amt}
            -> mconcat
                [ "Country has at least "
                , toMessage (roundNum _amt)
                , " "
                , plural (round _amt) "province" "provinces"
                , " producing "
                , _icon
                , " "
                , _name
                ]
        MsgHasAristocraticIdea {scriptMessageName = _name, scriptMessageNum = _num}
            -> mconcat
                [ "Has {{icon|aristocratic}} Aristocratic idea "
                , toMessage (show _num)
                , " "
                , toMessage (iquotes _name)
                ]
        MsgHasEconomicIdea {scriptMessageName = _name, scriptMessageNum = _num}
            -> mconcat
                [ "Has {{icon|economic}} Economic idea "
                , toMessage (show _num)
                , " "
                , toMessage (iquotes _name)
                ]
        MsgHasDefensiveIdea {scriptMessageName = _name, scriptMessageNum = _num}
            -> mconcat
                [ "Has {{icon|defensive}} Defensive idea "
                , toMessage (show _num)
                , " "
                , toMessage (iquotes _name)
                ]
        MsgHasInnovativeIdea {scriptMessageName = _name, scriptMessageNum = _num}
            -> mconcat
                [ "Has {{icon|innovative}} Innovative idea "
                , toMessage (show _num)
                , " "
                , toMessage (iquotes _name)
                ]
        MsgHasOffensiveIdea {scriptMessageName = _name, scriptMessageNum = _num}
            -> mconcat
                [ "Has {{icon|offensive}} Offensive idea "
                , toMessage (show _num)
                , " "
                , toMessage (iquotes _name)
                ]
        MsgHasMaritimeIdea {scriptMessageName = _name, scriptMessageNum = _num}
            -> mconcat
                [ "Has {{icon|maritime}} Maritime idea "
                , toMessage (show _num)
                , " "
                , toMessage (iquotes _name)
                ]
        MsgColonists {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , plural _amt " Colonist" " Colonists"
                ]
        MsgMayExplore
            -> "{{icon|may explore|28px}} Can recruit explorers and conquistadors. Explorers may explore ocean provinces."
        MsgGainColonialRange {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Colonial range"
                ]
        MsgSettlerChance {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Settler chance"
                ]
        MsgGlobalSettlers {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Global settler increase"
                ]
        MsgGlobalTariffs {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Global tariffs"
                ]
        MsgNavalForcelimitMod {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Naval forcelimit modifier"
                ]
        MsgGainOverseasCB
            -> "Gain permanent \"Overseas Expansion\" [[Casus Belli]] against countries with Indian, Sub-Saharan, Chinese or Nomad tech group. (Only usable if country's tech group is Western, Eastern or Anatolian.)"
        MsgGainPrimitivesCB
            -> "Gain permanent \"Colonial Conquest\" [[Casus Belli]] against all primitives."
        MsgNavyTradition {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Navy tradition is at least "
                , toMessage (plainNum _amt)
                ]
        MsgYearlyNavyTradition {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Yearly navy tradition"
                ]
        MsgHeavyShipCombatAbility {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Heavy ship combat ability"
                ]
        MsgLightShipCombatAbility {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Light ship combat ability"
                ]
        MsgGalleyCombatAbility {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Galley combat ability"
                ]
        MsgGlobalShipRepair {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Ship repair"
                ]
        MsgGlobalShipCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Ship cost"
                ]
        MsgRegimentCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Regiment cost"
                ]
        MsgBlockadeEfficiency {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Blockade efficiency"
                ]
        MsgGainSeaRepair
            -> "Ships repair while in coastal sea provinces."
        MsgPrimitives {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " primitive"
                ]
        MsgRulerIsForeigner {scriptMessageYn = _yn}
            -> mconcat
                [ "Ruler is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " foreign"
                ]
        MsgGlobalTaxModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " National tax modifier"
                ]
        MsgBuildCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Construction cost"
                ]
        MsgYearlyInflationReduction {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Yearly inflation reduction"
                ]
        MsgInterestPerAnnum {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign False _amt)
                , " Interest per annum"
                ]
        MsgGlobalAutonomy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign False _amt)
                , " Monthly autonomy change"
                ]
        MsgLandMaintenanceMod {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Land maintenance modifier"
                ]
        MsgNavalMaintenanceMod {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Naval maintenance modifier"
                ]
        MsgProdEff {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Production efficiency is at least "
                , toMessage (reducedNum (colourPcSign True) _amt)
                ]
        MsgProdEffAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ _icon
                , " Production efficiency is at least that of "
                , _whom
                ]
        MsgProdEffBonus {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Production efficiency"
                ]
        MsgDevelCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Development cost"
                ]
        MsgLocalDevelopmentCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Local development cost"
                ]
        MsgGainReligiousCB
            -> "{{icon|cb on religious enemies|28px}} Gain permanent \"Holy War\" and \"Purging of Heresy\" [[Casus Belli]] against heathens and heretics respectively."
        MsgMissionaries {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , plural _amt " Missionary" " Missionaries"
                ]
        MsgMissionaryMaintenanceCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Missionary maintenance cost"
                ]
        MsgStabilityCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Stability cost modifier"
                ]
        MsgMissionaryStrength {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Missionary strength"
                ]
        MsgToleranceHeathen {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Tolerance of heathens"
                ]
        MsgToleranceHeretic {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Tolerance of heretics"
                ]
        MsgToleranceTrue {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Tolerance of the true faith"
                ]
        MsgPapalInfluence {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Papal influence is at least "
                , toMessage (roundNum _amt)
                ]
        MsgYearlyPapalInfluence {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Yearly papal influence"
                ]
        MsgYearlyDevotion {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " {{DLC-only|Yearly devotion}}"
                ]
        MsgMonthlyFervor {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " {{DLC-only|Monthly fervor}}"
                ]
        MsgChurchPowerModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " {{DLC-only|Church power}}"
                ]
        MsgPrestige {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Prestige is at least "
                , toMessage (colourNumSign True _amt)
                ]
        MsgPrestigeAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ _icon
                , " Prestige is at least that of "
                , _whom
                ]
        MsgYearlyPrestige {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Yearly prestige"
                ]
        MsgMissionaryStrengthVsHeretics {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Missionary strength vs heretics"
                ]
        MsgCultureConvCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Culture conversion cost"
                ]
        MsgHasOpinion {scriptMessageAmtText = _amtT, scriptMessageWhom = _whom, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has opinion of "
                , _whom
                , " of "
                , _comp
                , " {{icon|opinion}} "
                , _amtT
                ]
        MsgReverseHasOpinion {scriptMessageAmt = _amt, scriptMessageWhom = _whom}
            -> mconcat
                [ _whom
                , " has at least {{icon|opinion}} "
                , toMessage (colourNumSign True _amt)
                , " opinion towards this country"
                ]
        MsgNormalOrHistoricalNations {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Playing" "''Not'' playing")
                , " with normal or historical nations"
                ]
        MsgIsCustomNation {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " playing a custom nation"
                ]
        MsgReligionEnabled {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "The "
                , _icon
                , " "
                , _what
                , " religion is enabled"
                ]
        MsgCapitalIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Capital is "
                , _what
                ]
        MsgFullIdeaGroup {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has completed "
                , _icon
                , " "
                , _what
                ]
        MsgTradeIncomePercentage {scriptMessageAmt = _amt}
            -> mconcat
                [ "Trade accounts for at least "
                , toMessage (reducedNum plainPc _amt)
                , " of national income"
                ]
        MsgReligiousUnity {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " <!-- idea: "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " --> Religious unity is at least "
                , toMessage (reducedNum (colourPc True) _amt)
                ]
        MsgReligiousUnityBonus {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Religious unity"
                ]
        MsgHasADM {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " administrative power"
                ]
        MsgHasDIP {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " diplomatic power"
                ]
        MsgHasMIL {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " military power"
                ]
        MsgSetRule {scriptMessageAmt = _amt}
            -> mconcat
                ["Set the "
                , plural _amt "rule:" "rules:"
                ]
        MsgSetRuleYes {scriptMessageWhat = _what}
            -> mconcat
                [ "{{icon|yes}} "
                , _what
                ]
        MsgSetRuleNo {scriptMessageWhat = _what}
            -> mconcat
                [ "{{icon|no}} "
                , _what
                ]
        MsgAddDoctrineCostReduction {scriptMessageAmt = _amt, scriptMessageAmt2 = _amt2, scriptMessageWhat = _what }
            -> mconcat
                [ "Gain "
                , toMessage (colourNum True _amt)
                , plural _amt " use" " uses"
                , " of "
                , toMessage (reducedNum (colourPcSign True) _amt2)
                , _what
                , "doctrine cost reduction for:"
                ]
        MsgFreeBuildingSlots {scriptMessageCompare = _comp, scriptMessageAmt = _amt, scriptMessageWhat = _what, scriptMessageYn = _yn }
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNum _amt))
                , " free {{icon|building slot|}} "
                , plural _amt "building slot" "building slots"
                , " for {{icon|"
                , _what
                , "|1}} "
                , toMessage (ifThenElseT _yn "including locked slots" "")
                ]
        MsgRankDuchy
            -> "Government rank is at least {{icon|duchy}} Duchy"
        MsgRankKingdom
            -> "Government rank is {{icon|kingdom}}Kingdom or {{icon|empire}} Empire<!-- not {{icon|duchy}} Duchy -->"
        MsgRankEmpire
            -> "Government rank is {{icon|empire}} Empire<!-- not {{icon|duchy}} Duchy or {{icon|kingdom}} Kingdom -->"
        MsgSetRankDuchy
            -> "Set government rank to {{icon|duchy}} Duchy"
        MsgSetRankKingdom
            -> "Set government rank to {{icon|kingdom}} Kingdom"
        MsgSetRankEmpire
            -> "Set government rank to {{icon|empire}} Empire"
        MsgOverextension {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Overextension is at least "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgRandomNewWorld {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " playing with a Random New World"
                ]
        MsgIsColonialNation {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a colonial nation"
                ]
        MsgIsFormerColonialNation {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a former colonial nation"
                ]
        MsgIsFreeOrTributaryTrigger {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''neither''")
                , " independent "
                , toMessage (ifThenElseT _yn "or" "''nor''")
                , " a tributary"
                ]
        MsgIsNomad {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a steppe horde"
                ]
        MsgReligionReformed {scriptMessageYn = _yn}
            -> mconcat
                [ "The country's religion has"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " been reformed"
                ]
        MsgChangeTagFrom {scriptMessageWho = _who}
            -> mconcat
                [ "Country becomes "
                , _who
                ]
        MsgSetInEmpire {scriptMessageYn = _yn}
            -> mconcat
                [ "Province "
                , toMessage (ifThenElseT _yn "joins" "leaves")
                , " the Holy Roman Empire"
                ]
        MsgHasSecondaryReligion {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " a secondary religion"
                ]
        MsgSecondaryReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Secondary religion is "
                , _icon
                , " "
                , _what
                ]
        MsgIsDefenderOfFaith {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " Defender of the Faith"
                ]
        MsgLegitimacyOrHordeUnity {scriptMessageAmt = _amt}
            -> mconcat
                [ "{{icon|legitimacy}} Legitimacy or {{icon|horde unity}} Horde unity is at least "
                , toMessage (roundNum _amt)
                ]
        MsgCheckVariable {scriptMessageIcon = __icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Value of variable "
                , _what
                , " is at least "
                , toMessage (plainNum _amt)
                ]
        MsgChangeTechGroup {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Change technology group to "
                , _icon
                , " "
                , _what
                ]
        MsgChangeUnitType {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Change units to "
                , _icon
                , " "
                , _what
                ]
        MsgNoBaseWeight
            -> "(no base weight?)"
        MsgAIBaseWeight {scriptMessageAmt = _amt}
            -> mconcat
                [ "Base weight: "
                , toMessage (plainNum _amt)
                ]
        MsgAIFactorOneline {scriptMessageFactor = _factor, scriptMessageMultiplier = _multiplier}
            -> mconcat
                [ "Base weight * "
                , toMessage (bold (plainNum _multiplier))
                , " if the following is true: "
                ,_factor
                ]
        MsgAIAddOneline {scriptMessageFactor = _factor, scriptMessageMultiplier = _multiplier}
            -> mconcat
                [ "Base weight "
                , toMessage (bold (plainNumSign _multiplier))
                , " if the following is true: "
                ,_factor
                ]
        MsgAIFactorHeader {scriptMessageMultiplier = _multiplier}
            -> mconcat
                [ "* Base weight * "
                , toMessage (bold (plainNum _multiplier))
                , " if the following are true:"
                ]
        MsgAIAddHeader {scriptMessageMultiplier = _multiplier}
            -> mconcat
                [ "* Base weight "
                , toMessage (bold (plainNumSign _multiplier))
                , " if the following are true:"
                ]
        MsgLucky {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a lucky nation"
                ]
        MsgAirExperience {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " "
                , _icon
                , " "
                , _what
                ]
        MsgArmyExperience {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " "
                , _icon
                , " "
                , _what
                ]
        MsgNavyExperience {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " "
                , _icon
                , " "
                , _what
                ]
        MsgHasAdvisorLevel {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageLevel = _level}
            -> mconcat
                [ "Has a level "
                , toMessage (roundNum _level)
                , " "
                , _icon
                , " "
                , _what
                , " advisor"
                ]
        MsgNumRoyalMarriages {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " royal "
                , plural _amt "marriage" "marriages"
                ]
        MsgIsBankrupt {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " bankrupt"
                ]
        MsgNumColonialSubjects {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (roundNum _amt)
                , " colonial "
                , plural _amt "subject" "subjects"
                ]
        MsgTradeEfficiency {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Trade efficiency is at least "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgTradeEfficiencyBonus {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Trade efficiency"
                ]
        MsgHasWarTaxes {scriptMessageYn = _yn}
            -> mconcat
                [ "Has"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " raised war taxes"
                ]
        MsgRevoltPercentage {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (roundPc _amt)
                , " of provinces are in revolt"
                ]
        MsgResetProvinceName {scriptMessageAmt = _amt}
            -> mconcat
                [ "Reset the name of the province ("
                , toMessage (plainNum _amt)
                , ")"
                ]
        MsgHasAnyDisaster {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " an ongoing disaster"
                ]
        MsgHasActivePolicy {scriptMessageWhat = _what}
            -> mconcat
                [ "Has enacted the policy "
                , toMessage (iquotes _what)
                ]
        MsgHasCompletedFocus {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageLoc = _loc}
            -> mconcat
                [ "Has completed national focus "
                , "[[File:"
                , _icon
                , ".png|28px]]"
                , " <!-- "
                , _what
                , " -->"
                , toMessage (iquotes _loc)
                ]
        MsgCompleteNationalFocus {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageLoc = _loc}
            -> mconcat
                [ "Complete national focus "
                , "[[File:"
                , _icon
                , ".png|28px]]"
                , " <!-- "
                , _what
                , " -->"
                , toMessage (iquotes _loc)
                ]
        MsgFocus {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageLoc = _loc}
            -> mconcat
                [ "[[File:"
                , _icon
                , ".png|x36px|link=#"
                , _loc
                , "]]"
                , " <!-- "
                , _what
                , " -->"
                , toMessage (iquotes _loc)
                ]
        MsgFocusProgress {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageLoc = _loc, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has progressed national focus "
                , "[[File:"
                , _icon
                , ".png|28px]]"
                , " <!-- "
                , _what
                , " -->"
                , toMessage (bold (iquotes _loc))
                , " "
                , _comp
                ]
        MsgHasArmySize {scriptMessageCompare = _comp, scriptMessageAmt = _amt, scriptMessageWhat = _what}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNum _amt))
                , _what
                , plural _amt "division" "divisions"
                ]
        MsgHasDucats {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " ducats"
                ]
        MsgHasParliament {scriptMessageYn = _yn}
            -> mconcat
                [ "The country "
                , toMessage (ifThenElseT _yn "has" "does ''not'' have")
                , " a parliament"
                ]
        MsgHasReligiousSchool {scriptMessageYn = _yn}
            -> mconcat
                [ "The country "
                , toMessage (ifThenElseT _yn "has" "does ''not'' have")
                , " a Religious School"
                ]
        MsgHasTruce {scriptMessageYn = _yn}
            -> mconcat
                [ "The country "
                , toMessage (ifThenElseT _yn "has" "does ''not'' have")
                , " a truce with another country"
                ]
        MsgNumRebelControlledProvinces {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (plainNum _amt)
                , " "
                , plural _amt "province is" "provinces are"
                , " controlled by rebels"
                ]
        MsgFortLevel {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Fort level is at least "
                , toMessage (roundNum _amt)
                ]
        MsgHasTradeModifier {scriptMessageIcon = __icon, scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ _who
                , " has trade modifier "
                , toMessage (iquotes _what)
                ]
        MsgIsMonth {scriptMessageWhat = _what}
            -> mconcat
                [ "Month is at least "
                , _what
                ]
        MsgIsSea {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " sea"
                ]
        MsgHeavyShip {scriptMessageWhom = _whom}
            -> mconcat
                [ "Create a {{icon|heavy ship}} heavy ship belonging to "
                , _whom
                ]
        MsgLightShip {scriptMessageWhom = _whom}
            -> mconcat
                [ "Create a {{icon|light ship}} light ship belonging to "
                , _whom
                ]
        MsgGalley {scriptMessageWhom = _whom}
            -> mconcat
                [ "Create a {{icon|galley}} galley belonging to "
                , _whom
                ]
        MsgGiveGuarantee {scriptMessageWhom = _whom}
            -> mconcat
                [ "Grants guarantee of independence for "
                , _whom
                ]
        MsgGiveMilitaryAccess {scriptMessageWhom = _whom}
            -> mconcat
                [ "Give military access to "
                , _whom
                ]
        MsgHasMerchant {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " has a merchant present"
                ]
        MsgNumColonies {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "colony" "colonies"
                ]
        MsgChangeCulture {scriptMessageWhat = _what}
            -> mconcat
                [ "Change culture to "
                , _what
                ]
        MsgChangeSameCulture {scriptMessageWhom = _whom}
            -> mconcat
                [ "Change culture to that of "
                , _whom
                ]
        MsgNavalForcelimit {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Naval forcelimit is at least "
                , toMessage (plainNum _amt)
                ]
        MsgBlockade {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Is at least "
                , _icon
                , " "
                , toMessage (plainPc _amt)
                , " blockaded"
                ]
        MsgCreateAlliance {scriptMessageWhom = _whom}
            -> mconcat
                [ "Create alliance with "
                , _whom
                ]
        MsgAddLocalUnrest {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum False _amt)
                , " unrest"
                ]
        MsgGoldIncomePercentage {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (reducedNum plainPc _amt)
                , " of the country's income is from "
                , _icon
                , " Gold"
                ]
        MsgIsTribal {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " tribal"
                ]
        MsgSetCapital {scriptMessageWhat = _what}
            -> mconcat
                [ "Change capital to "
                , _what
                ]
        MsgTransferState {scriptMessageWhat = _what}
            -> mconcat
                [ "Becomes owner and controller of "
                , _what
                ]
        MsgChangePrimaryCulture {scriptMessageWhat = _what}
            -> mconcat
                [ "Change primary culture to "
                , _what
                ]
        MsgColonialRegion {scriptMessageWhere = _where}
            -> mconcat
                [ "Is in colonial region "
                , _where
                ]
        MsgJuniorUnionWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is the junior partner in a personal union with "
                , _whom
                ]
        MsgSeniorUnionWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is the senior partner in a personal union with "
                , _whom
                ]
        MsgVassalOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is a vassal of "
                , _whom
                ]
        MsgOverlordOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is the overlord of "
                , _whom
                ]
        MsgSetStateName {scriptMessageWhat = _what}
            -> mconcat
                [ "Rename state to "
                , _what
                ]
        MsgSetStateCategory {scriptMessageWhat = _what}
            -> mconcat
                [ "Set state category to "
                , _what
                ]
        MsgRenameCapital {scriptMessageWhat = _what}
            -> mconcat
                [ "Rename provincial capital to "
                , _what
                ]
        MsgOwnsOrVassal {scriptMessageWhere = _where}
            -> mconcat
                [ "Owns "
                , _where
                , " or is overlord of its owner"
                ]
        MsgIsInColonialRange {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is within colonial range of "
                , _whom
                ]
        MsgConstructingGreatProject {scriptMessageWhat = _what}
            -> mconcat
                [ "Is constructing the "
                , _what
                ]
        MsgConstructing {scriptMessageWhat = _what}
            -> mconcat
                [ "Is constructing a "
                , _what
                ]
        MsgStartConstructingGreatProject {scriptMessageWhat = _what}
            -> mconcat
                [ "Begin constructing the "
                , _what
                ]
        MsgCancelConstruction
            -> "Cancel construction"
        MsgYearsOfIncome {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Treasury contains at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " "
                , plural _amt "year's" "years'"
                , " worth of income"
                ]
        MsgLibertyDesire {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Liberty desire is at least "
                , toMessage (colourPc False _amt)
                ]
        MsgLibertyDesireModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourPcSign False _amt)
                , " Liberty desire"
                ]
        MsgGainLibertyDesire {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourPc False _amt)
                , " liberty desire"
                ]
        MsgAlways {scriptMessageYn = _yn}
            -> toMessage (ifThenElseT _yn "{{icon|yes}} Always" "{{icon|no}} Never")
        MsgCapitalCultureDominant
            -> "The capital's {{icon|culture}} culture is dominant in the country"
        MsgNumUnions {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " personal "
                , plural _amt "union" "unions"
                ]
        MsgNumVassals {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "vassal" "vassals"
                ]
        MsgFreeVassal {scriptMessageWhom = _whom}
            -> mconcat
                [ "Release vassal "
                , _whom
                , " as an independent country"
                ]
        MsgHasMissionary {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " an active missionary"
                ]
        MsgNavyPercentage {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Navy is at least "
                , _icon
                , " "
                , toMessage (reducedNum plainPc _amt)
                , " of force limit"
                ]
        MsgWasForceConverted {scriptMessageYn = _yn}
            -> mconcat
                [ "Was"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " force converted"
                ]
        MsgFemaleEmperorAllowed {scriptMessageYn = _yn}
            -> mconcat
                [ "The Emperor may"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " be female"
                ]
        MsgImperialAuthority {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Imperial Authority is at least "
                , toMessage (roundNum _amt)
                ]
        MsgImperialMandate {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ " Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " mandate"
                ]
        MsgImperialMandateGrowth {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " {{DLC-only|Mandate growth modifier}}"
                ]
        MsgHasFemaleHeir {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " a female heir"
                ]
        MsgHasForeignHeir {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " a foreign heir"
                ]
        MsgPiety {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Piety is at least "
                , toMessage (reducedNum (colourNumSign True) _amt)
                ]
        MsgIsInTutorial {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " in the tutorial"
                ]
        MsgIsUnitLeader {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a unit leader"
                ]
        MsgGainFervor {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " fervor"
                ]
        MsgGainChurchPower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " church power"
                ]
        MsgIncomeFromVassals {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Income from vassals"
                ]
        MsgCostToFabricateClaims {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Cost to fabricate claims"
                ]
        MsgTimeToFabricateClaims {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Time to fabricate claims"
                ]
        MsgDiploAnnexCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Diplomatic annexation cost"
                ]
        MsgAEImpact {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Aggressive expansion impact"
                ]
        MsgDiploRep {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Diplomatic reputation"
                ]
        MsgEnvoyTravelTime {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Envoy travel time"
                ]
        MsgDiploRelations {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , plural _amt " Diplomatic relation" " Diplomatic relations"
                ]
        MsgVassalForcelimitContribution {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Vassal force limit contribution"
                ]
        MsgUnjustifiedDemands {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Unjustified demands"
                ]
        MsgInfantryCombatAbility {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Infantry combat ability"
                ]
        MsgCavalryCombatAbility {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Cavalry combat ability"
                ]
        MsgArtilleryCombatAbility {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Artillery combat ability"
                ]
        MsgShipDurability {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Ship durability"
                ]
        MsgMoraleOfArmies {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Morale of armies"
                ]
        MsgMoraleOfArmiesAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ _icon
                , " Morale of armies is at least that of "
                , _whom
                ]
        MsgMoraleOfNavies {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Morale of navies"
                ]
        MsgNavalAttrition {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Naval attrition"
                ]
        MsgDiscipline {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Discipline"
                ]
        MsgNationalManpowerMod {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " National manpower modifier"
                ]
        MsgManpowerRecoverySpeed {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Manpower recovery speed"
                ]
        MsgAvailableMercs {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Available mercenaries"
                ]
        MsgGarrisonSize {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Garrison size"
                ]
        MsgLandAttrition {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Land attrition"
                ]
        MsgLandForcelimitMod {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Land force limit modifier"
                ]
        MsgPrestigeDecay {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Prestige decay"
                ]
        MsgMercCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Mercenary cost"
                ]
        MsgTechCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Technology cost"
                ]
        MsgPossibleAdvisors {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , plural _amt " Possible advisor" " Possible advisors"
                ]
        MsgReduceInflationCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Reduce inflation cost"
                ]
        MsgLeadersWithoutUpkeep {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , plural _amt " Leader without upkeep" " Leaders without upkeep"
                ]
        MsgAdvisorCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Advisor cost"
                ]
        MsgCoreCreationCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Core-creation cost"
                ]
        MsgMercMaintenance {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Mercenary maintenance"
                ]
        MsgADMTechCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Administrative technology cost"
                ]
        MsgDIPTechCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Diplomatic technology cost"
                ]
        MsgGoodsProducedMod {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Goods produced modifier"
                ]
        MsgGainNavalLeaderFire {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Naval leader fire"
                ]
        MsgGainNavalLeaderShock {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Naval leader shock"
                ]
        MsgGainNavalLeaderManeuver {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Naval leader maneuver"
                ]
        MsgGainNavalLeaderSiege {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Naval leader siege"
                ]
        MsgPrestigeFromLand {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Prestige from land battles"
                ]
        MsgPrestigeFromNaval {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Prestige from naval battles"
                ]
        MsgDiplomats {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , plural _amt " Diplomat" " Diplomats"
                ]
        MsgWarExhaustionCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Cost of reducing war exhaustion"
                ]
        MsgImproveRelations {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Improve relations"
                ]
        MsgProvinceWarscoreCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Province warscore cost"
                ]
        MsgReducedStabImpacts
            -> "Lowered impact on stability from diplomatic actions"
        MsgNationalUnrest {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign False _amt)
                , " National unrest"
                ]
        MsgYearsOfSeparatism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign False _amt)
                , " Years of separatism"
                ]
        MsgAccCultureThreshold {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Accepted culture threshold"
                ]
        MsgBetterRelationsOverTime {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Better relations over time"
                ]
        MsgIdeaCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Idea cost"
                ]
        MsgMerchants {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , plural _amt " Merchant" " Merchants"
                ]
        MsgRecruitmentTime {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Recruitment time"
                ]
        MsgShipbuildingTime {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Shipbuilding time"
                ]
        MsgGlobalTradePower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Global trade power"
                ]
        MsgEmbargoEff {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Embargo efficiency"
                ]
        MsgPrivateerEff {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " {{DLC-only|Privateer efficiency}}"
                ]
        MsgGlobalSpyDefence {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Foreign spy detection"
                ]
        MsgMaySabotageReputation
            -> "{{icon|may sabotage reputation|28px}} May [[sabotage reputation]]"
        MsgSpyOffense {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Spy network construction"
                ]
        MsgCovertActionRelationImpact {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Covert action relation impact"
                ]
        MsgMayStudyTech
            -> "{{icon|may study technology|28px}} May [[study technology]]"
        MsgMaySowDiscontent
            -> "{{icon|may sow discontent|28px}} May [[sow discontent]]"
        MsgMayAgitateForLiberty
            -> "May [[agitate for liberty]]"
        MsgMayInfiltrateAdministration
            -> "{{icon|may infiltrate administration|28px}} May [[infiltrate administration]]"
        MsgRebelSupportEff {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Rebel support efficiency"
                ]
        MsgArmyTraditionDecay {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Yearly army tradition decay"
                ]
        MsgNavyTraditionDecay {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Yearly navy tradition decay"
                ]
        MsgInfantryCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Infantry cost"
                ]
        MsgCavalryCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Cavalry cost"
                ]
        MsgArtilleryCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Artillery cost"
                ]
        MsgMILTechCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Military technology cost"
                ]
        MsgHostileCoreCreation {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Hostile core-creation cost on us"
                ]
        MsgCaravanPower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " {{DLC-only|Caravan power}}"
                ]
        MsgGainLandLeaderFire {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Land leader fire"
                ]
        MsgGainLandLeaderShock {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Land leader shock"
                ]
        MsgGainLandLeaderManeuver {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Land leader maneuver"
                ]
        MsgGainLandLeaderSiege {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Land leader siege"
                ]
        MsgFortDefense {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Fort defense"
                ]
        MsgFortMaintenance {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Fort maintenance"
                ]
        MsgReinforceSpeed {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Reinforce speed"
                ]
        MsgAttritionForEnemies {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Attrition for enemies"
                ]
        MsgSiegeAbility {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Siege ability"
                ]
        MsgRecoverArmyMoraleSpeed {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Recover army morale speed"
                ]
        MsgTradeRange {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Trade range"
                ]
        MsgTradeSteering {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Trade steering"
                ]
        MsgTextIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Text is: ''"
                , _what
                , "''"
                ]
        MsgModifier {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (bold (plainNum _amt))
                ]
        MsgModifierSign {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (bold (plainNumSign _amt))
                ]
        MsgModifierColourPos {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (colourNumSign True _amt)
                ]
        MsgModifierColourNeg {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (colourNumSign False _amt)
                ]
        MsgModifierPc {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (bold (plainPc _amt))
                ]
        MsgModifierPcSign {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (bold (plainPcSign _amt))
                ]
        MsgModifierPcReduced {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgModifierPcReducedSign {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (reducedNum plainPcSign _amt)
                ]
        MsgModifierPcPos {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (colourPcSign True _amt)
                ]
        MsgModifierPcNeg {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (colourPcSign False _amt)
                ]
        MsgModifierPcPosReduced {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (reducedNum (colourPcSign True) _amt)
                ]
        MsgModifierPcNegReduced {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (reducedNum (colourPcSign False) _amt)
                ]
        MsgAnyOwnedPlanet
            -> "Any owned planet:"
        MsgAnyOwnedShip
            -> "Any owned ship:"
        MsgAnyPop
            -> "Any pop:"
        MsgEveryOwnedPlanet
            -> "Every owned planet:"
        MsgEveryOwnedPop
            -> "Every pop on owned planets:"
        MsgRandomOwnedShip
            -> "One random owned ship:"
        MsgRandomPop
            -> "One random pop:"
        MsgRandomSystem
            -> "One random system:"
        MsgRandomTile
            -> "One random tile:"
        MsgGainTrait {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Gain trait "
                , _icon
                , " "
                , _what
                ]
        MsgAbsolutism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Absolutism is at least "
                , toMessage (colourNum True _amt)
                ]
        MsgGainAbsolutism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " absolutism"
                ]
        MsgMaxAbsolutism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Maximum absolutism"
                ]
        MsgYearlyAbsolutism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Yearly absolutism"
                ]
        MsgCurrentAge {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "It is currently the "
                , _icon
                , " "
                , _what
                ]
        MsgAcceptedCulture {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ _icon
                , " "
                , _what
                , " is accepted culture"
                ]
        MsgCalcTrueIf {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (plainNum _amt)
                , " of the following are true:"
                ]
        MsgGainConstructionProgress {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " progress towards completing the great project"
                ]
        MsgGainHarmonizationProgress {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " progress towards harmonization"
                ]
        MsgGainHeirSupport {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " support for our heir"
                ]
        MsgGainYearsOfSeparatism {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum False _amt)
                , plural _amt " year" " years"
                , " of separatism"
                ]
        MsgAddResearchSlot {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , plural _amt " research slot" " research slots"
                ]
        MsgAddThreat {scriptMessageAmt = _amt}
            -> mconcat
                [ "{{icon|world tension|1}} is "
                , increasedOrDecreased _amt
                , " by "
                , toMessage (colourNum False _amt)
                ]
        MsgAuth {scriptMessageAmt = _amt}
            -> mconcat
                [ "Authority is at least "
                , toMessage (roundNum _amt)
                ]
        MsgGainColonyPopulation {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " population"
                ]
        MsgGainCorruption {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum False _amt)
                , " corruption"
                ]
        MsgGainDevastation {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum False _amt)
                , " devastation"
                ]
        MsgGainHarmony {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " harmony"
                ]
        MsgGainMilitarization {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " militarization"
                ]
        MsgGainProsperity {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " progress towards prosperity"
                ]
        MsgGainSplendor {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " splendor"
                ]
        MsgAddTariffValue {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourPc True _amt)
                , " tariffs"
                ]
        MsgGainYearlySailors {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , plural _amt " year's" " years'"
                , " worth of sailors"
                ]
        MsgAdminEfficiencyBonus {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Administrative efficiency"
                ]
        MsgAdminEfficiency {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Administrative efficiency is at least "
                , toMessage (plainPc _amt)
                ]
        MsgDisasterMod
            -> "disaster modifier"
        MsgAddClaimFor {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " gains a claim on this province"
                ]
        MsgAddClaimOn {scriptMessageWhere = _where}
            -> mconcat
                [ "Gain a claim on "
                , _where
                ]
        MsgAddAcceptedCulture {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ _icon
                , " Gain "
                , _what
                , " as an accepted culture"
                ]
        MsgAddBuilding {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Build "
                , _icon
                , " "
                , _what
                ]
        MsgAddHarmonizedReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Gain "
                , _icon
                , " "
                , _what
                , " as a harmonized religion"
                ]
        MsgAddHeirPersonality {scriptMessageAncestor = _ancestor, scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Heir gains the personality trait "
                , _icon
                , " "
                , _what
                , ancestorText _ancestor
                ]
        MsgAddConsortPersonality {scriptMessageAncestor = _ancestor, scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Consort gains the personality trait "
                , _icon
                , " "
                , _what
                , ancestorText _ancestor
                ]
        MsgAddRulerPersonality {scriptMessageAncestor = _ancestor, scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Ruler gains the personality trait "
                , _icon
                , " "
                , _what
                , ancestorText _ancestor
                ]
        MsgRemoveRulerPersonality {scriptMessageAncestor = _ancestor, scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Ruler loses the personality trait "
                , _icon
                , " "
                , _what
                , ancestorText _ancestor
                ]
        MsgRulerHasPersonality {scriptMessageAncestor = _ancestor, scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Ruler has the personality trait "
                , _icon
                , " "
                , _what
                , ancestorText _ancestor
                ]
        MsgHeirHasPersonality {scriptMessageAncestor = _ancestor, scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Heir has the personality trait "
                , _icon
                , " "
                , _what
                , ancestorText _ancestor
                ]
        MsgConsortHasPersonality { scriptMessageAncestor = _ancestor, scriptMessageIcon = _icon, scriptMessageWhat = _what }
            -> mconcat
                [ "Consort has the personality trait "
                , _icon
                , " "
                , _what
                , ancestorText _ancestor
                ]
        MsgAddCenterOfReformation {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Create a "
                , _icon
                , " "
                , _what
                , " Center of Reformation"
                ]
        MsgAddTruceWith {scriptMessageWho = _who}
            -> mconcat
                [ "Create a truce with "
                , _who
                ]
        MsgGainSailors {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " sailors"
                ]
        MsgGainSailorsFrac {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " sailors equal to "
                , toMessage (reducedNum (colourPc True) _amt)
                , " of maximum"
                ]
        MsgArmyProfessionalism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Army professionalism is at least "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgArmyProfessionalismAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ _icon
                , " Army professionalism is at least that of "
                , _whom
                ]
        MsgGainArmyProfessionalism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (reducedNum (colourPc True) _amt)
                , " {{DLC-only|army professionalism}}"
                ]
        MsgSailorsPercentage {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , "Sailors reserves are at least "
                , " "
                , toMessage (reducedNum (colourPc True) _amt)
                , " of maximum"
                ]
        MsgNationalSailorsMod {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPc True) _amt)
                , " National sailors modifier"
                ]
        MsgCorruption {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Corruption is at least "
                , toMessage (plainNum _amt)
                ]
        MsgAddIncidentVariableValue {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "The country moves towards the "
                , ifThenElse (_amt < 0) "Open" "Isolationist"
                , " end of the "
                , toMessage (quotes _what)
                , " incident by "
                , toMessage (plainNum (abs _amt))
                ]
        MsgIncidentVariableValue {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Isolationist value of the "
                , toMessage (quotes _what)
                , " incident is at least "
                , toMessage (plainNum (abs _amt))
                ]
        MsgAddInstitutionEmbracement {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourPc True _amt)
                , " progress towards the "
                , _icon
                , " "
                , _what
                , " institution"
                ]
        MsgAddIsolationism {scriptMessageAmt = _amt}
            -> mconcat
                [ "Become "
                , toMessage (plainNum _amt)
                , plural _amt " step" " steps"
                , " more "
                , ifThenElse (_amt < 0) "Open" "Isolationist"
                ]
        MsgGainMandate {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourPc True _amt)
                , " Mandate"
                ]
        MsgAddMandateEffect
            -> "{{add mandate effect}}"
        MsgAddMandateLargeEffect
            -> "{{add mandate effect|large=yes}}"
        MsgAddMeritocracyEffect
            -> "{{add meritocracy effect}}"
        MsgAddMeritocracyLargeEffect
            -> "{{add meritocracy effect|large=yes}}"
        MsgGainMeritocracy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " meritocracy"
                ]
        MsgMutualOpinion {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ "This country and "
                , _whom
                , " gain opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards each other"
                ]
        MsgMutualOpinionDur {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWhom = _whom, scriptMessageDays = _days}
            -> mconcat
                [ "This country and "
                , _whom
                , " gain opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards each other for "
                , toMessage (formatDays _days)
                ]
        MsgAddNamedThreat {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageWhom = _whom}
            -> mconcat
                [ "{{icon|world tension}} "
                , _icon
                , " is "
                , toMessage (increasedOrDecreased _amt)
                , " by "
                , toMessage (colourNumSign False _amt)
                , " ("
                , toMessage (italicText _whom)
                , ")"
                ]
        MsgAddTechBonus {scriptMessageAmt = _amt, scriptMessageName = _name, scriptMessageUses = _uses}
            -> mconcat
                [ "Gain "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " research bonus "
                , if T.null _name then "" else _name
                , "("
                , toMessage (colourNum True  _uses)
                , " "
                , plural _uses "use" "uses"
                , ") towards:"
                ]
        MsgAddTechBonusAhead {scriptMessageAmt = _amt, scriptMessageName = _name, scriptMessageUses = _uses}
            -> mconcat
                [ "Gain "
                , toMessage (colourNum True _amt)
                , plural _amt " year" " years"
                , " ahead of time penalty reduction "
                , if null  $ T.unpack _name then "" else toMessage (italicText _name)
                , "("
                , toMessage (colourNum True  _uses)
                , " "
                , plural _uses "use" "uses"
                , ") towards:"
                ]
        MsgAddTechBonusAheadBoth {scriptMessageBonus = _bonus, scriptMessageYearahead = _year, scriptMessageName = _name, scriptMessageUses = _uses}
            -> mconcat
                [ "Gain "
                , toMessage (reducedNum (colourPcSign True) _bonus)
                , " research bonus or "
                , toMessage (colourNum True _year)
                , plural _year " year" " years"
                , " ahead of time penalty reduction "
                , if T.null _name then "" else toMessage (italicText _name)
                , "("
                , toMessage (colourNum True  _uses)
                , " "
                , plural _uses "use" "uses"
                , ") towards:"
                ]
        MsgAddToWar {scriptMessageWho = _who, scriptMessageWhom = _whom, scriptMessageWhy = _why}
            -> mconcat
                [ "Joins "
                , _who
                , " in war against "
                , _whom
                ]
        MsgCreateEquipmentVariant {scriptMessageWhat = _what, scriptMessageWhat2 = _what2}
            -> mconcat
                [ "Create a "
                , toMessage (italicText _what)
                , " variant called "
                , toMessage (iquotes _what2)
                ]
        MsgCreateWG {scriptMessageWhat = _what, scriptMessageWhom = _whom, scriptMessageStates = _state}
            -> mconcat
                [ "Gets a "
                , toMessage (italicText _what)
                , " wargoal"
                , _state
                , " against "
                , _whom
                ]
        MsgCreateWGDuration {scriptMessageWhat = _what, scriptMessageWhom = _whom, scriptMessageAmt = _amt, scriptMessageStates = _state}
            -> mconcat
                [ "Gets a "
                , toMessage (italicText _what)
                , " wargoal "
                , _state
                , " against "
                , _whom
                , " for "
                , toMessage (plainNum _amt)
                , " days"
                ]
        MsgAddNextInstitutionEmbracement {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " progress towards the next non-present institution"
                ]
        MsgAddSpyNetworkFrom {scriptMessageIcon = __icon, scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ _whom
                , " "
                , gainsOrLoses _amt
                , " "
                , toMessage (colourNum True _amt)
                , " spy network strength"
                ]
        MsgAddSpyNetworkIn {scriptMessageIcon = __icon, scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " spy network strength in "
                , _whom
                ]
        MsgSudebnikProgress {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " Sudebnik progress"
                ]
        MsgOprichninaProgress {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " Oprichnina progress"
                ]
        MsgStreltsyProgress {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " Streltsy progress"
                ]
        MsgAddLootFromProvinceEffect
            -> "Gain {{icon|ducats}} ducats and {{icon|mil}} military power scaling with province development"
        MsgGenericTemplate {scriptMessageTemplate = _template}
            -> "{{" <> _template <> "}}"
        MsgAddStabilityOrAdm
            -> "{{add stability or adm power}}"
        MsgAddTrust {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "Gain "
                , toMessage (colourNum True _amt)
                , " trust towards "
                , toMessage _whom
                ]
        MsgAddTrustMutual {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "This country and "
                , toMessage _whom
                , " gain "
                , toMessage (colourNum True _amt)
                , " trust towards each other"
                ]
        MsgSaveEventTargetAs {scriptMessageName = _name}
            -> mconcat
                [ "Save as event target named <tt>"
                , _name
                , "</tt>"
                ]
        MsgSaveGlobalEventTargetAs {scriptMessageName = _name}
            -> mconcat
                [ "Save as global event target named <tt>"
                , _name
                , "</tt>"
                ]
        MsgHasSavedEventTarget {scriptMessageName = _name}
            -> mconcat
                [ "An event target named <tt>"
                , _name
                , "</tt> has been saved"
                ]
        MsgRemoveClaim {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " loses their claim on this province"
                ]
        MsgRemoveCoreOf {scriptMessageWho = _who}
            -> mconcat
                [ "Remove the core of"
                , _who
                ]
        MsgRemoveFromFaction {scriptMessageWho = _who}
            -> mconcat
                [ "Remove "
                , _who
                , " from faction led by current scope"
                ]
        MsgTribalAllegianceBonus {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " {{DLC-only|Yearly tribal allegiance}}"
                ]
        MsgTribalAllegiance {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , "{{DLC-only|Tribal allegiance}} is at least "
                , toMessage (plainNum _amt)
                ]
        MsgGainTribalAllegiance {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " {{DLC-only|tribal allegiance}}"
                ]
        MsgArmySizePc {scriptMessageAmt = _amt}
            -> mconcat
                [ "Army size is at least "
                , toMessage (reducedNum plainPc _amt)
                , " of force limit"
                ]
        MsgBuildHeavyShips {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageSpeed = _speed, scriptMessageCost = _cost}
            -> mconcat
                [ "Build "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " heavy "
                , plural _amt "ship" "ships"
                , " at "
                , toMessage (reducedNum plainPc _cost)
                , " of normal cost, taking "
                , toMessage (reducedNum plainPc _speed)
                , " of normal time"
                ]
        MsgBuildLightShips {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageSpeed = _speed, scriptMessageCost = _cost}
            -> mconcat
                [ "Build "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " light "
                , plural _amt "ship" "ships"
                , " at "
                , toMessage (reducedNum plainPc _cost)
                , " of normal cost, taking "
                , toMessage (reducedNum plainPc _speed)
                , " of normal time"
                ]
        MsgBuildGalleys {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageSpeed = _speed, scriptMessageCost = _cost}
            -> mconcat
                [ "Build "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , plural _amt " galley" " galleys"
                , " at "
                , toMessage (reducedNum plainPc _cost)
                , " of normal cost, taking "
                , toMessage (reducedNum plainPc _speed)
                , " of normal time"
                ]
        MsgBuildTransports {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageSpeed = _speed, scriptMessageCost = _cost}
            -> mconcat
                [ "Build "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , plural _amt " transport" " transports"
                , " at "
                , toMessage (reducedNum plainPc _cost)
                , " of normal cost, taking "
                , toMessage (reducedNum plainPc _speed)
                , " of normal time"
                ]
        MsgAristocratsInfluence {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum plainPcSign _amt)
                , " The Aristocrats influence"
                ]
        MsgDomesticTradePower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Domestic trade power"
                ]
        MsgEmbracementCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Institution embracement cost"
                ]
        MsgGlobalTaxIncome {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Tax income"
                ]
        MsgHeavyShipCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Heavy ship cost"
                ]
        MsgHeirChance {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Chance of new heir"
                ]
        MsgInstitutionSpread {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Institution spread"
                ]
        MsgLandFireDamage {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Land fire damage"
                ]
        MsgLocalConstructionCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Local construction cost"
                ]
        MsgLocalCultureConversionCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Local culture conversion cost"
                ]
        MsgLocalDefensiveness {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Local defensiveness"
                ]
        MsgLocalGoodsProduced {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Local goods produced"
                ]
        MsgLocalGoodsProducedMod {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Local goods produced modifier"
                ]
        MsgLocalHostileMovementSpeed {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Local hostile movement speed"
                ]
        MsgLocalInstitutionSpread {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Local institution spread"
                ]
        MsgLocalUnrest {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign False _amt)
                , " Local unrest"
                ]
        MsgLocalManpowerMod {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Local manpower modifier"
                ]
        MsgLocalMissionaryStrength {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Local missionary strength"
                ]
        MsgLocalMonthlyDevastation {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign False _amt)
                , " Monthly devastation"
                ]
        MsgLocalProdEff {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Local production efficiency"
                ]
        MsgLocalSettlerIncrease {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Local settler increase"
                ]
        MsgLocalStateMaintMod {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Local state maintenance"
                ]
        MsgLocalTaxMod {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Local tax modifier"
                ]
        MsgLocalTradePower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Local trade power"
                ]
        MsgLocalTradePowerMod {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Local trade power modifier"
                ]
        MsgMaxPromotedCultures {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , plural _amt " Max promoted culture" " Max promoted cultures"
                ]
        MsgMercenaryDiscipline {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Mercenary discipline"
                ]
        MsgMeritocracy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Meritocracy is at least "
                , toMessage (roundNum _amt)
                ]
        MsgMovementSpeed {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Movement speed"
                ]
        MsgProvTradePowerMod {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Provincial trade power modifier"
                ]
        MsgRazingPowerGain {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Razing power gain"
                ]
        MsgRecoverNavyMoraleSpeed {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Recover navy morale speed"
                ]
        MsgShockDamage {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Shock damage"
                ]
        MsgStateMaintMod {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " State maintenance"
                ]
        MsgSubjectLibertyDesire {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourPcSign False (negate _amt))
                , " Liberty desire in subjects"
                ]
        MsgTaxIncome {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Tax income"
                ]
        MsgTradePowerAbroad {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Trade power abroad"
                ]
        MsgTradeValueMod {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Trade value modifier"
                ]
        MsgYearlyArmyProfessionalism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " {{DLC-only|Yearly army professionalism}}"
                ]
        MsgYearlyCorruption {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign False _amt)
                , " Yearly corruption"
                ]
        MsgYearlyMeritocracy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " {{DLC-only|Yearly meritocracy}}"
                ]
        MsgAddInnovativenessBigEffect
            -> "If DLC {{icon|rb}} Rule Britannia is active, gain {{icon|innovativeness}} {{green|3}} innovativeness"
        MsgAddInnovativenessSmallEffect
            -> "If DLC {{icon|rb}} Rule Britannia is active, gain {{icon|innovativeness}} {{green|1}} innovativeness"
        MsgAddReformProgressMediumEffect
            -> "Gain {{icon|reform progress}} {{green|25}} reform progress"
        MsgAddReformProgressSmallEffect
            -> "Gain {{icon|reform progress}} {{green|15}} reform progress"
        MsgBoostBureaucratsEffect
            -> "If DLC {{icon|moh}} Mandate of Heaven is ''not'' active, the {{icon|bureaucrats}} Grand Secretariat faction gains '''10''' influence"
        MsgBoostBureaucratsLargeEffect
            -> "If DLC {{icon|moh}} Mandate of Heaven is ''not'' active, the {{icon|bureaucrats}} Grand Secretariat faction gains '''15''' influence"
        MsgBoostEunuchsEffect
            -> "If DLC {{icon|moh}} Mandate of Heaven is ''not'' active, the {{icon|eunuchs}} Offices of Maritime Trade faction gains '''10''' influence"
        MsgBoostEunuchsLargeEffect
            -> "If DLC {{icon|moh}} Mandate of Heaven is ''not'' active, the {{icon|eunuchs}} Offices of Maritime Trade faction gains '''15''' influence"
        MsgBoostTemplesEffect
            -> "If DLC {{icon|moh}} Mandate of Heaven is ''not'' active, the {{icon|temples}} Commanderies of the Five Armies faction gains '''10''' influence"
        MsgBoostTemplesLargeEffect
            -> "If DLC {{icon|moh}} Mandate of Heaven is ''not'' active, the {{icon|temples}} Commanderies of the Five Armies faction gains '''15''' influence"
        MsgCheckIfNonStateAdvisorEffect
            -> "Randomly set a country flag to determine the religion (state, secondary, tertiary, or Jewish) of an advisor based on location of the capital and state religion group"
        MsgEraseAdvisorFlagsEffect
            -> "Forget the choice of religion for an advisor"
        MsgIncreaseHeirAdmEffect
            -> "Heir gains {{icon|adm}} {{green|1}} administrative skill, or gain {{green|50}} administrative power if skill is already 6"
        MsgIncreaseHeirDipEffect
            -> "Heir gains {{icon|dip}} {{green|1}} diplomatic skill, or gain {{green|50}} diplomatic power if skill is already 6"
        MsgIncreaseHeirMilEffect
            -> "Heir gains {{icon|mil}} {{green|1}} military skill, or gain {{green|50}} military power if skill is already 6"
        MsgIncreaseLegitimacyHugeEffect
            -> "Gain {{icon|legitimacy}} {{green|50}} legitimacy, {{icon|horde unity}} {{green|50}} horde unity, {{icon|devotion}} {{green|50}} devotion, or {{icon|republican tradition}} {{green|25}} republican tradition as appropriate"
        MsgIncreaseLegitimacyMediumEffect
            -> "Gain {{icon|legitimacy}} {{green|10}} legitimacy, {{icon|horde unity}} {{green|10}} horde unity, {{icon|devotion}} {{green|10}} devotion, or {{icon|republican tradition}} {{green|5}} republican tradition as appropriate"
        MsgIncreaseLegitimacySmallEffect
            -> "Gain {{icon|legitimacy}} {{green|5}} legitimacy, {{icon|horde unity}} {{green|5}} horde unity, {{icon|devotion}} {{green|5}} devotion, or {{icon|republican tradition}} {{green|2.5}} republican tradition as appropriate"
        MsgMoveCapitalEffect
            -> "Province becomes the new {{icon|capital}} capital. If it was in the empire and the country isn't, it is removed from the empire."
        MsgPrevMoveCapitalEffect
            -> "Province becomes the new {{icon|capital}} capital of the previously mentioned country. If it was in the empire and the country isn't, it is removed from the empire."
        MsgReduceBureaucratsEffect
            -> "If DLC Mandate of Heaven is ''not'' active, the Grand Secretariat faction loses 10 influence"
        MsgReduceEunuchsEffect
            -> "If DLC Mandate of Heaven is ''not'' active, the Offices of Maritime Trade faction loses 10 influence"
        MsgReduceTemplesEffect
            -> "If DLC Mandate of Heaven is ''not'' active, the Commanderies of the Five Armies faction loses 10 influence"
        MsgReduceLegitimacyEffect
            -> "Lose {{icon|legitimacy}} {{red|10}} legitimacy, {{icon|horde unity}} {{red|10}} horde unity, {{icon|devotion}} {{red|10}} devotion, or {{icon|republican tradition}} {{red|5}} republican tradition as appropriate"
        MsgReduceLegitimacySmallEffect
            -> "Lose {{icon|legitimacy}} {{red|5}} legitimacy, {{icon|horde unity}} {{red|5}} horde unity, {{icon|devotion}} {{red|5}} devotion, or {{icon|republican tradition}} {{red|2.5}} republican tradition as appropriate"
        MsgReduceMandateEffect
            -> "If the country is the Emperor of China and DLC {{icon|moh}} Mandate of Heaven is active, lose {{icon|mandate}} {{red|5}} mandate"
        MsgReduceMandateLargeEffect
            -> "If the country is the Emperor of China and DLC {{icon|moh}} Mandate of Heaven is active, lose {{icon|mandate}} {{red|10}} mandate"
        MsgReduceMeritocracyEffect
            -> "If the country is the Emperor of China and DLC {{icon|moh}} Mandate of Heaven is active, lose {{icon|meritocracy}} {{red|5}} meritocracy"
        MsgReduceMeritocracyLargeEffect
            -> "If the country is the Emperor of China and DLC {{icon|moh}} Mandate of Heaven is active, lose {{icon|meritocracy}} {{red|10}} meritocracy"
        MsgReduceReformProgressSmallEffect
            -> "Lose {{icon|reform progress}} {{red|25}} reform progress"
        MsgReduceReformProgressMediumEffect
            -> "Lose {{icon|reform progress}} {{red|50}} reform progress"
        MsgReduceReformProgressBigEffect
            -> "Lose {{icon|reform progress}} {{red|75}} reform progress"
        MsgRemoveAdvisorAdmEffect
            -> "The currently employed administrative advisor leaves the country's court."
        MsgDivorceConsortEffect
            -> "Attempt to divorce the consort. The consort's family may be offended by this, spoiling relations, giving them a casus belli, or angering local nobles."
        MsgDismantleFaction
            -> "Dismantle faction"
        MsgDropCosmeticTag
            -> "Remove cosmetic tag"
        MsgAddGovernmentReform { scriptMessageWhat = _what }
            -> mconcat
                ["Enact government reform "
                ,_what
                ]
        MsgRemoveGovernmentReform { scriptMessageWhat = _what }
            -> mconcat
                ["Remove government reform "
                ,_what
                ]
        MsgAddCOTLevel { scriptMessageIcon = _icon, scriptMessageAmt = _amt }
            -> mconcat
                ["Increase "
                ,_icon
                ," Center of Trade level by "
                ,toMessage (plainNum _amt)
                ]
        MsgRulerAge {scriptMessageAmt = _amt}
            -> mconcat
                [ "Ruler is at least "
                , toMessage (plainNum _amt)
                , " years old"
                ]
        MsgSetCompliance {scriptMessageAmt = _amt}
            -> mconcat
                [ "Set comliance to "
                , toMessage (plainPc _amt)
                ]
        MsgSurrenderProgress  {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (reducedNum plainPc _amt)
                , " surrender progress"
                ]
        MsgEmployedAdvisor
            -> "Employed advisor"
        MsgEmployedAdvisorWhere
            -> "Employed advisor where:"
        MsgEmployedAdvisorAdmin
            -> "Is administrative"
        MsgEmployedAdvisorDiplo
            -> "Is diplomatic"
        MsgEmployedAdvisorMiltary
            -> "Is military"
        MsgEmployedAdvisorType {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Is "
                , _icon
                , " "
                , _what
                ]
        MsgEmployedAdvisorMale {scriptMessageMale = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "male" "female")
                ]
        MsgNumOwnedProvincesWith {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (plainNum _amt)
                , " owned provinces with:"
                ]
        MsgNumOwnedProvincesOrNonSovereignSubjectsWith {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (plainNum _amt)
                , " provinces owned by the country or non-tributary subjects with:"
                ]
        MsgNumOwnedStatesOrNonSovereignSubjectsWith {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (plainNum _amt)
                , " states owned by the country or non-tributary subjects with:"
                ]
        MsgSetVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Set variable "
                , _var1
                , " to the value of "
                , _var2
                ]
        MsgSetTempVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Set temporary variable "
                , _var1
                , " to the value of "
                , _var2
                ]
        MsgSetVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Set variable "
                , _var
                , " to "
                , toMessage (Doc.pp_float _amt)
                ]
        MsgSetTempVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Set temporary variable "
                , _var
                , " to "
                , toMessage (Doc.pp_float _amt)
                ]
        MsgAddVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Increase variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgAddTempVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Increase temporary variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgAddVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ toMessage (increaseOrDecrease _amt)
                , " variable "
                , _var
                , " by "
                , toMessage (plainNum (if _amt < 0 then -_amt else _amt))
                ]
        MsgAddTempVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ toMessage (increaseOrDecrease _amt)
                , " temporary variable "
                , _var
                , " by "
                , toMessage (plainNum (if _amt < 0 then -_amt else _amt))
                ]
        MsgSubVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Decrease variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgSubTempVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Decrease temporary variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgSubVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Decrease variable "
                , _var
                , " by "
                , toMessage (plainNum _amt)
                ]
        MsgSubTempVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Decrease temporary variable "
                , _var
                , " by "
                , toMessage (plainNum _amt)
                ]
        MsgMulVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Multiply variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgMulTempVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Multiply temporary variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgMulVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Multiply variable "
                , _var
                , " by "
                , toMessage (plainNum _amt)
                ]
        MsgMulTempVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Multiply temporary variable "
                , _var
                , " by "
                , toMessage (plainNum _amt)
                ]
        MsgDivVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Divide variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgDivTempVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Divide temporary variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgDivVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Divide variable "
                , _var
                , " by "
                , toMessage (plainNum _amt)
                ]
        MsgDivTempVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Divide temporary variable "
                , _var
                , " by "
                , toMessage (plainNum _amt)
                ]
        MsgChkVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Value of variable "
                , _var1
                , " is at least that of "
                , _var2
                ]
        MsgChkVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Value of variable "
                , _var
                , " is at least "
                , toMessage (plainNum _amt)
                ]
        MsgEquVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Value of variable "
                , _var1
                , " is equal to that of "
                , _var2
                ]
        MsgEquVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Value of variable "
                , _var
                , " equal to "
                , toMessage (plainNum _amt)
                ]
        MsgIsColonialNationOf { scriptMessageWho = _who }
            -> mconcat
                [ "Is colonial nation of "
                , _who
                ]
        MsgHasInstitution { scriptMessageIcon = _icon, scriptMessageWhat = _what }
            -> mconcat
                [ "The country has embraced the "
                , _icon
                , " "
                , _what
                , " institution"
                ]
        MsgWasNeverEndGameTag { scriptMessageYn = _yn }
            -> mconcat
                [ "The country "
                , toMessage (ifThenElseT _yn "was never" "is")
                , " an [[end-game tag]]"
                ]
        MsgHasCompletedAllReforms { scriptMessageYn = _yn }
            -> mconcat -- This is usually used in the context of limit = { not = { ... } } to limit giving reforming progress to
                       -- cases where the Emperor DLC is active AND the highest tier gov. reform hasn't been enacted
                [ "The country has"
                , toMessage (ifThenElseT _yn "" " not")
                , " enacted one of the highest tier [[government reform]]s and DLC {{icon|emp|28px}} Emperor is not active"
                ]
        MsgHasFinalTierReform { scriptMessageYn = _yn }
            -> mconcat
                [ "The country has"
                , toMessage (ifThenElseT _yn "" " not")
                , " enacted one of the highest tier [[government reform]]s"
                ]
        MsgPctBackingParliamentIssue { scriptMessageAmt = _amt }
            -> mconcat
                [ "At least "
                , toMessage (reducedNum plainPc _amt)
                , " of the seats in [[parliament]] are backing the current issue"
                ]
        MsgIsBackingCurrentIssue { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " backing the current issue in [[parliament]]"
                ]
        MsgHasActiveDebate { scriptMessageYn = _yn }
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Doesn't have")
                , " an ongoing [[debate]] in [[parliament]]"
                ]
        MsgCurrentDebate { scriptMessageWhat = _what }
            -> mconcat
                [ "Current debate in [[parliament]] is "
                , _what
                ]
        MsgBackCurrentIssue { scriptMessageYn = _yn }
            -> mconcat
                [ "Will"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " back the current issue in [[parliament]]"
                ]
        MsgSetSeatInParliament { scriptMessageYn = _yn }
            -> mconcat
                [ toMessage (ifThenElseT _yn "Add" "Remove")
                , " seat "
                , toMessage (ifThenElseT _yn "to" "from")
                , " [[parliament]]"
                ]
        MsgHasCustomIdeas { scriptMessageYn = _yn}
            -> mconcat
                [ "The country "
                , toMessage (ifThenElseT _yn "has" "does ''not'' have")
                , " [[custom ideas]]"
                ]
        MsgHasDefensiveWar { scriptMessageYn = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "" "''not''")
                , " in a defensive war"
                ]
        MsgIsProvinceEmpty { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " open for colonization"
                ]
        MsgIsEmperorOfChina { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " the [[Emperor of China]]"
                ]
        MsgHasStatesGeneralMechanic { scriptMessageYn = _yn }
            -> mconcat
                [ "Government "
                , toMessage (ifThenElseT _yn "uses" "does ''not'' use")
                , " [[States General]] mechanic"
                ]
        MsgIsInWar
            -> "Is in a war where:"
        MsgDurationAtLeast { scriptMessageDays = _days }
            -> mconcat
                [ "Duration is at least "
                , toMessage (formatDays _days)
                ]
        MsgIsAttackerWarLeader { scriptMessageWho = _who }
            -> mconcat
                [ _who
                , " is the war leader on the attacking side"
                ]
        MsgIsDefenderWarLeader { scriptMessageWho = _who }
            -> mconcat
                [ _who
                , " is the war leader on the defending side"
                ]
        MsgIsAttacker { scriptMessageWho = _who }
            -> mconcat
                [ _who
                , " is on the attacking side"
                ]
        MsgIsDefender { scriptMessageWho = _who }
            -> mconcat
                [ _who
                , " is on the defending side"
                ]
        MsgLoadFocusTree { scriptMessageWhat = _what }
            -> mconcat
                [ "Changes the national focus tree to "
                , _what
                ]
        MsgLoadFocusTreeKeep { scriptMessageWhat = _what, scriptMessageYesNo = _yesno }
            -> mconcat
                [ "Changes the national focus tree to "
                , toMessage (iquotes _what)
                , " and"
                , if _yesno == "yes" then "" else "'' don't''"
                , " keep completed focuses"
                ]
        MsgCasusBelliIs { scriptMessageCb = _cb }
            -> mconcat
                [ "The [[Casus Belli]] is "
                , _cb
                ]
        MsgGainNewMissions
            -> "Gets new {{icon|mission|21px}} missions"
        MsgIsRevolutionary { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " revolutionary"
                ]
        MsgIsRevolutionaryRepublic { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a revolutionary republic"
                ]
        MsgHasRevolutionInProvince { scriptMessageYn = _yn }
            -> mconcat
                [ "Revolution is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " present"
                ]
        MsgRevolutionTargetExists { scriptMessageYn = _yn }
            -> mconcat
                [ "There is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a {{icon|revolution target}} revolution target"
                ]
        MsgIsCenterOfRevolution { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " the center of revolution"
                ]
        MsgSetRevolutionProvince { scriptMessageYn = _yn }
            -> mconcat
                [ toMessage (ifThenElseT _yn "Add" "Remove")
                , " revolution "
                , toMessage (ifThenElseT _yn "to" "from")
                , " province"
                ]
        MsgGovernmentHasAttribute { scriptMessageWhat = _what }
            -> mconcat
                [ "Has government type where: "
                , _what
                ]
        MsgReligiousModifier
            -> "These effects are lost if the state religion changes"
        MsgIsEnemy { scriptMessageWho = _who }
            -> mconcat
                [ _who
                , " is viewed as an enemy"
                ]
        MsgIsFullyControlledBy { scriptMessageWho = _who }
            -> mconcat
                [ "Is fully controlled by "
                , _who
                ]
        MsgIsGuaranteedBy { scriptMessageWho = _who }
            -> mconcat
                [ "Is guaranteed independence by "
                , _who
                ]
        MsgHasSpyNetworkFrom {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , _who
                , " has at least "
                , toMessage (plainNum _amt)
                , " spy network"
                ]
        MsgHasSpyNetworkIn {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ "The country has at least "
                , toMessage (plainNum _amt)
                , " spy network in "
                , _who
                ]
        MsgDefineGeneral { scriptMessageIcon = _icon }
            -> mconcat
                [ "Gain a new "
                , _icon
                , " general with:"
                ]
        MsgDefineRulerToGeneral { scriptMessageIcon = _icon }
            -> mconcat
                [ "Make ruler a "
                , _icon
                , " general with:"
                ]
        MsgDefineConquistador { scriptMessageIcon = _icon }
            -> mconcat
                [ "Gain a new "
                , _icon
                , " conquistador with:"
                ]
        MsgDefineAdmiral { scriptMessageIcon = _icon }
            -> mconcat
                [ "Gain a new "
                , _icon
                , " admiral with:"
                ]
        MsgDefineExplorer { scriptMessageIcon = _icon }
            -> mconcat
                [ "Gain a new "
                , _icon
                , " explorer with:"
                ]
        MsgMilitaryLeaderTrait { scriptMessageWhat = _what }
            -> mconcat
                [ "With the [[Leader trait|trait]] "
                , toMessage $ quotes _what
                ]
        MsgTypeAll
            -> "Condition applies to all"
        MsgSetSavedName { scriptMessageVar = _var, scriptMessageType = _type, scriptMessageFemale = _female }
            -> mconcat
                [ "Save name of "
                , toMessage (ifThenElseT _female "female " "")
                , _type
                , " to <tt>"
                , _var
                , "</tt>"
                ]
        MsgSetSavedNameScope { scriptMessageVar = _var, scriptMessageType = _type, scriptMessageScope = _scope, scriptMessageFemale = _female }
            -> mconcat
                [ "Save name of "
                , toMessage (ifThenElseT _female "female " "")
                , _type
                , " from "
                , _scope
                , " to <tt>"
                , _var
                , "</tt>"
                ]
        MsgClearSavedName { scriptMessageVar = _var }
            -> mconcat
                [ "Clear saved name <tt>"
                , _var
                , "</tt>"
                ]
        MsgProvinceTradePower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (roundNum _amt)
                , " "
                , _icon
                , " province trade power"
                ]
        MsgHasPermanentClaim { scriptMessageWhat = _what }
            -> mconcat
                [ "Has a [[permanent claim]] on "
                , _what
                ]
        MsgIsPermanentClaim { scriptMessageWhom = _whom }
            -> mconcat
                [ "Is a [[permanent claim]] of "
                , _whom
                ]
        MsgIsSubjectOfType { scriptMessageType = _type }
            -> mconcat
                [ "Is subject type "
                , _type
                ]
        MsgHasRuler { scriptMessageWho = _who }
            -> mconcat
                [ "Has "
                , toMessage (quotes _who)
                ," as ruler"
                ]
        MsgHeirADM {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Heir's "
                , _icon
                , " administrative skill is at least "
                , toMessage (roundNum _amt)
                ]
        MsgHeirDIP {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Heir's "
                , _icon
                , " diplomatic skill is at least "
                , toMessage (roundNum _amt)
                ]
        MsgHeirMIL {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Heir's "
                , _icon
                , " military skill is at least "
                , toMessage (roundNum _amt)
                ]
        MsgConsortADM {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Consort's "
                , _icon
                , " administrative skill is at least "
                , toMessage (roundNum _amt)
                ]
        MsgConsortDIP {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Consort's "
                , _icon
                , " diplomatic skill is at least "
                , toMessage (roundNum _amt)
                ]
        MsgConsortMIL {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Consort's "
                , _icon
                , " military skill is at least "
                , toMessage (roundNum _amt)
                ]
        MsgLandLeaderFire {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage $ bold (roundNum _amt)
                , " fire"
                ]
        MsgLandLeaderShock {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage $ bold (roundNum _amt)
                , " shock"
                ]
        MsgLandLeaderManeuver {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage $ bold (roundNum _amt)
                , " maneuver"
                ]
        MsgLandLeaderSiege {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage $ bold (roundNum _amt)
                , " siege"
                ]
        MsgNavalLeaderFire {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage $ bold (roundNum _amt)
                , " fire"
                ]
        MsgNavalLeaderShock {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage $ bold (roundNum _amt)
                , " shock"
                ]
        MsgNavalLeaderManeuver {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage $ bold (roundNum _amt)
                , " maneuver"
                ]
        MsgNavalLeaderSiege {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage $ bold (roundNum _amt)
                , " siege"
                ]
        MsgCountryOrNonSovereignSubjectHolds {scriptMessageWhom = _whom}
            -> mconcat
                [ "Province is owned by "
                , _whom
                , " or its non-tributary subjects"
                ]
        MsgCountryOrSubjectHolds {scriptMessageWhom = _whom}
            -> mconcat
                [ "Province is owned by "
                , _whom
                , " or its subjects"
                ]
        MsgAdmiralCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Admiral cost"
                ]
        MsgAllowedMarineFraction {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " {{DLC-only|Marines force limit|"
                , toMessage (reducedNum plainNumSign _amt)
                , "}}"
                ]
        MsgAllowedNumOfBuildings {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Possible number of buildings"
                ]
        MsgAmountOfBanners {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " {{DLC-only|Possible manchu banners|"
                , toMessage (reducedNum plainNumSign _amt)
                , "}}"
                ]
        MsgAppointCardinalCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Appoint cardinal cost"
                ]
        MsgArmyTraditionFromBattle {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Army tradition from battles"
                ]
        MsgArtilleryFire {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Artillery fire"
                ]
        MsgAutoExploreAdjacentToColony
            -> "Automatically discover adjacent when a colony is built"
        MsgAutonomyChangeTime {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Autonomy change cooldown"
                ]
        MsgBackrowArtilleryDamage {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Artillery damage from back row"
                ]
        MsgBrahminsHinduLoyaltyModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Brahmins loyalty equilibrium"
                ]
        MsgBrahminsMuslimLoyaltyModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Brahmins loyalty equilibrium"
                ]
        MsgBuildTime {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Construction time"
                ]
        MsgBurghersInfluenceModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum plainPcSign _amt)
                , " Burghers influence"
                ]
        MsgBurghersLoyaltyModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Burghers loyalty equilibrium"
                ]
        MsgCanFabricateForVassals
            -> "May fabricate claims for subjects"
        MsgCaptureShipChance {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Chance to capture enemy ships"
                ]
        MsgCavToInfRatio {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Cavalry to infantry ratio"
                ]
        MsgCavalryFlanking {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Cavalry flanking ability"
                ]
        MsgCenterOfTradeUpgradeCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " {{DLC-only|Center of trade upgrade cost|"
                , toMessage (reducedNum plainNumSign _amt)
                , "}}"
                ]
        MsgChurchLoyaltyModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Clergy loyalty equilibrium"
                ]
        MsgCuriaTreasuryContribution {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Curia treasury contribution"
                ]
        MsgDhimmiLoyaltyModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Dhimmyi loyalty equilibrium"
                ]
        MsgDisengagementChance {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Ship disengagement chance"
                ]
        MsgDrillDecayModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Regiment drill loss"
                ]
        MsgEnforceReligionCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Cost of enforcing religion through war"
                ]
        MsgEstablishOrderCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Establish holy order cost"
                ]
        MsgExpelMinoritiesCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " {{DLC-only|Expel minorities cost|"
                , toMessage (reducedNum plainNumSign _amt)
                , "}}"
                ]
        MsgFemaleAdvisorChance {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Female advisor chance"
                ]
        MsgFireDamageReceived {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Fire damage received"
                ]
        MsgFlagshipCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " {{DLC-only|Flagship cost}}"
                ]
        MsgFreeAdmPolicy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " {{DLC-only|Administrative free policies|"
                , toMessage (plainNumSign _amt)
                , "}}"
                ]
        MsgFreeDipPolicy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " {{DLC-only|Diplomatic free policies|"
                , toMessage (plainNumSign _amt)
                , "}}"
                ]
        MsgFreeMilPolicy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " {{DLC-only|Military free policies|"
                , toMessage (plainNumSign _amt)
                , "}}"
                ]
        MsgGalleyCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Galley cost"
                ]
        MsgGeneralCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " General cost"
                ]
        MsgGlobalGarrisonGrowth {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " National garrison growth"
                ]
        MsgGlobalNavalEngagementModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Global naval engagement"
                ]
        MsgGlobalReligiousConversionResistance {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Resistance to reformation"
                ]
        MsgGlobalSailorsModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " National sailors modifier"
                ]
        MsgGlobalShipTradePower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Ship trade power"
                ]
        MsgGlobalSupplyLimitModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " National supply limit modifier"
                ]
        MsgGoverningCapacityModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Governing capacity modifier"
                ]
        MsgHarshTreatmentCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Harsh treatment cost"
                ]
        MsgIdeaClaimColonies
            -> "Can fabricate claims on any overseas province, provided it is overseas for its owner"
        MsgImperialAuthorityGrowthModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Imperial authority growth modifier"
                ]
        MsgImperialAuthorityValue {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Imperial authority modifier"
                ]
        MsgInnovativenessGain {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " {{DLC-only|Innovativeness gain}}"
                ]
        MsgJustifyTradeConflictCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Cost to justify trade conflict"
                ]
        MsgLeaderSiege {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Leader siege"
                ]
        MsgLegitimateSubjectElector {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Legitimate subject elector"
                ]
        MsgLibertyDesireFromSubjectDevelopment {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Liberty desire from subjects development"
                ]
        MsgLightShipCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Light ship cost"
                ]
        MsgLocalFriendlyMovementSpeed {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Friendly movement speed"
                ]
        MsgLocalMissionaryMaintenanceCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Local missionary maintenance"
                ]
        MsgLocalRegimentCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Local regiment cost"
                ]
        MsgLocalReligiousConversionResistance {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Resistance to reformation"
                ]
        MsgLocalSailorsModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Local sailors modifier"
                ]
        MsgLocalShipCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Local ship cost"
                ]
        MsgLocalShipRepair {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Local ship repair"
                ]
        MsgLootAmount {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Looting speed"
                ]
        MsgMaxRevolutionaryZeal {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " {{DLC-only|Maximum revolutionary zeal}}"
                ]
        MsgMayEstablishFrontier
            -> "{{DLC-only|May establish siberian frontiers}}"
        MsgMayPerformSlaveRaid
            -> "{{DLC-only|May raid coasts}}"
        MsgMayPerformSlaveRaidOnSameReligion
            -> "{{DLC-only|May raid coasts}}, including coasts of countries with same religion"
        MsgMayRecruitFemaleGenerals
            -> "May recruit female generals"
        MsgMercenaryManpower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Mercenary manpower"
                ]
        MsgMigrationCooldown {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " {{DLC-only|Migration cooldown}}"
                ]
        MsgMinAutonomyInTerritories {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Minimum autonomy in territories"
                ]
        MsgMonarchDiplomaticPower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Monarch diplomatic skill"
                ]
        MsgMonarchMilitaryPower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Monarch military skill"
                ]
        MsgMonthlyPiety {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (bold (reducedNum plainPcSign _amt))
                , " Monthly piety"
                ]
        MsgMrGuildsInfluence {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (plainNumSign _amt)
                , " Monthly guilds influence"
                ]
        MsgMrTradersInfluence {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (plainNumSign _amt)
                , " Monthly traders influence"
                ]
        MsgNativeAssimilation {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Native assimilation"
                ]
        MsgNativeUprisingChance {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Native uprising chance"
                ]
        MsgNavalTraditionFromBattle {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Naval tradition from battles"
                ]
        MsgNavalTraditionFromTrade {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Naval tradition from protecting trade"
                ]
        MsgNoReligionPenalty
            -> "Heretic and heathen provinces do not give any penalties"
        MsgNoblesInfluenceModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum plainPcSign _amt)
                , " Nobles influence"
                ]
        MsgNoblesLoyaltyModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Nobility loyalty equilibrium"
                ]
        MsgOwnCoastNavalCombatBonus {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Naval combat bonus off owned coast"
                ]
        MsgPlacedMerchantPower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Merchant trade power"
                ]
        MsgPossibleAdmPolicy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " {{DLC-only|Administrative possible policies|"
                , toMessage (plainNumSign _amt)
                , "}}"
                ]
        MsgPossibleDipPolicy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " {{DLC-only|Diplomatic possible policies|"
                , toMessage (plainNumSign _amt)
                , "}}"
                ]
        MsgPossibleMilPolicy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " {{DLC-only|Military possible policies|"
                , toMessage (plainNumSign _amt)
                , "}}"
                ]
        MsgPossiblePolicy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " {{DLC-only|Possible policies|"
                , toMessage (plainNumSign _amt)
                , "}}"
                ]
        MsgPowerProjectionFromInsults {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Power projection from insults"
                ]
        MsgPrCaptainsInfluence {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Monthly captains influence"
                ]
        MsgReelectionCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Reelection cost"
                ]
        MsgReformProgressGrowth {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Reform progress growth"
                ]
        MsgReinforceCostModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Reinforce cost"
                ]
        MsgRivalBorderFortMaintenance {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Fort maintenance on border with rival"
                ]
        MsgSailorMaintenanceModifer {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Sailor maintenance"
                ]
        MsgSailorsRecoverySpeed {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Sailor recovery speed"
                ]
        MsgSameCultureAdvisorCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Cost of advisors with ruler's culture"
                ]
        MsgShockDamageReceived {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Shock damage received"
                ]
        MsgSiegeBlockadeProgress {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Blockade impact on siege"
                ]
        MsgSpecialUnitForcelimit {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Special unit force limit"
                ]
        MsgSunkShipMoraleHitRecieved {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Morale hit when losing a ship"
                ]
        MsgTradeCompanyInvestmentCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Trade company investment cost"
                ]
        MsgTransportCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Transport cost"
                ]
        MsgTreasureFleetIncome {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " {{DLC-only|Treasure fleet income|"
                , toMessage (reducedNum plainNumSign _amt)
                , "}}"
                ]
        MsgVaisyasLoyaltyModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Vaishyas loyalty equilibrium"
                ]
        MsgWarscoreCostVsOtherReligion {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " War score cost vs other religions"
                ]
        MsgYearlyHarmony {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Yearly harmony increase"
                ]
        MsgYearlyRevolutionaryZeal {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " {{DLC-only|Yearly revolutionary zeal}}"
                ]
        MsgMapSetupRandom
            -> "Using random map setup"
        MsgValidForPU { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " an independent [[Christian]] [[monarchy]]"
                ]
        MsgIsGreatPower { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a [[great power]]"
                ]
        MsgTradeShare {scriptMessageIcon = _, scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ _whom
                , " controls at least "
                , toMessage (plainPc _amt)
                , " of the [[trade]] in the [[trade node]]"
                ]
        MsgProviceHasCenterOfTrade {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Province has a "
                , _icon
                , " center of trade of at least level "
                , toMessage $ bold (roundNum _amt)
                ]
        MsgPrivateerPower {scriptMessageAmt = _amt}
            -> mconcat
                [ "The country has at least "
                , toMessage $ bold (plainPc _amt)
                , " trade power from [[privateering]]"
                ]
        MsgPrivateerPowerCountry {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ _whom
                , " has at least "
                , toMessage $ bold (plainPc _amt)
                , " trade power from [[privateering]]"
                ]
        MsgDevastation {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " devastation is at least "
                , toMessage $ bold (roundNum _amt)
                ]
        MsgHasEstatePrivilege {scriptMessageWhat = _what}
            -> mconcat
                [ "Has the "
                , toMessage (iquotes _what)
                , " estate privilege"
                ]
        MsgOwnsOrNonTribSubject {scriptMessageWhat = _what}
            -> mconcat
                [ _what
                , " is owned by the country or or its non-tributary subjects"
                ]
        MsgHasConsortRegency {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " in a consort regency"
                ]
        MsgHasCivilWar {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " in a civil war"
                ]
        MsgIsOwnedByTradeCompany {scriptMessageYn = _yn}
            -> mconcat
                [ "Province "
                , toMessage (ifThenElseT _yn "belongs" "does ''not'' belong")
                , " to a trade company"
                ]
        MsgOrignalTag {scriptMessageWhom = _whom}
            -> mconcat
                [ "The country was previously or is "
                , _whom
                ]
        MsgArmySize {scriptMessageIcon = _, scriptMessageAmt = _amt}
            -> mconcat
                [ "Army size is at least "
                , toMessage (plainNum _amt)
                ]
        MsgArmySizeMatches {scriptMessageIcon = _, scriptMessageWhom = _whom}
            -> mconcat
                ["Army size is at least as large as that of "
                , _whom
                ]
        MsgNavySize {scriptMessageIcon = _, scriptMessageAmt = _amt}
            -> mconcat
                [ "Navy size is at least "
                , toMessage (plainNum _amt)
                ]
        MsgNavySizeMatches {scriptMessageIcon = _, scriptMessageWhom = _whom}
            -> mconcat
                ["Navy size is at least as large as that of "
                , _whom
                ]
        MsgAddCuriaTreasury {scriptMessageAmt = _amt}
            -> mconcat
                [ "Add {{icon|ducats}} "
                , toMessage (colourNum True _amt)
                , " ducats to the [[curia]] treasury"
                ]
        MsgReduceCuriaTreasury {scriptMessageAmt = _amt}
            -> mconcat
                [ "Reduce [[curia]] treasury by {{icon|ducats}} "
                , toMessage (colourNum True _amt)
                , " ducats "
                ]
        MsgHasClimate {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Climate is "
                , _icon
                , " "
                , _what
                ]
        MsgHasGovernment {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Current ruling party is "
                , if T.null _icon then "the same as" else _icon
                , " "
                , _what
                ]
        MsgTradingBonus {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Country has the [[trading in]] bonus for "
                , _icon
                , " "
                , _what
                ]
        MsgNumSubjects {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , plural _amt " subject" " subjects"
                ]
        MsgApplyEstateModifer {scriptMessageWhat = _what}
            -> mconcat
                [ "Apply estate privilege modifier for "
                , toMessage (iquotes _what)
                ]
        MsgRemoveEstateModifer {scriptMessageWhat = _what}
            -> mconcat
                [ "Remove estate privilege modifier for "
                , toMessage (iquotes _what)
                ]
        MsgReapplyEstatePrivilege {scriptMessageWhat = _what}
            -> mconcat
                [ "Reapply estate privilege "
                , toMessage (iquotes _what)
                ]
        MsgLeaderTradition {scriptMessageNaval = _yn, scriptMessageAmt = _amt}
            -> mconcat
                [ "With "
                , toMessage (plainNum _amt)
                , " "
                , toMessage (ifThenElseT _yn "naval" "army")
                , " tradition"
                ]
        MsgTradeCompanySize {scriptMessageAmt = _amt}
            -> mconcat
                [ "Trade company has at least "
                , toMessage (plainNum _amt)
                , " provinces"
                ]
        MsgNumFreeBuildingSlots {scriptMessageAmt = _amt}
            -> mconcat
                [ "The province has at least "
                , toMessage (plainNum _amt)
                , " building slots remaining"
                ]
        MsgCanBuild {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ _icon
                , " "
                , _what
                , " can be built in the province"
                ]
        MsgCanHaveCenterOfReformation
            -> mconcat -- Description taken from [[Protestant_events]]
                [ "The country has its [[capital]] in Europe which does ''not'' have the modifier "
                , toMessage (iquotes "[[Religious Center]]")
                ]
        MsgCreateColony {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Create new colony with "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " population"
                ]
        MsgNumInvestmentsInTradeCompanyReigion {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (plainNum _amt)
                , " "
                , _icon
                , " "
                , _what
                , plural _amt " investment" " investments"
                , " in the trade company region"
                ]
        MsgHasTradeCompanyInvestmentInArea {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " has the "
                , _icon
                , " "
                , _what
                , " trade company investment"
                ]
        MsgIncreaseReligiousCurrencyEffect
            -> "Gain {{green|15}} church power, {{green|15}} fervor, {{green|10%}} patriarch authority, {{green|10}} karma, {{green|5}} authority or {{green|2}} papal influence"
        MsgReduceReligiousCurrencyEffect
            -> "Lose {{red|-15}} church power, {{red|-15}} fervor, {{red|-10%}} patriarch authority, {{red|-10}} karma, {{red|-5}} authority or {{red|-2}} papal influence"
        MsgHasPrivateers { scriptMessageYn = _yn }
            -> mconcat
                [ "The country "
                , toMessage (ifThenElseT _yn "has" "does ''not'' have")
                , " [[privateers]] in any trade node"
                ]
        MsgIsWasteland { scriptMessageYn = _yn }
            -> mconcat
                [ "Province is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " [[wasteland]]"
                ]
        MsgHasRiverEstuary
            -> "Province has a {{icon|estuary|28px}} river estuary"
        MsgTradingPolicyInNode { scriptMessageNode = _node, scriptMessagePolicy = _policy }
            -> mconcat
                [ _node
                , " has the "
                , _policy
                , " trading policy"
                ]
        MsgTradingPolicyInNodeAny { scriptMessageNode = _node }
            -> mconcat
                [ _node
                , " has any trading policy"
                ]
        MsgInstitutionDifference { scriptMessageWho = _who, scriptMessageAmt = _amt }
            -> mconcat
                [ "The country has embraced at least "
                , toMessage (plainNum _amt)
                , " more [[institutions]] than "
                , _who
                ]
        MsgEmbargoedBy { scriptMessageWho = _who }
            -> mconcat
                [ "The country is embargoed by "
                , _who
                ]
        MsgRandomAdvisor { scriptMessageIcon = _icon, scriptMessageText = _text, scriptMessageYn = _yn }
            -> mconcat
                [ "Gain access to a "
                , toMessage (ifThenElseT _yn "discounted " "")
                , _icon
                , " "
                , _text
                , " advisor, where:"
                ]
        MsgRandomAdvisorSkill { scriptMessageAmt = _amt }
            -> mconcat
                [ "Skill level is "
                , toMessage (plainNum _amt)
                ]
        MsgRandomAdvisorScaledSkill
            -> "Skill level is based on monthly income (1 if less than 15, 2 if less than 25, 3 otherwise)"
        MsgRandomAdvisorNonState { scriptMessageIcon = _icon, scriptMessageText = _text } -- TODO: Perhaps something less convoluted
            -> mconcat
                [ "If the randomly selected religion is not the state religion the advisor type changes to "
                , _icon
                , " "
                , _text
                ]
        MsgConvertFemaleRulerGeneral { scriptMessageAmt = _amt }
            -> mconcat
                [ "Convert female ruler into a general with "
                , toMessage (plainNum _amt)
                , " army tradition"
                ]
        MsgConvertHeirGeneral { scriptMessageYn = _yn, scriptMessageAmt = _amt }
            -> mconcat
                [ "Convert "
                , toMessage (ifThenElseT _yn "female" "male")
                , " heir into a general with "
                , toMessage (plainNum _amt)
                , " army tradition"
                ]
        MsgRemoveCurrentLeader
            -> "Remove current leader of the leading party"
        MsgIsHeirLeader { scriptMessageYn = _yn }
            -> mconcat
                [ "Heir is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a general"
                ]
        MsgIsHistoricalFocusOn { scriptMessageYn = _yn }
            -> mconcat
                [ "Historical Focus is "
                , toMessage (ifThenElseT _yn "'''on'''" "'''off'''")
                ]
        MsgAtWarWithReligiousEnemy { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " at war with any country of a different religion"
                ]
        MsgHasAdvisorCategory { scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " employing any "
                , _icon
                , " "
                , _what
                , " advisor"
                ]
        MsgHasAdvisorCategoryLevel { scriptMessageAmt = _amt, scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " employing any "
                , _icon
                , " "
                , _what
                , " advisor of at least level "
                , toMessage (plainNum _amt)
                ]
        MsgTradeNodeIsInTCRegion { scriptMessageYn = _yn }
            -> mconcat
                [ "The province's trade node is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " in a trade company region"
                ]
        MsgHasEmptyAdjProvince { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " adjacent to an uncolonized province"
                ]
        MsgIsInDeficit { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " running a deficit"
                ]
        MsgIsReligiousCenterProvince { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a religious center province"
                ]
        MsgNumCavalry {scriptMessageAmt = _amt}
            -> mconcat
                [ "Owns at least "
                , toMessage (roundNum _amt)
                , " cavalry "
                , plural _amt "regiment" "regiments"
                ]
        MsgNumCavalryThan {scriptMessageWhom = _whom}
            -> mconcat
                [ "Owns at least as many cavalry regiments as "
                , _whom
                ]
        MsgNumArtillery {scriptMessageAmt = _amt}
            -> mconcat
                [ "Owns at least "
                , toMessage (roundNum _amt)
                , " artillery "
                , plural _amt "regiment" "regiments"
                ]
        MsgNumArtilleryThan {scriptMessageWhom = _whom}
            -> mconcat
                [ "Owns at least as many artillery regiments as "
                , _whom
                ]
        MsgAdoptReformProgress {scriptMessageWhom = _whom}
            -> mconcat
                [ "Changes government to that of "
                , _whom
                ]
        MsgCuriaTreasurySize {scriptMessageAmt = _amt}
            -> mconcat
                [ "[[Curia]] treasury contains at least {{icon|ducats}} "
                , toMessage (plainNum _amt)
                , " ducats "
                ]
        MsgCuriaTreasuryIncome {scriptMessageAmt = _amt}
            -> mconcat
                [ "Yearly [[curia]] tithe is at least {{icon|ducats}} "
                , toMessage (plainNum _amt)
                , " ducats "
                ]
        MsgAmountResearchSlots {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNum _amt))
                , " research "
                , plural _amt "slot" "slots"
                ]
        MsgAnyWarScore {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (plainPc _amt)
                , " war progress"
                ]
        MsgCompareAutonomyProgressRatio {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (reducedNum plainPc _amt)
                , " {{icon|autonomy|1}} progress"
                ]
        MsgEnemiesStrengthRatio {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "The enemies strength is "
                , _comp
                , " "
                , toMessage (reducedNum plainPc _amt)
                , " compared to the current scope"
                ]
        MsgChangeInnovativeness {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " {{DLC-only|innovativeness}}"
                ]
        MsgIsCouncilEnabled {scriptMessageYn = _yn}
            -> mconcat
                [ "Council of Trent has"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " started"
                ]
        MsgCouncilPosition {scriptMessageWhat = _what}
            -> mconcat
                [ "The country's position in the Council of Trent is "
                , _what
                ]
        MsgAllConcesssionsTaken {scriptMessageYn = _yn}
            -> mconcat
                [ "All concessions in the Council of Trent have"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " been taken"
                ]
        MsgIsDotfTier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Defender of the Faith tier is at least "
                , toMessage (plainNum _amt)
                ]
        MsgHRESize {scriptMessageAmt = _amt}
            -> mconcat
                [ "The [[HRE]] has at least "
                , toMessage (plainNum _amt)
                , " "
                , plural _amt "member" "members"
                ]
        MsgHREExists -- Special case for hre_size = 1
            -> "{{icon|imperial authority}} Holy Roman Empire exists"
        MsgInLeague {scriptMessageWhat = _what}
            -> mconcat
                [ "Is part of the "
                , _what
                , " league"
                ]
        MsgIsCharacter {scriptMessageWhat = _what}
            -> mconcat
                [ "Is character "
                ,  toMessage (iquotes _what)
                ]
        MsgNumOwnInstitutionProvinces {scriptMessageAmt = _amt}
            -> mconcat
                [ "Owns at least "
                , toMessage (plainNum _amt)
                , " institution origin "
                , plural _amt "province" "provinces"
                ]
        MsgIsLeagueLeader {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " the leader of a religious league"
                ]
        MsgGainScaledImperialAuthority {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " imperial authority (scaled)"
                ]
        MsgHasWinter {scriptMessageWhat = _what}
            -> mconcat
                [ "Has winter of type "
                , toMessage (iquotes _what)
                ]
        MsgHasCountryLeader {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has leader "
                , toMessage (iquotes _whom)
                ]
        MsgIsIsland {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " an [[island]]"
                ]
        MsgIsBlockaded {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " [[blockaded]]"
                ]
        MsgKillLeaderType {scriptMessageIcon = _icon, scriptMessageText = _text}
            -> mconcat
                [ "A "
                , _icon
                , " "
                , _text
                , " dies"
                ]
        MsgKillLeaderRandom {scriptMessageIcon = _icon}
            -> mconcat
                [ "A random "
                , _icon
                , " leader dies"
                ]
        MsgKillLeaderNamed {scriptMessageIcon = _icon, scriptMessageText = _text}
            -> mconcat
                [ "The "
                , _icon
                , " leader named "
                , toMessage (quotes _text)
                , " dies"
                ]
        MsgAddEstateLoyaltyModifier {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageWhat = _what, scriptMessageDays = _days, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , _who
                , " estate "
                , gainsOrLoses _amt
                , " "
                , toMessage (colourNum True _amt)
                , " loyalty for "
                , toMessage (formatDays _days)
                , " due to the modifier "
                , toMessage (iquotes _what)
                ]
        MsgExportVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Export variable <tt>"
                , _var2
                , "</tt> to <tt>"
                , _var1
                , "</tt>"
                ]
        MsgExportVariableWho { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2, scriptMessageWhom = _whom}
            -> mconcat
                [ "Export "
                , _whom
                , "'s internal variable <tt>"
                , _var2
                , "</tt> to <tt>"
                , _var1
                , "</tt>"
                ]
        MsgCanBeOverlord {scriptMessageType = _type}
            -> mconcat
                [ "Can have "
                , _type
                , " [[subjects]]"
                ]
        MsgTrust {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at "
                , toMessage (plainNum _amt)
                , " [[trust]] with "
                , _whom
                ]
        MsgTechDifference {scriptMessageAmt = _amt} -- TODO: Better description when amount is negative
            -> mconcat
                [ "Is at least "
                , toMessage (Doc.pp_float _amt)
                , " "
                , toMessage (plural _amt "technology" "technologies")
                , " ahead"
                ]
        MsgThreat {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|world tension|1}} is "
                , _comp
                , " "
                , toMessage $ bold $ if _amt > 1 then plainPc _amt else reducedNum plainPc _amt
                ]
        MsgFascismCompare {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|fascism|1}} popularity is "
                , _comp
                , " "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgDemocraticCompare {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|democratic|1}} popularity is "
                , _comp
                , " "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgCommunismCompare {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|communism|1}} popularity is "
                , _comp
                , " "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgNeutralityCompare {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|neutrality|1}} popularity is "
                , _comp
                , " "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgAiAttitude {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ "The AI's attitude towards "
                , _whom
                , " is "
                , _icon
                , " "
                , _what
                ]
        MsgAnnexCountry {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Annex "
                , _whom
                , _what
                ]
        MsgDevelopmentInProvinces {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least {{icon|Development}} "
                , toMessage (plainNum _amt)
                , " development in owned provinces where:"
                ]
        MsgEstateLandShareEffect {scriptMessageAmt = _amt, scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ "The "
                , _icon
                , " "
                , _whom
                , " estate "
                , gainsOrLoses _amt
                , " "
                , toMessage (colourPcSign False _amt)
                , " share of the land"
                ]
        MsgEstateLandShareEffectAll {scriptMessageAmt = _amt}
            -> mconcat
                [ "Every estate "
                , gainsOrLoses _amt
                , " "
                , toMessage (colourPcSign False _amt)
                , " share of the land"
                ]
        MsgIsInFactionWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is in the same faction as "
                , _whom
                ]
        MsgIsJustifyingWargoalAgainst {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is justifying a {{icon|war goal|1}} against "
                , _whom
                ]
        MsgIsTradeLeagueLeader {scriptMessageYn = _yn}
            -> mconcat
                ["Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " the leader of a [[trade league]]"
                ]
        MsgInstitutionEnabled {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "The "
                , _icon
                , " "
                , _what
                , " institution is enabled"
                ]
        MsgCenterOfTrade {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Create a "
                , _icon
                , " level "
                , toMessage (bold (roundNum _amt))
                , " center of trade"
                ]
        MsgArmyStrength {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "Army strength is at least "
                , toMessage (plainNum _amt)
                , " times that of "
                , _whom
                ]
        MsgNavalStrength {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "Naval strength is at least "
                , toMessage (plainNum _amt)
                , " times that of "
                , _whom
                ]
        MsgHigherDevelopmentThan {scriptMessageWhat = _what}
            -> mconcat
                [ "Has higher development than "
                , _what
                ]
        MsgCrownlandShare {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainPc _amt)
                , " [[crown land]] ownership"
                ]
        MsgNumEstatePrivileges {scriptMessageIcon = _icon, scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "The "
                , _icon
                , " "
                , _whom
                , " estate has at least "
                , toMessage (plainNum _amt)
                , " privileges"
                ]
        MsgRemoveAdvisor {scriptMessageType = _type}
            -> mconcat
                [ _type
                , " advisor leaves the court"
                ]
        MsgAcceptVassalizationReasons {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Vassalizatation acceptance"
                ]
        MsgAdmAdvisorCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Administrative advisor cost"
                ]
        MsgAllPowerCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " All power costs"
                ]
        MsgAvailableProvinceLoot {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Available loot"
                ]
        MsgCavalryFire {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Cavalry fire"
                ]
        MsgChurchInfluenceModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum plainPcSign _amt)
                , " Clergy influence"
                ]
        MsgCountryAdminPower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Monthly administrative power"
                ]
        MsgCuriaPowersCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Curia powers cost"
                ]
        MsgDipAdvisorCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Diplomatic advisor cost"
                ]
        MsgExpandAdministrationCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Expand administration cost"
                ]
        MsgGarrisonGrowth {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Garrison growth"
                ]
        MsgGoverningCapacity {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Governing capacity"
                ]
        MsgGreatProjectUpgradeCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Great project upgrade cost"
                ]
        MsgHarmonizationSpeed {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Religious harmonization speed"
                ]
        MsgInfantryShock {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Infantry shock"
                ]
        MsgInstitutionSpreadFromTrueFaith {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Institution spread in true faith provinces"
                ]
        MsgJainsLoyaltyModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Jains loyalty equilibrium"
                ]
        MsgLandForcelimit {scriptMessageIcon = _, scriptMessageAmt = _amt}
            -> mconcat
                [ "Land force limit is at least "
                , toMessage (plainNum _amt)
                ]
        MsgLandForcelimitIncrease {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Land force limit"
                ]
        MsgLeaderCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Leader cost"
                ]
        MsgLocalBuildTime {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Local construction time"
                ]
        MsgLocalCoreCreation {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Local core-creation cost"
                ]
        MsgLocalSailors {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Sailor increase"
                ]
        MsgMercantilismCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Cost to promote mercantilism"
                ]
        MsgMigrationCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Migration cost"
                ]
        MsgMonarchAdminPower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Monarch administrative skill"
                ]
        MsgMonarchLifespan {scriptMessageAmt = _amt}
            -> mconcat
                [ toMessage (reducedNum (colourPcSign True) _amt)
                , " Average monarch lifespan"
                ]
        MsgMonthlyFederationFavorGrowth {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Monthly federation favor growth"
                ]
        MsgMonthlyKarma {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (bold (plainNumSign _amt))
                , " Monthly karma"
                ]
        MsgMonthlyMilitarizedSociety {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Militarization of state"
                ]
        MsgMonthlyReformProgressModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Monthly reform progress modifier"
                ]
        MsgMonthlySplendor {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Monthly splendor"
                ]
        MsgPromoteCultureCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Promote culture cost"
                ]
        MsgReducedLibertyDesireOnSameContinent {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourPcSign False (_amt * (-1)))
                , " Liberty desire in same continent subjects"
                ]
        MsgRivalChangeCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Change rival cost"
                ]
        MsgShipPowerPropagation {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Ship tradepower propagation"
                ]
        MsgStabilityCostToDeclareWar {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign False _amt)
                , " Stability hit to declare war"
                ]
        MsgSupplyLimitModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Supply limit modifier"
                ]
        MsgTradeValue {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Trade value"
                ]
        MsgTribalDevelopmentGrowth {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Tribal development growth"
                ]
        MsgWarTaxesCostModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " War taxes cost"
                ]
        MsgYearlyPatriarchAuthority {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Yearly patriarch authority"
                ]
        MsgHasGlobalModifierValue {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , _what
                , " is at least "
                , toMessage (plainNum _amt)
                ]
        MsgHasAnyGreatProject
            -> "Has any [[Great Project|great project]]"
        MsgHasAnyGreatProjectTier {scriptMessageAmt = _amt}
            -> mconcat
                [ "Any [[Great Project|great project]] is at least tier "
                , toMessage (plainNum _amt)
                ]
        MsgHasAnyMonument
            -> "Has any [[monument]]"
        MsgHasAnyMonumentTier {scriptMessageAmt = _amt}
            -> mconcat
                [ "Any [[monument]] is at least tier "
                , toMessage (plainNum _amt)
                ]
        MsgHasGreatProject {scriptMessageWhat = _what}
            -> mconcat
                [ "Has great project "
                , _what
                ]
        MsgHasGreatProjectTier {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Great project "
                , _what
                , " is at least tier "
                , toMessage (plainNum _amt)
                ]
        MsgSetGreatProjectTier {scriptMessageAmt = _amt, scriptMessageWhat = _what}
            -> mconcat
                [ "Set great project "
                , _what
                , " tier to be at least "
                , toMessage (plainNum _amt)
                ]
        MsgSetNationality {scriptMessageWhat = _what}
            -> mconcat
                [ "Set nationality to "
                , _what
                ]
        MsgSetNationalityChar {scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ "Set nationality of "
                , toMessage (iquotes _who)
                , " to "
                , _what
                ]
        MsgEstateRegency
            -> "Is in an estate regency"
        MsgEstateRegencyDuration {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has been in an estate regency for at least "
                , toMessage (plainNum _amt)
                , " "
                , toMessage (plural _amt "year" "years")
                ]
        MsgEstateRegencySpecific {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Is in a regency led by the "
                , _icon
                , " "
                , _what
                , " estate"
                ]
        MsgEstateRegencySpecificDur {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has been in a regency led by the "
                , _icon
                , " "
                , _what
                , " estate for at least "
                , toMessage (plainNum _amt)
                , " "
                , toMessage (plural _amt "year" "years")
                ]
        MsgHasAnyManufactory {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " any [[manufactory]]"
                ]
        MsgHighestValueTradeNode
            -> "Is the highest valued [[trade node]] in the world"
        MsgHasNumVassals {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , toMessage (plural _amt " vassal" " vassals")
                ]
        MsgYearlyKarmaDecay {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Yearly karma decay"
                ]
        MsgGuaranteedBy {scriptMessageWhom = _whom}
            -> mconcat
                [ "Guaranteed by "
                , _whom
                ]
        MsgHasGuaranteed {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has guaranteed "
                , _whom
                ]
        MsgPuppet {scriptMessageWhom = _whom}
            -> mconcat
                [ _whom
                , " becomes a subject of the current scope"
                ]
        MsgMissionCompleted {scriptMessageWhat = _what}
            -> mconcat
                [ "Has completed the mission "
                , toMessage (iquotes _what)
                ]
        MsgCompleteMission {scriptMessageWhat = _what}
            -> mconcat
                [ "Complete the mission "
                , toMessage (iquotes _what)
                ]
        MsgHasMission {scriptMessageWhat = _what}
            -> mconcat
                [ "Has the mission "
                , toMessage (iquotes _what)
                ]
        MsgHasNumberOfBuildingType {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , toMessage (plural _amt " province" " provinces")
                , " with a "
                , _icon
                , " "
                , _what
                ]
        MsgFederationSize {scriptMessageAmt = _amt}
            -> mconcat
                [ "The [[federation]] has at least "
                , toMessage (plainNum _amt)
                , toMessage (plural _amt " member" " members")
                ]
        MsgGrownByDevelopment {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Total develoment has increased by at least "
                , toMessage (plainNum _amt)
                ]
        MsgGrownByStates {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Number of states has increased by at least "
                , toMessage (plainNum _amt)
                ]
        MsgNumAdmirals {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , plural _amt " admiral" " admirals"
                ]
        MsgNumGenerals {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , plural _amt " general" " generals"
                ]
        MsgNumGeneralsWithTrait {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , plural _amt " general" " generals"
                , " with one or more trait"
                ]
        MsgShareOfStartingIncome {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Country's "
                , _icon
                , " monthly income has increased to "
                , toMessage (reducedNum plainPc _amt)
                , " of the starting monthly income"
                ]
        MsgNumNonTribSubjects { scriptMessageAmt = _amt }
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , " non-tributary "
                , plural _amt "subject" "subjects"
                ]
        MsgChangeGovernmentReformProgress {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " government reform progress"
                ]
        MsgTradeGoodsProduced {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Produces at least "
                , toMessage (plainNum _amt)
                , " "
                , _icon
                , " "
                , _what
                ]
        MsgProvinceSameReligion {scriptMessageWhom = _whom}
            -> mconcat
                [ "Province religion is same as "
                , _whom
                ]
        MsgProvinceReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Province religion is "
                , _icon
                , " "
                , _what
                ]
        MsgGrantEstatePrivilege {scriptMessageWhat = _what}
            -> mconcat
                [ "Grant the estate privilege "
                , toMessage (iquotes _what)
                ]
        MsgRemoveEstatePrivilege {scriptMessageWhat = _what}
            -> mconcat
                [ "Remove the estate privilege "
                , toMessage (iquotes _what)
                ]
        MsgNumTrustedAllies {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , plural _amt " ally" " allies"
                , " with 100 [[trust]]"
                ]
        MsgIsFederationLeader {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " the leader of a [[federation]]"
                ]
        MsgAverageUnrest {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Average "
                , _icon
                , " unrest in provinces is at least "
                , toMessage (plainNum _amt)
                ]
        MsgHasPillagedCapitalAgainst {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has pillaged the capital of "
                , _whom
                ]
        MsgIsIroquois {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " an Iroquois nation" -- TODO: Probably link somewhere on the wiki as this is a scripted trigger
                ]
        MsgMilitaryStrength {scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ "The country's military strength is at least "
                , toMessage (plainNum _amt)
                , " times that of "
                , _who
                ]
        MsgModifyTechSharingBonus {scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ "Modify technology sharing bonus "
                , _who
                , " by "
                , toMessage (reducedNum (colourPcSign True) _amt)
                ]
        MsgNumUnitsInProvince {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ _whom
                , " has at least "
                , toMessage (plainNum _amt)
                , " units in the province"
                ]
        MsgNativeSize {scriptMessageAmt = _amt}
            -> mconcat
                [ "Native population is at least "
                , toMessage (reducedNum plainNum _amt)
                ]
        MsgChangeNativeSize {scriptMessageAmt = _amt}
            -> mconcat
                [ "Province "
                , gainsOrLoses _amt
                , " "
                , toMessage (reducedNum plainNum _amt)
                , " native population"
                ]
        MsgNumTributaryStates {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , " tributary states"
                ]
        MsgIsThreat {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is threatened by "
                , _whom
                ]
        MsgGrantIndependence
            -> "The country becomes independent"
        MsgIsVassal {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a vassal"
                ]
        MsgIsPapalController {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " the [[papal controller]]"
                ]
        MsgIsFederationNation {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a member of a [[federation]]"
                ]
        MsgNumFederationAdvancements {scriptMessageAmt = _amt}
            -> mconcat
                [ "Number of [[federation]] advancements is at least "
                , toMessage (plainNum _amt)
                ]
        MsgHistoricalFriendWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is [[historical friend]] with "
                , _whom
                ]
        MsgHistoricalRivalWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is [[historical rival]] of "
                , _whom
                ]
        MsgAddHistoricalFriend {scriptMessageWhom = _whom}
            -> mconcat
                [ "Add "
                , _whom
                , " as a [[historical friend]]"
                ]
        MsgAddHistoricalRival {scriptMessageWhom = _whom}
            -> mconcat
                [ "Add "
                , _whom
                , " as a [[historical rival]]"
                ]
        MsgAddToFaction {scriptMessageWhom = _whom}
            -> mconcat
                [ "Add "
                , _whom
                , " to the current scope's faction"
                ]
        MsgRemoveHistoricalFriend {scriptMessageWhom = _whom}
            -> mconcat
                [ "Remove "
                , _whom
                , " as a [[historical friend]]"
                ]
        MsgRemoveHistoricalRival {scriptMessageWhom = _whom}
            -> mconcat
                [ "Remove "
                , _whom
                , " as a [[historical rival]]"
                ]
        MsgHasAnyEstates {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " any estates"
                ]
        MsgGovernmentReformProgress {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " Government reform progress saved up"
                ]
        MsgHumiliatedBy {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has been humiliated by "
                , _whom
                ]
        MsgCreateGuarantee {scriptMessageWhom = _whom}
            -> mconcat
                [ "Start guaranteeing "
                , _whom
                ]
        MsgCreateSubject {scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ "Make "
                , _whom
                , " a "
                , _what
                ]
        MsgHeirClaim {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Heir's "
                , _icon
                , " [[Heir claim|claim strength]] is at least "
                , toMessage (roundNum _amt)
                ]
        MsgExtendRegency {scriptMessageAmt = _amt}
            -> mconcat
                [ "Extend the regency by "
                , toMessage (roundNum _amt)
                , " years"
                ]
        MsgAddPowerProjection {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " {{icon|power projection}} "
                , toMessage (colourNumSign True _amt)
                , " power projection"
                ]
        MsgAddResource {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ addOrRemove _amt
                , " production of "
                , toMessage $ bold (plainNum _amt)
                , " "
                , _icon
                , " "
                , _what
                ]
        MsgAddPopularity {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage $ bold (reducedNum plainPcSign _amt)
                , " "
                , _icon
                , " "
                , _what
                , " party popularity"
                ]
        MsgRemoveCasusBelli {scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ "Remove casus belli "
                , _what
                , " against "
                , _whom
                ]
        MsgHasWonWarAgainst {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has won a war against "
                , _whom
                , " during the last "
                , toMessage (plainNum _amt)
                , " years"
                ]
        MsgChangePrice {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageName = _name, scriptMessageAmt = _amt, scriptMessageDays = _days }
            -> mconcat
                [ "The price of "
                , _icon
                , " "
                , _what
                , " changes "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " due to "
                , toMessage (iquotes _name)
                , " for "
                , toMessage (formatDays _days)
                ]
        MsgBuildRailway {scriptMessageAmt = _amt, scriptMessageStart = _start, scriptMessageEnd = _end}
            -> mconcat
                [ "Build a level "
                , toMessage (bold (plainNum _amt))
                , " {{icon|railway|1}} "
                , " from "
                , _start
                , " to "
                , _end
                ]
        MsgBuildRailwayProv {scriptMessageAmt = _amt, scriptMessageStartProv = _start, scriptMessageEndProv = _end}
            -> mconcat
                [ "Build a level "
                , toMessage (bold (plainNum _amt))
                , " {{icon|railway|1}} "
                , " from province ("
                , toMessage (roundNumNoSpace _start)
                , ") to province ("
                , toMessage (roundNumNoSpace _end)
                , ")"
                ]
        MsgBuildRailwayPath {scriptMessageAmt = _amt, scriptMessageWhat = _what}
            -> mconcat
                [ "Build a level "
                , toMessage (bold (plainNum _amt))
                , " {{icon|railway|1}} "
                , _what
                ]
        MsgCanBuildRailway {scriptMessageStart = _start, scriptMessageEnd = _end}
            -> mconcat
                [ "Can build {{icon|railway|1}} from "
                , _start
                , " to "
                , _end
                ]
        MsgCanBuildRailwayProv {scriptMessageStartProv = _start, scriptMessageEndProv = _end}
            -> mconcat
                [ "Can build {{icon|railway|1}} from province ("
                , toMessage (plainNum _start)
                , ") to province ("
                , toMessage (plainNum _end)
                , ")"
                ]
        MsgCreateNamedShip {scriptMessageText = _name, scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Create "
                , _icon
                , " "
                , _what
                , " named "
                , toMessage (iquotes _name)
                ]
        MsgCreateFlagShip {scriptMessageText = _name, scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Create a flagship of type "
                , _icon
                , " "
                , _what
                , " named "
                , toMessage (iquotes _name)
                ]
        MsgTradingPart {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has access to at least "
                , toMessage (reducedNum plainPc _amt)
                , " of the global "
                , _icon
                , " "
                , _what
                , " market"
                ]
        MsgGenerateTraitorAdvisor {scriptMessageSkill = _skill}
            -> mconcat
                [ "Get a random level "
                , toMessage (plainNum _skill)
                , " ''traitor'' advisor"
                ]
        MsgGenerateExileAdvisor {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Get a discounted ''exiled'' advisor of type "
                , _icon
                , " "
                , _what
                ]
        MsgOurScholarMatchesTheirSchool {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                ["Has a [[Muslim_denominations#Invite_a_Scholar|scholar]] from the "
                , _icon
                , " "
                , _what
                , " school"
                ]
        MsgHasScholar
            -> "Has any [[Muslim_denominations#Invite_a_Scholar|scholar]]"
        MsgRulerHasIslamModifier {scriptMessageWhat = _what, scriptMessageYn = _yn}
            -> mconcat
                [ "Ruler "
                , ifThenElseT _yn "has" "does ''not'' have"
                , " one of the "
                , toMessage (iquotes _what)
                , " islam modifiers"
                ]
        MsgSchoolOpinion {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "The school opinion of "
                , _whom
                , " is "
                , schoolOpinion _amt
                ]
        MsgSetProvinceName {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "Rename the province ("
                , toMessage (plainNum _amt)
                , ") to "
                , _whom
                ]
        MsgSetSchoolOpinion {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "Set school opinion of "
                , _whom
                , " to "
                , schoolOpinion _amt
                ]
        MsgSetVictoryPoints {scriptMessageAmt2 = _amt2, scriptMessageAmt = _amt}
            -> mconcat
                [ "Set {{icon|vp|1}} "
                , toMessage (plainNum _amt)
                , " to province ("
                , toMessage (roundNum _amt2)
                , ")"
                ]
        MsgStrengthRatio {scriptMessageWhom = _whom, scriptMessageCompare = _comp, scriptMessageAmt = _amt}
            -> mconcat
                [ _whom
                , " has "
                , _comp
                , toMessage (reducedNum plainPc _amt)
                , " of the number divisions than current scope's"
                ]
        MsgHasReligiousSchoolOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has the same religious school as "
                , _whom
                ]
        MsgHasSubject {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has "
                , _whom
                , " as a subject nation"
                ]
        MsgUsesPiety { scriptMessageYn = _yn }
            -> mconcat
                [ "The country "
                , ifThenElseT _yn "uses" "does ''not'' use"
                , " [[piety]]"
                ]
        MsgUsesDevotion { scriptMessageYn = _yn }
            -> mconcat
                [ "The country "
                , ifThenElseT _yn "uses" "does ''not'' use"
                , " [[devotion]]"
                ]
        MsgHasBorderWithReligiousEnemy
            -> "The country borders any country of a different religion"
        MsgHasSunniSchool
            -> "Uses one of the Sunni schools"
        MsgHasShiaSchool
            -> "Uses one of the Shia schools"
        MsgNewExiledRuler
            -> "Create an exiled ruler"
        MsgNewExiledRulerAttribs
            -> "Create an exiled ruler with the following attributes:"
        MsgExiledAs {scriptMessageWhat = _what}
            -> mconcat
                [ "Exiled as <tt>"
                , _what
                , "</tt>"
                ]
        MsgSetHeir {scriptMessageWhat = _what}
            -> mconcat
                [ "Make exiled heir <tt>"
                , _what
                , "</tt> the current heir"
                ]
        MsgSetCosmeticTag {scriptMessageWhat = _what}
            -> mconcat
                [ "Set cosmetic tag to <tt>"
                , _what
                , "</tt>"
                ]
        MsgSetRuler {scriptMessageWhat = _what}
            -> mconcat
                [ "Make exiled ruler <tt>"
                , _what
                , "</tt> the current ruler"
                ]
        MsgExileHeir {scriptMessageWhat = _what}
            -> mconcat
                [ "Exile current heir as <tt>"
                , _what
                , "</tt>"
                ]
        MsgExileRuler {scriptMessageWhat = _what}
            -> mconcat
                [ "Exile current ruler as <tt>"
                , _what
                , "</tt>"
                ]
        MsgClearExiledRuler {scriptMessageWhat = _what}
            -> mconcat
                [ "Remove exiled ruler <tt>"
                , _what
                , "</tt>"
                ]
        MsgExiledRulerSameDynastyAsCurrent {scriptMessageWhat = _what}
            -> mconcat
                [ "Exiled ruler <tt>"
                , _what
                , "</tt> has the same dynasty as the current ruler"
                ]
        MsgHasFocusTree {scriptMessageWhat = _what}
            -> mconcat
                [ "Hast the focus tree <tt>"
                , _what
                , "</tt>"
                ]
        MsgAddAutonomyRatio {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , if T.null _what then "" else " (" <> italicText _what <> ")"
                , " "
                , toMessage (bold (reducedNum plainPc _amt))
                , " {{icon|autonomy|1}} progress"
                ]
        MsgAddGreatProjectTier {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Add great project "
                , _what
                , " of tier "
                , toMessage (roundNum _amt)
                ]
        MsgWarscoreAgainst {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "The country has at least "
                , toMessage (colourNumSign True _amt)
                , " warscore against "
                , _whom
                ]
        MsgBorderDistance {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "Border distance to "
                , _whom
                , " is at least "
                , toMessage (plainNum _amt)
                ]
        MsgAddNamedUnrest {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Add {{icon|local unrest}} "
                , toMessage (colourNumSign False _amt)
                , " unrest due to "
                , toMessage (iquotes _what)
                ]
        MsgCheckEstateRevoltSize {scriptMessageYn = _yn, scriptMessageWhat = _what}
            -> mconcat
                [ "A "
                , ifThenElseT _yn "large" "small" -- TODO: The difference isn't actually that large
                , " number of provinces proportional to the country size has the <tt>"
                , _what
                , "</tt> modifier"
                ]
        MsgHasLeaderWith
            -> "Has leader with:"
        MsgHasMonarchLeaderWith
            -> "Has monarch leader with:"
        MsgHasGeneralWith {scriptMessageIcon = _icon}
            -> mconcat
                [ "Has "
                , _icon
                , " general with:"
                ]
        MsgHasAdmiralWith {scriptMessageIcon = _icon}
            -> mconcat
                [ "Has "
                , _icon
                , " admiral with:"
                ]
        MsgTotalPips {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (roundNum _amt)
                , " [[pips]]"
                ]
        MsgAddLootFromRichProvince {}
            -> "Province gains {{icon|devastation|24px}}{{red|80}} devastation. Looter gets money and {{icon|mil|24px}} military power proportional to city size"
        MsgSetAiAttitude {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageWhom = _whom, scriptMessageYn = _yn}
            -> mconcat
                [ ifThenElseT _yn "Lock" "Set"
                , " the AI's attitude towards "
                , _whom
                , " to "
                , _icon
                , " "
                , _what
                ]
        MsgSetAutonomy {scriptMessageWho = _who, scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt, scriptMessageWar = _war}
            -> mconcat
                [ "Set autonomy level of "
                , _who
                , " to "
                , _icon
                , " "
                , _what
                , if _amt > 0 then " at {{icon|autonomy|1}} " else ""
                , if _amt > 0 then toMessage (reducedNum plainPc _amt) else ""
                , _war
                ]
        MsgSetPolitics {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageMonths = _months}
            -> mconcat
                [ "Set the ruling party to "
                , _icon
                , " "
                , _who
                , if _months > 0 then " with elections every " else ""
                , if _months > 0 then formatMonths _months else ""
                ]
        MsgStartCivilWar {scriptMessageWhat = _what, scriptMessageAmtText = _amtT}
            -> mconcat
                [ "Start a {{icon|"
                , _what
                , "}} "
                , _what
                , " civil war ("
                , _amtT
                , " size)"
                ]
        MsgSetPartyName {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ "Set the {{icon|"
                , _icon
                , "}} "
                , _icon
                , " party name to ("
                , _who
                , ") "
                , _what
                ]
        MsgRegion
            -> "All provinces in this region:"
        MsgAddDisasterProgress {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Add "
                , toMessage (colourPcSign False _amt)
                , " progress to the "
                , _icon
                , " "
                , _what
                , " disaster"
                ]
        MsgYearsInUnionUnder {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "The country has been in a [[personal union]] under "
                , _whom
                , " for at least "
                , toMessage (plainNum _amt)
                , " years"
                ]
        MsgHasAnyHolyOrder
            -> "Has established any holy order"
        MsgHasHolyOrder {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has established "
                , _icon
                , " "
                , _what
                , " holy order"
                ]
        MsgNativePolicy {scriptMessageWhat = _what}
            -> mconcat
                [ "Native policy is set to "
                , _what
                ]
        MsgCanEstablishHolyOrder {scriptMessageYn = _yn}
            -> mconcat
                [ "Can"
                , ifThenElseT _yn "" " ''not''"
                , " establish holy orders"
                ]
        MsgEndIncident {scriptMessageWhat = _what}
            -> mconcat
                [ "End the "
                , toMessage (iquotes _what)
                , " incident"
                ]
        MsgIsIncidentActive {scriptMessageWhat = _what}
            -> mconcat
                [ "The "
                , toMessage (iquotes _what)
                , " incident is active"
                ]
        MsgHasIncidentHappened {scriptMessageWhat = _what}
            -> mconcat
                [ "The "
                , toMessage (iquotes _what)
                , " incident has ended"
                ]
        MsgIsIncidentPossible {scriptMessageWhat = _what}
            -> mconcat
                [ "The "
                , toMessage (iquotes _what)
                , " incident is possible"
                ]
        MsgIsInTechSharingGroup {scriptMessageWhat = _what}
            -> mconcat
                [ "Is in the technology sharing group "
                , toMessage (iquotes _what)
                ]
        MsgAddToTechSharingGroup {scriptMessageWhat = _what}
            -> mconcat
                [ "Add to the technology sharing group "
                , toMessage (iquotes _what)
                ]
        MsgNumStreltsy {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , " streltsy regiments"
                ]
        MsgSetPersonalDiety {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Choose "
                , _icon
                , " "
                , _what
                , " as personal deity"
                ]
        MsgHasPersonalDiety {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ _icon
                , " "
                , _what
                , " has been chosen as personal deity"
                ]
        MsgNumAspects {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has activated at least "
                , toMessage (plainNum _amt)
                , toMessage (plural _amt " Aspect" " Aspects")
                , " of Faith"
                ]
        MsgInstitutionPresence {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , _what
                , " institution is at least "
                , toMessage (plainPc _amt)
                , " present"
                ]
        MsgKnowsCountry {scriptMessageWhom = _whom}
            -> mconcat
                [ "Knows about "
                , _whom
                ]
        MsgIsTerritory {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " a territory"
                ]
        MsgIsStateCore {scriptMessageWhat = _what}
            -> mconcat
                [ "Is a core state of "
                , _what
                ]
        MsgChurchPower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " church power"
                ]
        MsgHasChurchAspect {scriptMessageWhat = _what}
            -> mconcat
                ["Has the "
                , _what
                , " Aspect of Church"
                ]
        MsgCreateUnion {scriptMessageWhom = _whom}
            -> mconcat
                [ "Make "
                , _whom
                , " a junior partner in a personal union"
                ]
        MsgCreateVassal {scriptMessageWhom = _whom}
            -> mconcat
                [ "Make "
                , _whom
                , " a vassal"
                ]
        MsgCreateMarch {scriptMessageWhom = _whom}
            -> mconcat
                [ "Make "
                , _whom
                , " a march"
                ]
        MsgHighestSupplyLimitInArea
            -> "Has the highest supply limit in the area"
        MsgStartEstateAgenda {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Start an agenda for the "
                , _icon
                , " "
                , _what
                , " estate"
                ]
        MsgPickRandomEstateIfPresent {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Pick a random estate that's present and doesn't have the flag "
                , _whom
                , " and perform the action <tt>"
                , _what
                , "</tt>"
                ]
        MsgHasRule {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Rule "
                , _whom
                , " is set to <tt>"
                , _what
                , "</tt>"
                ]
        MsgHasAnyActiveEstateAgenda {scriptMessageYn = _yn}
            -> mconcat
                [ ifThenElseT _yn "Has" "Does ''not'' have"
                , " an active estate agenda"
                ]
        MsgClearEstateAgendaCache {scriptMessageWhom = _whom}
            -> mconcat
                [ "Clear estate agenda cache for "
                , _whom
                ]
        MsgNativeFerocity {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Native ferocity is at least "
                , toMessage (plainNum _amt)
                ]
        MsgNativeAggressiveness {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Native aggressiveness is at least "
                , toMessage (plainNum _amt)
                ]
        MsgChangeNativeFerocity {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Native population "
                , gainsOrLoses _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum False _amt)
                , " ferocity"
                ]
        MsgChangeNativeAggressiveness {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Native population "
                , gainsOrLoses _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum False _amt)
                , " aggressiveness"
                ]
        MsgExpulsionTarget {scriptMessageWhat = _what}
            -> mconcat
                [ "Expelling minorities to "
                , _what
                ]
        MsgHasSupportLoyalists {scriptMessageYn  = _yn}
            -> mconcat
                [ "Support loyalists is "
                , ifThenElseT _yn "enabled" "disabled"
                ]
        MsgHasSubsidizeArmies {scriptMessageYn  = _yn}
            -> mconcat
                [ "Subsidize armies is "
                , ifThenElseT _yn "enabled" "disabled"
                ]
        MsgHasNewDynasty {scriptMessageYn  = _yn}
            -> mconcat
                [ "The country "
                , ifThenElseT _yn "has" "does ''not'' have"
                , " a new dynasty"
                ]
        MsgHasOffensiveWar {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "" "''not''")
                , " in a offensive war"
                ]
        MsgHasSendOfficers {scriptMessageYn  = _yn}
            -> mconcat
                [ "Send officers is "
                , ifThenElseT _yn "enabled" "disabled"
                ]
        MsgHasEmbargoRivals {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " embargoing overlord's rivals"
                ]
        MsgHasDivertTrade {scriptMessageYn  = _yn}
            -> mconcat
                [ "Divert trade is "
                , ifThenElseT _yn "enabled" "disabled"
                ]
        MsgHasScutage {scriptMessageYn  = _yn}
            -> mconcat
                [ "Scutage is "
                , ifThenElseT _yn "enabled" "disabled"
                ]
        MsgIsMarch {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " a march"
                ]
        MsgIsMajor {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " a Major country"
                ]
        MsgIsSubjectOtherThanTributary
            -> "Is a non-tributary subject"
        MsgSpawnScaledRebels {scriptMessageRtype = _rtype, scriptMessageLeader = _leader, scriptMessageYn = _large}
            -> mconcat
                [ _rtype
                , " rise in a "
                , ifThenElseT _large "large" "small"
                , " revolt scaled by total development"
                , _leader
                ]
        MsgCreateIndependentEstate {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageDesc = _desc, scriptMessageYn = _play_as}
            -> mconcat
                [ _icon
                , " "
                , _what
                , " estate declares independence, forming their own nation"
                , _desc
                , "."
                , ifThenElseT _play_as " The human player takes over this new country." ""
                ]
        MsgHasLeaders {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageDesc = _desc, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " "
                , _what
                , toMessage (plural _amt "" "s")
                , _desc
                ]
        MsgScaledEstateLandShareEffect {scriptMessageYn = _gain, scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "The "
                , _icon
                , " "
                , _what
                , " estate "
                , ifThenElseT _gain "gain" "lose"
                , " a share of land proportional to the country's total development"
                ]
        MsgProvinceDistance {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "Province distance to "
                , _whom
                , " is at least "
                , toMessage (plainNum _amt)
                ]
        MsgNumOfReligionSecondary {scriptMessageAmt = _amt}
            -> mconcat
                [ "Syncretic faith is above "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgCreateSuccessionCrisis {scriptMessageAttacker = _attacker, scriptMessageDefender = _defender, scriptMessageWhom = _whom}
            -> mconcat
                [ "Create succession crisis for "
                , _whom
                , " with "
                , _attacker
                , " as attacker and "
                , _defender
                , " as defender"
                ]
        MsgDate {scriptMessageCompare = _comp, scriptMessageDate = _date}
            -> mconcat
                [ "The date is "
                , _comp
                , " "
                , _date
                ]
        MsgDefinerLeaderToRuler
            -> "Make leader into a ruler with the following attributes:"
        MsgChangeSubjectType {scriptMessageType = _type}
            -> mconcat
                [ "Change subject type to "
                , _type
                ]
        MsgRemoveTradeModifier {scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ "Remove trade modifier "
                , toMessage (quotes _what)
                , " for "
                , _whom
                ]
        MsgSendEquipment {scriptMessageAmtT = _amtT, scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ "Send "
                , _amtT
                , " "
                , _what
                , " to "
                , _whom
                ]
        MsgHasTradeCompanyInvestmentInState {scriptMessageWhom = _whom}
            -> mconcat
                [ _whom
                , " has a trade company investment in a state (only one per state counts)"
                ]
        MsgRandomListTrigger
            -> "Only considered if:"
        MsgRandomListModifier {scriptMessageAmt = _amt}
            -> mconcat
                [ "Chance increases '''x "
                , toMessage (plainNum _amt)
                , "''' if:"
                ]
        MsgRandomListAddModifier {scriptMessageAmt = _amt}
            -> mconcat
                [ "Chance base weight changes by '''"
                , toMessage (plainNumSign _amt)
                , "''' if:"
                ]
        MsgOwnOrNonTribSubjectDevelopment {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Own or non-tributary subject "
                , _icon
                , " development is at least "
                , toMessage (plainNum _amt)
                ]
        MsgOwnOrNonTribSubjectDevelopmentAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ "Own or non-tributary subject "
                , _icon
                , " development is at least that of "
                , _whom
                ]
        MsgHasOneOfBuildings {scriptMessageYn = _yn, scriptMessageWhat = _what}
            -> mconcat
                [ ifThenElseT _yn "Has" "Does ''not'' have"
                , " one of the following buildings: "
                , _what
                ]
        MsgNumBuildings {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , plural _amt " building" " buildings"
                ]
        MsgTradeCompanyRegion {scriptMessageWhat = _what}
            -> mconcat
                [ "Is in the "
                , _what
                , " trade company region"
                ]
        MsgUnlockDecisionCategoryTooltip {scriptMessageWhat = _what}
            -> mconcat
                [ "Unlock the "
                , _what
                , " decisions"
                ]
        MsgPreferredEmperor {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is voting for "
                , _whom
                , " to become Emperor of the HRE"
                ]
        MsgCurrentIcon {scriptMessageIcon = _icon, scriptMessageWhom = _what}
            -> mconcat
                [ "Has commissioned "
                , _icon
                , " "
                , _what
                ]
        MsgUsesIcons {scriptMessageYn = _yn}
            -> mconcat
                [ ifThenElseT _yn "Uses" "Does ''not'' use"
                , " [[icons]]"
                ]
        MsgPatriarchAuthority {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Patriarch authority is at least "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgIsRevolutionTarget {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " the [[revolution target]]"
                ]
        MsgRevolutionaryZeal {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Revolutionary zeal is at least "
                , toMessage (plainNum _amt)
                ]
        MsgSameGovtAsRoot
            -> "Has the same government type as our country"
        MsgOverrideCountryName {scriptMessageWhat = _what}
            -> mconcat
                [ "Country's name changes to "
                , toMessage (quotes _what)
                ]
        MsgFervor {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " fervor"
                ]
        MsgHasFlagship {scriptMessageYn = _yn}
            -> mconcat
                [ ifThenElseT _yn "Has" "Does ''not'' have"
                , " a flagship"
                ]
        MsgIsCapitalOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is the capital of "
                , _whom
                ]
        MsgIsProductionLeader {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Is the leading producer of "
                , _icon
                , " "
                , _what
                ]
        MsgInnovativeness {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " innovativeness"
                ]
        MsgStartHREIncident {scriptMessageWhat = _what}
            -> mconcat
                [ "Start the Imperial Incident "
                , toMessage (iquotes _what)
                ]
        MsgIsForeignCompany {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a foreign mercenary company"
                ]
        MsgHasStatePatriach {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " a state patriach"
                ]
        MsgHasForeignConsort {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " a foreign consort"
                ]
        MsgSwapFreeIdeaGroup
            -> "Swap to the new [[national ideas]]"
        MsgUsesDoom {scriptMessageYn = _yn}
            -> mconcat
                [ ifThenElseT _yn "Uses" "Does ''not'' use"
                , " [[doom]]"
                ]
        MsgAverageAutonomy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Average autonomy is at least "
                , toMessage (plainPc _amt)
                ]
        MsgPowerProjection {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Power projection is at least "
                , toMessage (plainPc _amt)
                ]
        MsgElector {scriptMessageYn = _yn}
            -> mconcat
                [ "The country is "
                , ifThenElseT _yn "made" "removed as"
                , " an elector of the HRE"
                ]
        MsgNumOfWarReparations {scriptMessageAmt = _amt}
            -> mconcat
                [ "Receiving war reparations from at least "
                , toMessage (plainNum _amt)
                , plural _amt " country" " countries"
                ]
        MsgNumOfHiredMercCompanies {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has hired at least "
                , toMessage (plainNum _amt)
                , " mercenary "
                , plural _amt "company" "companies"
                ]
        MsgNumOfForeignHREProvinces {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (plainNum _amt)
                , " HRE "
                , plural _amt "province is" "provinces are"
                , " owned by non-member states or subjects of non-member states"
                ]
        MsgNumOfStates {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , plural _amt " state" " states"
                ]
        MsgNumOfExplorers {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , plural _amt " explorer" " explorers"
                ]
        MsgNumOfConquistadors {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , plural _amt " conquistador" " conquistadors"
                ]
        MsgNumOfBanners {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " banner "
                , plural _amt "unit" "units"
                ]
        MsgMonthlyADM {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                ["Gains at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " administrative power per month"
                ]
        MsgMonthlyDIP {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                ["Gains at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " diplomatic power per month"
                ]
        MsgMonthlyMIL {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                ["Gains at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " military power per month"
                ]
        MsgAnyActiveImperialIncident
            -> "Any active imperial incident"
        MsgMaxSailors {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " maximum sailors"
                ]
        MsgInGoldenAge {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " in a golden age"
                ]
        MsgHasHadGoldenAge {scriptMessageYn  = _yn}
            -> mconcat
                [ "Has"
                , ifThenElseT _yn "" " ''not''"
                , " had a golden age"
                ]
        MsgHasTrader {scriptMessageWhom = _whom}
            -> mconcat
                [ _whom
                , " has an active [[merchant]] in the trade node"
                ]
        MsgArtilleryFraction {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "The ratio of "
                , _icon
                , " artillery to total army size is at least "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgCavalryFraction {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "The ratio of "
                , _icon
                , " cavalry to total army size is at least "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgLightShipFraction {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "The ratio of "
                , _icon
                , " light ships to total navy size is at least "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgProsperity {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Prosperity is at least "
                , toMessage (plainPc _amt)
                ]
        MsgIsProsperous {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " prosperous"
                ]
        MsgIsPuppet {scriptMessageYn = _yn}
            -> mconcat
                [ "Is "
                , ifThenElseT _yn " a subject" "fully independent"
                ]
        MsgNumElectors {scriptMessageAmt = _amt}
            -> mconcat
                [ "The HRE has at least "
                , toMessage (plainNum _amt)
                , plural _amt " elector" " electors"
                ]
        MsgHarmony {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " harmony"
                ]
        MsgTradeEmbargoing {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is embargoing "
                , _whom
                ]
        MsgTotalBaseTax {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Total base tax is at least "
                , toMessage (plainNum _amt)
                ]
        MsgSuccessionClaim {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has claimed the throne of "
                , _whom
                ]
        MsgHegemonStrength {scriptMessageAmt = _amt}
            -> mconcat
                [ "Hegemon power is at least "
                , toMessage (plainPc _amt)
                ]
        MsgHasActiveFervor {scriptMessageYn = _yn}
            -> mconcat
                [ ifThenElseT _yn "Has" "Does ''not'' have "
                , " any fervor effect active"
                ]
        MsgNumCentersOfTrade {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , " centers of trade"
                ]
        MsgNumDiplomaticRelations {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , " diplomatic relations"
                ]
        MsgNumHarmonized {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has harmonized with at least "
                , toMessage (plainNum _amt)
                , " religions or religious groups"
                ]
        MsgNumRajput {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , " rajput regiments"
                ]
        MsgNumTimesImproved {scriptMessageAmt = _amt}
            -> mconcat
                [ "Province has been developed at least "
                , toMessage (plainNum _amt)
                , plural _amt " time" " times"
                ]
        MsgNumTimesImprovedByOwner {scriptMessageAmt = _amt}
            -> mconcat
                [ "Province has been developed at least "
                , toMessage (plainNum _amt)
                , plural _amt " time" " times"
                , " by its owner"
                ]
        MsgIsHarmonizingWith {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Is currently harmonizing with "
                , _icon
                , " "
                , _what
                ]
        MsgHasHarmonizedWith {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has harmonized with "
                , _icon
                , " "
                , _what
                ]
        MsgNumTimesUsedTransferDevelopment {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has concentrated development at least "
                , toMessage (plainNum _amt)
                , plural _amt " time" " times"
                ]
        MsgProvinceHasCurrentTechFort {scriptMessageYn = _yn}
            -> mconcat
                [ ifThenElseT _yn "Has" "Does ''not'' have"
                , " the highest level fort available"
                ]
        MsgHasMostProvinceTradePower {scriptMessageWhom = _whom}
            -> mconcat
                [ _whom
                , " has the most amount of trade power in the node"
                ]
        MsgHasNonAggressionPactWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has a {{icon|nap|1}} with "
                , _whom
                ]
        MsgHasOffensiveWarWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is in a offensive war against "
                , _whom
                ]
        MsgAddDynamicModifier {scriptMessageWhat = _what, scriptMessageWho = _who, scriptMessageDaysText = _days}
            -> mconcat
                [ "Add dynamic modifier "
                , _what
                , " to "
                , _who
                , if T.null _days then "" else " for "
                , _days
                , " providing the following effects:"
                ]
        MsgHasInfluencingFort {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " in Zone of Control of a fort"
                ]
        MsgIsInCoalition {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " in a coalition"
                ]
        MsgChangeController {scriptMessageWhom = _whom}
            -> mconcat
                [ "Change province controller to "
                , _whom
                ]
        MsgIsExcommunicated {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " excommunicated"
                ]
        MsgIsFactionLeader {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " leader of a faction"
                ]
        MsgExcommunicate {scriptMessageWhom = _whom}
            -> mconcat
                [ "Excommunicate "
                , _whom
                ]
        MsgChangeConsortSameCulture {scriptMessageWhom = _whom}
            -> mconcat
                [ "Change consort culture to that of "
                , _whom
                ]
        MsgChangeConsortCulture {scriptMessageWhat = _what}
            -> mconcat
                [ "Change consort culture to "
                , _what
                ]
        MsgChangeHeirSameCulture {scriptMessageWhom = _whom}
            -> mconcat
                [ "Change heir culture to that of "
                , _whom
                ]
        MsgChangeHeirCulture {scriptMessageWhat = _what}
            -> mconcat
                [ "Change heir culture to "
                , _what
                ]
        MsgChangeRulerSameCulture {scriptMessageWhom = _whom}
            -> mconcat
                [ "Change ruler culture to that of "
                , _whom
                ]
        MsgChangeRulerCulture {scriptMessageWhat = _what}
            -> mconcat
                [ "Change ruler culture to "
                , _what
                ]
        MsgConsortCultureIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Consort's culture is "
                , _what
                ]
        MsgConsortCultureIsSame {scriptMessageWhom = _whom}
            -> mconcat
                [ "Consort's culture is the same as "
                , _whom
                ]
        MsgHeirCultureIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Heir's culture is "
                , _what
                ]
        MsgHeirCultureIsSame {scriptMessageWhom = _whom}
            -> mconcat
                [ "Heir's culture is the same as "
                , _whom
                ]
        MsgHasFemaleConsort {scriptMessageYn = _yn}
            -> mconcat
                [ ifThenElseT _yn "Has" "Does ''not'' have"
                , " a female consort"
                ]
        MsgConsortAge {scriptMessageAmt = _amt}
            -> mconcat
                [ "Consort is at least "
                , toMessage (plainNum _amt)
                , " years old"
                ]
        MsgIsOriginOfConsort {scriptMessageWhat = _what}
            -> mconcat
                [ "The country's consort is from "
                , _what
                ]
        MsgIsOwnedAndControlledBy {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is owned and controlled by "
                , _whom
                ]
        MsgIsPuppetOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is a subject of "
                , _whom
                ]
        MsgRemoveConsort
            -> "Contry's consort is removed"
        MsgClearRebels
            -> "All rebels are removed from the province"
        MsgMonthsSinceDefection {scriptMessageAmt = _amt}
            -> mconcat
                [ "It has been at least "
                , toMessage (formatMonths _amt)
                , " since the province defected"
                ]
        MsgNumJanissaries {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , " janissary regiments"
                ]
        MsgJanissaryPercentage {scriptMessageAmt = _amt}
            -> mconcat
                [ "The ratio of janissary regiments to total army size is at least "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgBreakUnion {scriptMessageWhom = _whom}
            -> mconcat
                [ "Break personal union with "
                , _whom
                ]
        MsgCreateMarriage {scriptMessageWhom = _whom}
            -> mconcat
                [ "Gain royal marriage with "
                , _whom
                ]
        MsgAddTradeNodeIcome {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (plainNum _amt)
                , " months worth of income from the trade node"
                ]
        MsgYearlyCorruptionIncrease {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Yearly corruption increase is at least "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgWasNeverGermanReigionalTag
            -> "Was never a [[Formable_countries#German_regional_tags|german regional tag]]"
        MsgReformLevel {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , " government reforms"
                ]
        MsgHasWargoalAgainst {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has a {{icon|war goal|1}} against "
                , _whom
                ]
        MsgHasWargoalAgainstType {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Has a {{icon|war goal}} "
                , _what
                , " war goal against"
                , _whom
                ]
        MsgIsSupportingIndependenceOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is supporting the independence of "
                , _whom
                ]
        MsgFormCoalitionAgainst {scriptMessageWhom = _whom}
            -> mconcat
                [ "Form a coalition against "
                , _whom
                ]
        MsgProvincesOnCapitalContinentOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has a province on the continent with the capital of "
                , _whom
                ]
        MsgExpellingMinorities {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " expelling minorities"
                ]
        MsgHasOrBuildingFlagship {scriptMessageYn  = _yn}
            -> mconcat
                [ ifThenElseT _yn "Has or is building" "Doesn't have and is not building"
                , " a flagship"
                ]
        MsgRecentTreasureShipPassage {scriptMessageYn  = _yn}
            -> mconcat
                [ "A [[treasure fleet]] has"
                , ifThenElseT _yn "" " ''not''"
                , " recently passed by"
                ]
        MsgNewEstateRegency {scriptMessageIcon = _icon, scriptMessageWho = _who}
            -> mconcat
                [ "A new regent from the "
                , _icon
                , " "
                , _who
                , " estate comes to power"
                ]
        MsgEstateLedRegencyInfluence {scriptMessageAmt = _amt}
            -> mconcat
                [ "The estate leading the regency has at least "
                , toMessage (plainNum _amt)
                , " influence"
                ]
        MsgEstateLedRegencyLoyalty {scriptMessageAmt = _amt}
            -> mconcat
                [ "The estate leading the regency has at least "
                , toMessage (plainNum _amt)
                , " loyalty"
                ]
        MsgSetEstateLedRegencyPrivilegeRandom
            -> "Grant the estate leading the regency a random privilege"
        MsgTradeNode {scriptMessageWhat = _what}
            -> mconcat
                [ _what
                , " trade node:"
                ]
        MsgGlobalHeathenMissionaryStrength {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Missionary strength vs heathens"
                ]
        MsgManpowerInTrueFaithProvinces {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Manpower in true faith provinces"
                ]
        MsgYearlyDoomReduction {scriptMessageAmt = _amt}
            -> mconcat
                [ toMessage (colourNumSign True _amt)
                , " Yearly doom reduction"
                ]
        MsgBlockadeForceRequired {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Blockade force required"
                ]
        MsgFreeCityImperialAuthority {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Imperial authority from free cities"
                ]
        MsgHostileDisembarkSpeed {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Hostile disembark time"
                ]
        MsgLocalReligiousUnityContribution {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Local religious unity contribution"
                ]
        MsgAllEstateLoyaltyEquilibrium {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " All estates' loyalty equilibrium"
                ]
        MsgGlobalManpower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Manpower increase"
                ]
        MsgGlobalProsperityGrowth {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Global prosperity growth"
                ]
        MsgHostileFleetAttrition {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Hostile fleet attrition"
                ]
        MsgLocalGoldDepletionChanceModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Local gold depletion chance modifier"
                ]
        MsgLocalGreatProjectUpgradeCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Local great project upgrade cost"
                ]
        MsgLocalHostileAttrition {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Attrition for enemies"
                ]
        MsgLocalManpower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True (_amt * 1000))
                , " Local manpower increase"
                ]
        MsgLocalProsperityGrowth {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Local prosperity growth"
                ]
        MsgLocalYearsOfNationalism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign False _amt)
                , " Years of separatism"
                ]
        MsgMinLocalAutonomy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign False _amt)
                , " Minimum local autonomy"
                ]
        MsgMonthlyGoldInflationModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Monthly gold inflation modifier"
                ]
        MsgMonthlyHeirClaimIncrease {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Monthly heir claim increase"
                ]
        MsgMoveCapitalCostModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Move capital cost modifier"
                ]
        MsgPrestigePerDevelopmentFromConversion {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Prestige per development from missionary"
                ]
        MsgStateGoverningCost {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " States governing cost"
                ]
        MsgToleranceOfHeathensCapacity {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Maximum tolerance of heathens"
                ]
        MsgYearlyAuthority {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Yearly authority"
                ]

        MsgColonyMissionReward {scriptMessageProv = _prov}
            -> mconcat
                [ _prov
                , ": If uncolonized, gain a siberian frontier colony with 400 settlers (+1/+1/+1 development if the ''“Higher Developed Colonies”'' age ability is unlocked), if owned gain +1/+1/+1 development, otherwise gain a permanent claim."
                ]
        MsgClearPreviousPrimaryCults
            -> "Remove selected primary cult"
        MsgNumUnlockedCults {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has unlocked at least "
                , toMessage (plainNum _amt)
                , plural _amt " cult" " cults"
                ]
        MsgHasPrimaryCult {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has "
                , _icon
                , " "
                , _what
                , " as primary cult"
                ]
        MsgChangeCult {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Change cult to "
                , _icon
                , " "
                , _what
                ]
        MsgSelectPrimaryCult {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Select "
                , _icon
                , " "
                , _what
                , " as primary cult"
                ]
        MsgChangePrimaryCult {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Change primary cult to "
                , _icon
                , " "
                , _what
                ]
        MsgUnlockEstatePrivilege {scriptMessageWhat = _what}
            -> mconcat
                [ "Unlock the "
                , toMessage (iquotes _what)
                , " estate privilege"
                ]
        MsgKillUnits {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ _who
                , " loses "
                , toMessage (plainNum _amt)
                , " "
                , _icon
                , " "
                , _what
                , plural _amt " unit" " units"
                ]
        MsgConstructBuilding {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageSpeed = _speed, scriptMessageCost = _cost}
            -> mconcat
                [ "Start building "
                , _icon
                , " "
                , _what
                , " at "
                , toMessage (reducedNum plainPc _cost)
                , " of normal cost, taking "
                , toMessage (reducedNum plainPc _speed)
                , " of normal time"
                ]
        MsgAddBuildingConstruction {scriptMessageIcon = _icon, scriptMessageWhat = _type, scriptMessageAmt = _amt, scriptMessageVar = _var, scriptMessageProv = _prov}
            -> mconcat
                [ "Add "
                , boldText $ if _var == "" then toMessage (plainNum _amt) else _var
                , " "
                , _icon
                , " "
                , _type
                ,_prov
                ]
        MsgAllowBaselineInviteScholar {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Allow to invite a scholar of the "
                , _icon
                , " "
                , _what
                , " school without diplomatic relations"
                ]
        MsgRemoveBuilding {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Remove "
                , _icon
                , " "
                , _what
                , " by up to "
                , toMessage (colourNumSign True (negate _amt))
                ]
        MsgRemoveLoot {scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ _who
                , " gets "
                , toMessage (plainPc _amt)
                , " of the loot from the province"
                ]
        MsgSwitchTag {scriptMessageWho = _who}
            -> mconcat
                [ "The human player plays as "
                , _who
                ]
        MsgMonthlyPietyAccelerator {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True (_amt * 100))
                , " Monthly piety accelerator"
                ]
        MsgMovementSpeedInFleetModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Fleet movement speed"
                ]
    renderMessage _ _ _ = error "Sorry, non-English localisation not yet supported."

-- FIXME: What's the significance of this?
ancestorText :: Bool -> Text
ancestorText False = ""
ancestorText True  = "<!-- ancestor -->"

schoolOpinion :: Double -> Text
schoolOpinion (-1) = "negative"
schoolOpinion  0   = "neutral"
schoolOpinion  1   = "postive"
schoolOpinion val  = "(Unknown <> " <> T.pack (show val) <> ")"

-- | Message paired with an indentation level.
type IndentedMessage = (Int, ScriptMessage)
-- | List of messages, paired with their respective indentation levels.
type IndentedMessages = [IndentedMessage]

-- | Convenience synonym.
type StatementHandler g m = GenericStatement -> PPT g m IndentedMessages

-- | Convert a single message to Text.
messageText :: (IsGameData (GameData g), Monad m) => ScriptMessage -> PPT g m Text
messageText msg = do
    mlangs <- getLangs
    return $ renderMessage Script mlangs msg

-- | Convert a single message to Doc.
message :: (IsGameData (GameData g), Monad m) => ScriptMessage -> PPT g m Doc
message msg = Doc.strictText <$> messageText msg

-- | Convert a list of messages zipped with their indentation levels to a Doc.
-- Each message is prepended with a number of asterisks (levels of bullet
-- list) equal to its indentation level.
imsg2doc :: (IsGameData (GameData g), Monad m) => IndentedMessages -> PPT g m Doc
imsg2doc msgs = PP.vsep <$>
                mapM (\(i,rm) -> do
                        m <- message rm
                        return (PP.hsep [Doc.strictText (T.replicate i "*"),  m]))
                     msgs

-- | As 'imsg2doc', but use HTML to format the messages instead of wiki markup.
-- This behaves better with <pre> blocks but doesn't play well with idea
-- groups.
imsg2doc_html :: forall g m. (IsGameData (GameData g), Monad m) => IndentedMessages -> PPT g m Doc
imsg2doc_html [] = return mempty
imsg2doc_html msgs@((i,_):_)
    | i > 0     = PP.enclose "<ul>" "</ul>" . fst <$> imsg2doc' msgs
    | otherwise = fst <$> imsg2doc' msgs
    where
        -- Format all (remaining) messages at the current indent level.
        imsg2doc' :: IndentedMessages -> PPT g m (Doc, IndentedMessages)
        imsg2doc' [] = return (mempty, [])
        imsg2doc' [(_, rm)] = do -- Last message.
            m <- message rm
            return (PP.enclose "<li>" "</li>" m, [])
        imsg2doc' ((i, rm):msgs@((i',_):_))
            | i < i' = do
                -- New indent.
                m <- message rm
                -- Format the indented stuff.
                (indented, moremsgs) <- imsg2doc' msgs
                -- Format stuff after the indent.
                (postdoc, restmsgs) <- imsg2doc' moremsgs
                -- Put it all together.
                return (PP.vsep
                            [PP.enclose "<li>" "</li>"
                                (PP.vsep
                                    [m
                                    ,PP.enclose "<ul>" "</ul>" indented])
                            ,postdoc]
                       , restmsgs)
            | i > i' = do
                -- Last message at this level.
                m <- PP.enclose "<li>" "</li>" <$> message rm
                return (m, msgs)
            | otherwise = do
                -- Carry on with this indent level.
                m <- PP.enclose "<li>" "</li>" <$> message rm
                (postdoc, restmsgs) <- imsg2doc' msgs
                return (m <> PP.line <> postdoc, restmsgs)
