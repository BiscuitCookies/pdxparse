{-|
Module      : Messages
Description : Output messages

This module contains a huge data type with many constructors, each representing
a different message that the script presentation engine may output. Any that it
doesn't know about will be regurgitated intact using 'MsgUnprocessed'. Others
are converted at some point, probably using 'imsg2doc' or 'imsg2doc_html', to a
message in natural language. In principle, the program's output can be
converted this way to other languages by defining a new case for that language
in the 'RenderMessage' instance for 'ScriptMessage'. So far only English is
supported (and even then it is incomplete).

This module was originally written via the Yesod library @shakespeare-i18n@, with
messages defined in external files. Unfortunately, due to performance bugs in
GHC, compiling this module this way was unacceptably slow, which made adding
new cases far more tedious than it should have been. Most of this file consists
of code generated by the @shakespeare-i18n@ Template Haskell splice function
'Text.Shakespeare.I18N.mkMessage', dumped with the @-ddump-splices@ option to
GHC, and edited for human readability.

Functions used in 'ScriptMessage''s instance of the localization method
'Text.Shakespeare.I18N.renderMessage' are defined in "MessageTools". The
Template Haskell version of this module required them to be in a separate
module due to TH stage restrictions.
-}
module HOI4.Messages (
        ScriptMessage (..)
    ,   StatementHandler
    ,   template, templateDoc
    ,   message, messageText
    ,   imsg2doc, imsg2doc_html
    ,   IndentedMessage, IndentedMessages
    ) where

import Data.Monoid ((<>))

import Data.Text (Text)
import qualified Data.Text as T

import Text.PrettyPrint.Leijen.Text (Doc)
import qualified Text.PrettyPrint.Leijen.Text as PP
import Text.Shakespeare.I18N (RenderMessage (..))

import Abstract (GenericStatement)
import qualified Doc
import MessageTools -- import everything
import SettingsTypes (PPT, getLangs, GameData (..), IsGameData (..))

-- | Dummy type required by the Shakespeare machinery.
data Script = Script

-- | The abstract message type. Each constructor is a localizable message.
--
-- To add a new message, add a constructor here (using the same names as an
-- existing constructor if possible), then add a case for it in the
-- 'RenderMessage' instance for 'ScriptMessage'.
data ScriptMessage
    = MsgUnprocessed {scriptMessageMsg :: Text}
    -- scope messages
    -- trigger scopes
    | MsgAllAlliedCountry
    | MsgAllArmyLeader
    | MsgAllCharacter
    | MsgAllControlledState
    | MsgAllCoreState
    | MsgAllCountry
    | MsgAllCountryWithOriginalTag {scriptMessageWho :: Text}
    | MsgAllEnemyCountry
    | MsgAllGuaranteedCountry
    | MsgAllNavyLeader
    | MsgAllNeighborCountry
    | MsgAllNeighborState
    | MsgAllOccupiedCountry
    | MsgAllOperativeLeader
    | MsgAllOtherCountry
    | MsgAllOwnedState
    | MsgAllState
    | MsgAllSubjectCountries
    | MsgAllUnitLeader
    | MsgAnyAlliedCountry
    | MsgAnyArmyLeader
    | MsgAnyCharacter
    | MsgAnyControlledState
    | MsgAnyCoreState
    | MsgAnyCountry
    | MsgAnyCountryWithOriginalTag {scriptMessageWho :: Text}
    | MsgAnyEnemyCountry
    | MsgAnyGuaranteedCountry
    | MsgAnyHomeAreaNeighborCountry
    | MsgAnyNavyLeader
    | MsgAnyNeighborCountry
    | MsgAnyNeighborState
    | MsgAnyOccupiedCountry
    | MsgAnyOperativeLeader
    | MsgAnyOtherCountry
    | MsgAnyOwnedState
    | MsgAnyState
    | MsgAnySubjectCountry
    | MsgAnyUnitLeader
    -- effect scope messages
    | MsgEveryArmyLeader
    | MsgEveryCharacter
    | MsgEveryControlledState
    | MsgEveryCoreState
    | MsgEveryCountry
    | MsgEveryCountryWithOriginalTag {scriptMessageWho :: Text}
    | MsgEveryEnemyCountry
    | MsgEveryNavyLeader
    | MsgEveryNeighborCountry
    | MsgEveryNeighborState
    | MsgEveryOccupiedCountry
    | MsgEveryOperative
    | MsgEveryOtherCountry
    | MsgEveryOwnedState
    | MsgEveryState
    | MsgEverySubjectCountry
    | MsgEveryUnitLeader
    | MsgGlobalEveryArmyLeader
    | MsgRandomArmyLeader
    | MsgRandomCharacter
    | MsgRandomControlledState
    | MsgRandomCoreState
    | MsgRandomCountry
    | MsgRandomCountryWithOriginalTag {scriptMessageWho :: Text}
    | MsgRandomEnemyCountry
    | MsgRandomNavyLeader
    | MsgRandomNeighborCountry
    | MsgRandomNeighborState
    | MsgRandomOccupiedCountry
    | MsgRandomOperative
    | MsgRandomOtherCountry
    | MsgRandomOwnedControlledState
    | MsgRandomOwnedState
    | MsgRandomState
    | MsgRandomSubjectCountry
    | MsgRandomUnitLeader
    -- dual scope messages
    | MsgROOT
    | MsgROOTSCOPECountry
    | MsgROOTSCOPEState
    | MsgROOTSCOPEOperative
    | MsgROOTSCOPEUnitLeader
    | MsgROOTSCOPECharacter
    | MsgROOTCountry
    | MsgROOTCountryAsOther
    | MsgROOTState
    | MsgROOTStateOwner
    | MsgROOTStateAsOther
    | MsgROOTOperative
    | MsgROOTOperativeOwner
    | MsgROOTOperativeAsOther
    | MsgROOTUnitLeader
    | MsgROOTUnitLeaderOwner
    | MsgROOTUnitLeaderAsOther

    | MsgPREV
    | MsgPREVSCOPECharacter
    | MsgPREVSCOPECountry
    | MsgPREVSCOPEOperative
    | MsgPREVSCOPEState
    | MsgPREVSCOPEUnitLeader
    | MsgPREVSCOPEMisc
    | MsgPREVSCOPECustom
    | MsgPREVCharacter
    | MsgPREVCharacterOwner
    | MsgPREVCharacterAsOther
    | MsgPREVCountry
    | MsgPREVCountryAsOther
    | MsgPREVState
    | MsgPREVStateOwner
    | MsgPREVStateAsOther
    | MsgPREVOperative
    | MsgPREVOperativeOwner
    | MsgPREVOperativeAsOther
    | MsgPREVUnitLeader
    | MsgPREVUnitLeaderOwner
    | MsgPREVUnitLeaderAsOther
    | MsgPREVCustom
    | MsgTHISCharacter
    | MsgTHISCharacterOwner
    | MsgTHISCharacterAsOther
    | MsgTHISCountry
    | MsgTHISCountryAsOther
    | MsgTHISState
    | MsgTHISStateOwner
    | MsgTHISStateAsOther
    | MsgTHISOperative
    | MsgTHISOperativeOwner
    | MsgTHISOperativeAsOther
    | MsgTHISUnitLeader
    | MsgTHISUnitLeaderOwner
    | MsgTHISUnitLeaderAsOther
    | MsgTHISCustom

    | MsgFROM
    | MsgFROMSCOPE

    | MsgMISC

    | MsgOverlord
    | MsgOwner
    | MsgController
    | MsgCapital
    | MsgState {scriptMessageWhere :: Text}
    | MsgSCOPEEventTarget {scriptMessageTag :: Text}
    | MsgEventTargetVar {scriptMessageTag :: Text}
    | MsgSCOPEVariable {scriptMessageTag :: Text}
    | MsgVariable {scriptMessageTag :: Text}
    -- flow control messages
    | MsgAnd
    | MsgNot
    | MsgOr
    | MsgCountTriggers
    | MsgHiddenTriggers
    | MsgCustomTriggerTooltip
    | MsgHiddenEffect
    | MsgElse
    | MsgElseIf
    | MsgIf
    | MsgLimit
    | MsgPrioritize {scriptMessageWhat :: Text}
    | MsgOrignalTagToCheck {scriptMessageWho :: Text}
    | MsgWhile
    | MsgFor
    | MsgRandom
    | MsgRandomList
    | MsgRandomChance {scriptMessageChance :: Double}
    | MsgRandomVarChance {scriptMessageWhat :: Text}
    | MsgRandomChanceHOI4 {scriptMessageChance :: Double, scriptMessageAmt :: Double}
    -- other messages to be sorted
    | MsgKillCountryLeader
    | MsgLeaveFaction
    | MsgMarkFocusTreeLayoutDirty
    | MsgRetireCountryLeader
    | MsgGainPoliticalPower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAddManpower {scriptMessageIcon :: Text, scriptMessageLoc :: Text, scriptMessageAmt :: Double}
    | MsgAddExtraStateSharedBuildingSlots {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainLocPC {scriptMessageIcon :: Text, scriptMessageLoc :: Text, scriptMessageAmt :: Double}
    | MsgCreateFaction {scriptMessageWhat :: Text}
    | MsgHasTech {scriptMessageWhat :: Text}
    | MsgDiplomaticRelation {scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgTooltip {scriptMessageWhat :: Text}
    | MsgCustomEffectTooltip {scriptMessageWhat :: Text}
    | MsgRemoveStateClaim {scriptMessageWhat :: Text}
    | MsgRemoveStateCore {scriptMessageWhat :: Text}
    | MsgOwnsState {scriptMessageWhat :: Text}
    | MsgControlsState {scriptMessageWhat :: Text}
    | MsgHasFullControlOfState {scriptMessageWhat :: Text}
    | MsgClearFlag {scriptMessageFlagType :: Text, scriptMessageName :: Text}
    | MsgHasFlag {scriptMessageFlagType :: Text, scriptMessageName :: Text}
    | MsgHasFlagFor {scriptMessageFlagType :: Text, scriptMessageName :: Text, scriptMessageAmtText :: Text, scriptMessageTime :: Text, scriptMessageDate :: Text}
    | MsgSetFlag {scriptMessageFlagType :: Text, scriptMessageName :: Text}
    | MsgSetFlagFor {scriptMessageFlagType :: Text, scriptMessageName :: Text, scriptMessageAmtText :: Text, scriptMessageDaysText :: Text}
    | MsgHadFlag {scriptMessageFlagType :: Text, scriptMessageName :: Text, scriptMessageDays :: Double}
    | MsgModifyFlag {scriptMessageFlagType :: Text, scriptMessageFlag :: Text, scriptMessageAmt :: Double}
    | MsgCharacterFlag
    | MsgCountryFlag
    | MsgGlobalFlag
    | MsgStateFlag
    | MsgUnitLeaderFlag
    | MsgHasAddedTensionAmount {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHasAddedTensionAmountVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgHasArmyManpower {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHasArmyManpowerVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgHasManpower {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHasManpowerVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgHasStability {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHasStabilityVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgHasWarSupport {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgHasWarSupportVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgIndustrialComplex {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgIndustrialComplexVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgNumOfControlledFactories {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgNumOfControlledFactoriesVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgNumOfControlledStates {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgNumOfControlledStatesVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgNumOfFactories {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgNumOfFactoriesVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgNumOfNukes {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgNumOfNukesVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgOriginalResearchSlots {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgOriginalResearchSlotsVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgIsControlledBy {scriptMessageWhom :: Text}
    | MsgHasDefensiveWarWith {scriptMessageWhom :: Text}
    | MsgAddClaimBy {scriptMessageWho :: Text}
    | MsgAddStateClaim {scriptMessageWhat :: Text}
    | MsgAddStateCore {scriptMessageWhat :: Text}
    | MsgInheritTechnology {scriptMessageWhom :: Text}
    | MsgIsNeighborOf {scriptMessageWhom :: Text}
    | MsgIsSubjectOf {scriptMessageWhom :: Text}
    | MsgIsOwnedBy {scriptMessageWhom :: Text}
    | MsgPuppet {scriptMessageWhom :: Text}
    | MsgCountryIs {scriptMessageWho :: Text}
    | MsgHasWarWith {scriptMessageWhom :: Text}
    | MsgHasWarTogetherWith {scriptMessageWhom :: Text}
    | MsgMakeWhitePeace {scriptMessageWhom :: Text}
    | MsgCountryExists {scriptMessageWho :: Text}
    | MsgExists {scriptMessageYn :: Bool}
    | MsgIsAIControlled {scriptMessageYn :: Bool}
    | MsgHasCapitulated {scriptMessageYn :: Bool}
    | MsgIsInFaction {scriptMessageYn :: Bool}
    | MsgIsInHomeArea {scriptMessageYn :: Bool}
    | MsgHasWar {scriptMessageYn :: Bool}
    | MsgIsCapital {scriptMessageYn :: Bool}
    | MsgIsCoastal {scriptMessageYn :: Bool}
    | MsgIsFemale {scriptMessageYn :: Bool}
    | MsgIsSubject {scriptMessageYn :: Bool}
    | MsgHasAutonomyState {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAddOpinion {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgReverseAddOpinion {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWho :: Text}
    | MsgAddOpinionDur {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text, scriptMessageYears :: Double}
    | MsgReverseAddOpinionDur {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWho :: Text, scriptMessageYears :: Double}
    | MsgAddNamedThreat {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageWhom :: Text}
    | MsgAddTechBonus {scriptMessageAmt :: Double, scriptMessageName :: Text, scriptMessageUses :: Double}
    | MsgAddTechBonusAhead {scriptMessageAmt :: Double, scriptMessageName :: Text, scriptMessageUses :: Double}
    | MsgAddTechBonusAheadBoth {scriptMessageBonus :: Double, scriptMessageYearahead :: Double, scriptMessageName :: Text, scriptMessageUses :: Double}
    | MsgAddToWar {scriptMessageWho :: Text, scriptMessageWhom :: Text, scriptMessageWhy :: Text}
    | MsgCreateEquipmentVariant {scriptMessageWhat :: Text, scriptMessageWhat2 :: Text}
    | MsgCreateWG {scriptMessageWhat :: Text, scriptMessageWhom :: Text, scriptMessageStates :: Text}
    | MsgCreateWGDuration {scriptMessageWhat :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double, scriptMessageStates :: Text}
    | MsgHasDynamicMod {scriptMessageModid :: Text}
    | MsgHasOpinionMod {scriptMessageModid :: Text}
    | MsgRemoveOpinionMod {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgCountryEvent
    | MsgNewsEvent
    | MsgStateEvent
    | MsgOperativeEvent
    | MsgUnitLeaderEvent
    | MsgTriggerEvent {scriptMessageEvttype :: Text, scriptMessageEvtid :: Text, scriptMessageName :: Text}
    | MsgTriggerEventDays {scriptMessageEvttype :: Text, scriptMessageEvtid :: Text, scriptMessageName :: Text, scriptMessageDays :: Double}
    | MsgTriggerEventTime {scriptMessageEvttype :: Text, scriptMessageEvtid :: Text, scriptMessageName :: Text, scriptMessageTime :: Text}
    | MsgDeclareWarOn {scriptMessageWhom :: Text, scriptMessageWhat :: Text, scriptMessageStates :: Text}
    | MsgAddCoreOf {scriptMessageWho :: Text}
    | MsgHasDLC {scriptMessageIcon :: Text, scriptMessageDlc :: Text}
    | MsgHasEquipment {scriptMessageCompare :: Text, scriptMessageAmt :: Double, scriptMessageWhat :: Text}
    | MsgSetDemilitarizedZone {scriptMessageYn :: Bool}
    | MsgHasIdea {scriptMessageWhat :: Text, scriptMessageIcon :: Text, scriptMessageKey :: Text, scriptMessageLoc :: Text}
    | MsgAddIdea {scriptMessageWhat :: Text, scriptMessageIcon :: Text, scriptMessageKey :: Text, scriptMessageLoc :: Text}
    | MsgRemoveIdea {scriptMessageWhat :: Text, scriptMessageIcon :: Text, scriptMessageKey :: Text, scriptMessageLoc :: Text}
    | MsgAddTimedIdea {scriptMessageWhat :: Text, scriptMessageIcon :: Text, scriptMessageKey :: Text, scriptMessageLoc :: Text, scriptMessageDays :: Double}
    | MsgModifyTimedIdea {scriptMessageWhat :: Text, scriptMessageIcon :: Text, scriptMessageKey :: Text, scriptMessageLoc :: Text, scriptMessageDays :: Double}
    | MsgModifyIdea {scriptMessageCategory :: Text, scriptMessageIcon :: Text, scriptMessageKey :: Text, scriptMessageLoc :: Text, scriptMessageCategory2 :: Text, scriptMessageIcon2 :: Text, scriptMessageKey2 :: Text, scriptMessageLoc2 :: Text}
    | MsgReplaceIdea {scriptMessageCategory :: Text, scriptMessageIcon :: Text, scriptMessageKey :: Text, scriptMessageLoc :: Text, scriptMessageCategory2 :: Text, scriptMessageIcon2 :: Text, scriptMessageKey2 :: Text, scriptMessageLoc2 :: Text}
    | MsgEffectBox {scriptMessageLoc :: Text, scriptMessageKey :: Text, scriptMessageIcon :: Text, scriptMessageDesc :: Text}
    | MsgEffectBoxEnd
    | MsgHasOpinion {scriptMessageAmtText :: Text, scriptMessageWhom :: Text, scriptMessageCompare :: Text }
    | MsgSetRule {scriptMessageAmt :: Double}
    | MsgSetRuleYesNo {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgSetTechnology {scriptMessageAmt :: Double, scriptMessageWhat :: Text}
    | MsgAddDoctrineCostReduction {scriptMessageAmt :: Double, scriptMessageAmt2 :: Double, scriptMessageWhat :: Text}
    | MsgFreeBuildingSlots {scriptMessageCompare :: Text, scriptMessageAmt :: Double, scriptMessageWhat :: Text, scriptMessageYn :: Bool }
    | MsgChangeTagFrom {scriptMessageWho :: Text}
    | MsgIsDemilitarizedZone {scriptMessageYn :: Bool}
    | MsgCheckVariable {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgNoBaseWeight
    | MsgAIBaseWeight {scriptMessageAmt :: Double}
    | MsgAIFactorOneline {scriptMessageFactor :: Text, scriptMessageMultiplier :: Double}
    | MsgAIAddOneline {scriptMessageFactor :: Text, scriptMessageMultiplier :: Double}
    | MsgAIFactorHeader {scriptMessageMultiplier :: Double}
    | MsgAIAddHeader {scriptMessageMultiplier :: Double}
    | MsgExperience {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgResetProvinceName {scriptMessageAmt :: Double}
    | MsgHasCompletedFocus {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageLoc :: Text}
    | MsgCompleteNationalFocus {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageLoc :: Text}
    | MsgFocus {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageLoc :: Text}
    | MsgFocusProgress {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageLoc :: Text, scriptMessageCompare :: Text}
    | MsgHasArmySize {scriptMessageCompare :: Text, scriptMessageAmt :: Double, scriptMessageWhat :: Text}
    | MsgGiveGuarantee {scriptMessageWhom :: Text}
    | MsgGiveMilitaryAccess {scriptMessageWhom :: Text}
    | MsgSetCapital {scriptMessageWhat :: Text}
    | MsgStateId {scriptMessageWhat :: Text}
    | MsgTransferState {scriptMessageWhat :: Text}
    | MsgSetStateName {scriptMessageWhat :: Text}
    | MsgSetStateCategory {scriptMessageWhat :: Text}
    | MsgAlways {scriptMessageYn :: Bool}
    | MsgIsUnitLeader {scriptMessageYn :: Bool}
    | MsgModifier {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierSign {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierColourPos {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierColourNeg {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPc {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcSign {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcReduced {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcReducedSign {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcPos {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcNeg {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcPosReduced {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierPcNegReduced {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgModifierVar {scriptMessageWhat :: Text, scriptMessageAmtText :: Text}
    | MsgAddResearchSlot {scriptMessageAmt :: Double}
    | MsgAddThreat {scriptMessageAmt :: Double}
    | MsgSaveEventTargetAs {scriptMessageName :: Text}
    | MsgSaveGlobalEventTargetAs {scriptMessageName :: Text}
    | MsgRemoveClaimBy {scriptMessageWho :: Text}
    | MsgRemoveCoreOf {scriptMessageWho :: Text}
    | MsgRemoveFromFaction {scriptMessageWho :: Text}
    | MsgDismantleFaction
    | MsgDropCosmeticTag
    | MsgSetCompliance {scriptMessageAmt :: Double}
    | MsgSurrenderProgress {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgSurrenderProgressVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgSetVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgSetTempVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgSetVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgSetTempVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgAddVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgAddTempVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgAddVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgAddTempVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgSubVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgSubTempVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgSubVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgSubTempVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgMulVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgMulTempVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgMulVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgMulTempVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgDivVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgDivTempVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgDivVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgDivTempVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgChkVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgChkVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgEquVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgEquVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgHasDefensiveWar { scriptMessageYn :: Bool }
    | MsgLoadFocusTree { scriptMessageWhat :: Text }
    | MsgLoadFocusTreeKeep {scriptMessage_icon :: Text, scriptMessageWhat :: Text, scriptMessageYesNo :: Text }
    | MsgModifyBuildingResources {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double }
    | MsgIsFullyControlledBy { scriptMessageWho :: Text }
    | MsgIsGuaranteedBy { scriptMessageWho :: Text }
    | MsgHasVolunteersAmountFrom { scriptMessage_icon :: Text, scriptMessageWho :: Text, scriptMessageCompare :: Text, scriptMessageAmt :: Double }
    | MsgHasCivilWar {scriptMessageYn :: Bool}
    | MsgOrignalTag {scriptMessageWhom :: Text}
    | MsgHasGovernment {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgIsHistoricalFocusOn { scriptMessageYn :: Bool }
    | MsgAirBase {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgAirBaseVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgAmountResearchSlots {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgAmountResearchSlotsVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgAnyWarScore {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgAnyWarScoreVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgArmsFactory {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgArmsFactoryVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgCompareAutonomyProgressRatio {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgCompareAutonomyProgressRatioVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgDate {scriptMessageCompare :: Text, scriptMessageMonth :: Text, scriptMessageDay :: Double, scriptMessageYear :: Double}
    | MsgDockyard {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgDockyardVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgEnemiesStrengthRatio {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgEnemiesStrengthRatioVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgIsCharacter {scriptMessageWhat :: Text}
    | MsgIsOnContinent {scriptMessageWhat :: Text}
    | MsgHasCountryLeader {scriptMessageWhom :: Text}
    | MsgIsIslandState {scriptMessageYn :: Bool}
    | MsgExportVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgExportVariableWho { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text, scriptMessageWhom :: Text}
    | MsgThreat {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgThreatVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgFascismCompare {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgFascismCompareVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgDemocraticCompare {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgDemocraticCompareVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgCommunismCompare {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgCommunismCompareVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgNeutralityCompare {scriptMessageAmt :: Double, scriptMessageCompare :: Text}
    | MsgNeutralityCompareVar {scriptMessageAmtT :: Text, scriptMessageCompare :: Text}
    | MsgAnnexCountry {scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgIsInFactionWith {scriptMessageWhom :: Text}
    | MsgIsJustifyingWargoalAgainst {scriptMessageWhom :: Text}
    | MsgSetNationality {scriptMessageWhat :: Text}
    | MsgSetNationalityChar {scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgHasGuaranteed {scriptMessageWhom :: Text}
    | MsgModifyTechSharingBonus { scriptMessage_icon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double }
    | MsgAddToFaction {scriptMessageWhom :: Text}
    | MsgAddResource {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double, scriptMessageWhere :: Text}
    | MsgAddPopularity {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgBuildRailway {scriptMessageAmt :: Double, scriptMessageStart :: Text, scriptMessageEnd :: Text}
    | MsgBuildRailwayProv {scriptMessageAmt :: Double, scriptMessageStartProv :: Double, scriptMessageEndProv :: Double}
    | MsgBuildRailwayPath {scriptMessageAmt :: Double, scriptMessageWhat :: Text}
    | MsgCanBuildRailway {scriptMessageStart :: Text, scriptMessageEnd :: Text}
    | MsgCanBuildRailwayProv {scriptMessageStartProv :: Double, scriptMessageEndProv :: Double}
    | MsgSetProvinceName {scriptMessage_icon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgSetVictoryPoints {scriptMessageAmt2 :: Double, scriptMessageAmt :: Double}
    | MsgStrengthRatio {scriptMessage_icon :: Text, scriptMessageWhom :: Text, scriptMessageCompare :: Text, scriptMessageAmt :: Double}
    | MsgHasSubject {scriptMessageWhom :: Text}
    | MsgSetCosmeticTag {scriptMessageWhat :: Text}
    | MsgHasFocusTree {scriptMessageWhat :: Text}
    | MsgAddAiStrategy
    | MsgAddAutonomyRatio {scriptMessage_icon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgAddFieldMarshalRole {scriptMessageWho :: Text}
    | MsgAddOffsiteBuilding {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgReleaseAutonomy {scriptMessageWho :: Text, scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double, scriptMessage_war :: Text}
    | MsgSetAutonomy {scriptMessageWho :: Text, scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double, scriptMessageWar :: Text}
    | MsgSetPolitics {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageMonths :: Double}
    | MsgStartCivilWar {scriptMessageWhat :: Text, scriptMessageAmtText :: Text}
    | MsgSetPartyName {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgIsInTechSharingGroup {scriptMessageWhat :: Text}
    | MsgAddToTechSharingGroup {scriptMessageWhat :: Text}
    | MsgRemoveDynamicMod {scriptMessageWhat :: Text}
    | MsgIsStateCore {scriptMessageWhat :: Text}
    | MsgHasRule {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgHasOffensiveWar {scriptMessageYn :: Bool}
    | MsgIsMajor {scriptMessageYn :: Bool}
    | MsgSendEquipment {scriptMessageAmtT :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text, scriptMessageYn :: Bool}
    | MsgRandomListTrigger
    | MsgRandomListModifier {scriptMessageAmt :: Double}
    | MsgRandomListAddModifier {scriptMessageAmt :: Double}
    | MsgUnlockDecisionCategoryTooltip {scriptMessageWhat :: Text}
    | MsgUnlockDecisionTooltip {scriptMessageWhat :: Text}
    | MsgIsPuppet {scriptMessageYn :: Bool}
    | MsgHasNonAggressionPactWith {scriptMessageWhom :: Text}
    | MsgHasOffensiveWarWith {scriptMessageWhom :: Text}
    | MsgAddDynamicModifier {scriptMessageWhat :: Text, scriptMessageWho :: Text, scriptMessageDaysText :: Text}
    | MsgIsFactionLeader {scriptMessageYn :: Bool}
    | MsgIsOwnedAndControlledBy {scriptMessageWhom :: Text}
    | MsgIsPuppetOf {scriptMessageWhom :: Text}
    | MsgHasWargoalAgainst {scriptMessageWhom :: Text}
    | MsgHasWargoalAgainstType {scriptMessage_icon :: Text, scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgAddBuildingConstruction {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double, scriptMessageVar :: Text, scriptMessageProv :: Text}
    | MsgRemoveBuilding {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}

-- | Whether to default to English localization.
useEnglish :: [Text] -> Bool
useEnglish [] = True
useEnglish ("en":_) = True
useEnglish _ = False

instance RenderMessage Script ScriptMessage where
    renderMessage _ (useEnglish -> True) msg = case msg of
        MsgUnprocessed {scriptMessageMsg = _msg}
            -> _msg
        -- scope messages
        -- trigger scope messages
        MsgAllAlliedCountry
            -> "[SCOPE]All allied countries:"
        MsgAllArmyLeader
            -> "[SCOPE]All employed army leaders:"
        MsgAllCharacter
            -> "[SCOPE]All recruited characters:"
        MsgAllControlledState
            -> "[SCOPE]All controlled states:"
        MsgAllCoreState
            -> "[SCOPE]All core states:"
        MsgAllCountry
            -> "[SCOPE]All countries in the world:"
        MsgAllCountryWithOriginalTag {scriptMessageWho = _who}
            -> mconcat
                ["[SCOPE]All countries in the world which are or originally were "
                , _who
                , ":"
                ]
        MsgAllEnemyCountry
            -> "[SCOPE]All enemy countries:"
        MsgAllGuaranteedCountry
            -> "[SCOPE]All guaranteed countries:"
        MsgAllNavyLeader
            -> "[SCOPE]All employed navy leaders:"
        MsgAllNeighborCountry
            -> "[SCOPE]All neighbouring countries:"
        MsgAllNeighborState
            -> "[SCOPE]All neighbouring states:"
        MsgAllOccupiedCountry
            -> "[SCOPE]All occupied countries:"
        MsgAllOperativeLeader
            -> "[SCOPE]All employed operatives:"
        MsgAllOtherCountry
            -> "[SCOPE]All other countries:"
        MsgAllOwnedState
            -> "[SCOPE]All owned states:"
        MsgAllState
            -> "[SCOPE]All states:"
        MsgAllSubjectCountries
            -> "[SCOPE]All subject countries:"
        MsgAllUnitLeader
            -> "[SCOPE]All employed unit leaders:"
        MsgAnyAlliedCountry
            -> "[SCOPE]Any allied country:"
        MsgAnyArmyLeader
            -> "[SCOPE]Any employed army leader:"
        MsgAnyCharacter
            -> "[SCOPE]Any recruited character:"
        MsgAnyControlledState
            -> "[SCOPE]Any controlled state:"
        MsgAnyCoreState
            -> "[SCOPE]Any core state:"
        MsgAnyCountry
            -> "[SCOPE]Any country in the world:"
        MsgAnyCountryWithOriginalTag {scriptMessageWho = _who}
            -> mconcat
                ["[SCOPE]Any country in the world which is or originally was "
                , _who
                , ":"
                ]
        MsgAnyEnemyCountry
            -> "[SCOPE]Any enemy country:"
        MsgAnyGuaranteedCountry
            -> "[SCOPE]Any guaranteed country:"
        MsgAnyHomeAreaNeighborCountry
            -> "[SCOPE]Any neighbouring country with direct land connection:"
        MsgAnyNavyLeader
            -> "[SCOPE]Any employed navy leader:"
        MsgAnyNeighborCountry
            -> "[SCOPE]Any neighbouring country:"
        MsgAnyNeighborState
            -> "[SCOPE]Any neighbouring state:"
        MsgAnyOccupiedCountry
            -> "[SCOPE]Any occupied country:"
        MsgAnyOperativeLeader
            -> "[SCOPE]Any employed operative:"
        MsgAnyOtherCountry
            -> "[SCOPE]Any other country:"
        MsgAnyOwnedState
            -> "[SCOPE]Any owned state:"
        MsgAnyState
            -> "[SCOPE]Any state:"
        MsgAnySubjectCountry
            -> "[SCOPE]Any subject country:"
        MsgAnyUnitLeader
            -> "[SCOPE]Any employed unit leader:"
        -- effect scope messages
        MsgEveryArmyLeader
            -> "[SCOPE]Every employed army leader:"
        MsgEveryCharacter
            -> "[SCOPE]Every recruited character:"
        MsgEveryControlledState
            -> "[SCOPE]Every controlled state:"
        MsgEveryCoreState
            -> "[SCOPE]Every core state:"
        MsgEveryCountry
            -> "[SCOPE]Every country in the world:"
        MsgEveryCountryWithOriginalTag  {scriptMessageWho = _who}
            -> mconcat
                ["[SCOPE]Every country in the world which is or originally was "
                , _who
                , ":"
                ]
        MsgEveryEnemyCountry
            -> "[SCOPE]Every enemy country:"
        MsgEveryNavyLeader
            -> "[SCOPE]Every employed navy leader:"
        MsgEveryNeighborCountry
            -> "[SCOPE]Every neighbouring country:"
        MsgEveryNeighborState
            -> "[SCOPE]Every neighbouring state:"
        MsgEveryOccupiedCountry
            -> "[SCOPE]Every occupied country:"
        MsgEveryOperative
            -> "[SCOPE]Every employed operative:"
        MsgEveryOtherCountry
            -> "[SCOPE]Every other country:"
        MsgEveryOwnedState
            -> "[SCOPE]Every owned state:"
        MsgEveryState
            -> "[SCOPE]Every state:"
        MsgEverySubjectCountry
            -> "[SCOPE]Every subject country:"
        MsgEveryUnitLeader
            -> "[SCOPE]Every employed unit leader:"
        MsgGlobalEveryArmyLeader
            -> "[SCOPE]Every employed  army leaderin the world:"
        MsgRandomArmyLeader
            -> "[SCOPE]One random employed army leader:"
        MsgRandomCharacter
            -> "[SCOPE]One random recruited character:"
        MsgRandomControlledState
            -> "[SCOPE]One random controlled state:"
        MsgRandomCoreState
            -> "[SCOPE]One random core state:"
        MsgRandomCountry
            -> "[SCOPE]One random country in the world:"
        MsgRandomCountryWithOriginalTag  {scriptMessageWho = _who}
            -> mconcat
                ["[SCOPE]One random country in the world which is or originally was "
                , _who
                , ":"
                ]
        MsgRandomEnemyCountry
            -> "[SCOPE]One random enemy country:"
        MsgRandomNavyLeader
            -> "[SCOPE]One random employed navy leader:"
        MsgRandomNeighborCountry
            -> "[SCOPE]One random neighbouring country:"
        MsgRandomNeighborState
            -> "[SCOPE]One random neighbouring state:"
        MsgRandomOccupiedCountry
            -> "[SCOPE]One random occupied country:"
        MsgRandomOperative
            -> "[SCOPE]One random employed operative:"
        MsgRandomOtherCountry
            -> "[SCOPE]One random other country:"
        MsgRandomOwnedControlledState
            -> "[SCOPE]One random owned and controlled state:"
        MsgRandomOwnedState
            -> "[SCOPE]One random owned state:"
        MsgRandomState
            -> "[SCOPE]One random state:"
        MsgRandomSubjectCountry
            -> "[SCOPE]One random subject country:"
        MsgRandomUnitLeader
            -> "[SCOPE]One random employed unit leader:"
        -- dual scope messages
        MsgROOT
            -> "[SCOPE]ROOT"
        MsgROOTSCOPECountry
            -> "[SCOPE]Our country"
        MsgROOTSCOPEState
            -> "[SCOPE]The currently considered state"
        MsgROOTSCOPECharacter
            -> "[SCOPE]The currently considered character"
        MsgROOTSCOPEOperative
            -> "[SCOPE]The currently considered operative"
        MsgROOTSCOPEUnitLeader
            -> "[SCOPE]The currently considered unit leader"
        MsgROOTCountry
            -> "our country"
        MsgROOTCountryAsOther
            -> "same as our country"
        MsgROOTOperative
            -> "the currently considered operative"
        MsgROOTOperativeOwner
            -> "the employer of the currently considered operative"
        MsgROOTOperativeAsOther
            -> "same as the currently considered operative"
        MsgROOTState
            -> "the currently considered state"
        MsgROOTStateOwner
            -> "the owner of the currently consideredstate"
        MsgROOTStateAsOther
            -> "same as the currently considered state"
        MsgROOTUnitLeader
            -> "the currently considered unit leader"
        MsgROOTUnitLeaderOwner
            -> "the employer of the  currently considered unit leader"
        MsgROOTUnitLeaderAsOther
            -> "same as the currently considered unit leader"

        MsgPREV
            -> "[SCOPE]PREV"
        MsgPREVSCOPECharacter
            -> "[SCOPE]The previously mentioned character"
        MsgPREVSCOPECountry
            -> "[SCOPE]Previously mentioned country"
        MsgPREVSCOPEOperative
            -> "[SCOPE]The previously mentioned operative"
        MsgPREVSCOPEState
            -> "[SCOPE]The previously mentioned state"
        MsgPREVSCOPEUnitLeader
            -> "[SCOPE]The previously mentioned unit leader"
        MsgPREVSCOPEMisc
            -> "[SCOPE]The previously mentioned var or event_target"
        MsgPREVSCOPECustom
            -> "[SCOPE]Custom Scope<!-- check script for where it points to -->"
        MsgPREVCharacter
            -> "the previously mentioned character"
        MsgPREVCharacterOwner
            -> "the employer of the previously mentioned character"
        MsgPREVCharacterAsOther
            -> "same as the previously mentioned character"
        MsgPREVCountry
            -> "the previously mentioned country"
        MsgPREVCountryAsOther
            -> "same as the previously mentioned country"
        MsgPREVState
            -> "the previously mentioned state"
        MsgPREVStateOwner
            -> "the owner of the previously mentioned state"
        MsgPREVStateAsOther
            -> "same as the previously mentioned state"
        MsgPREVOperative
            -> "the previously mentioned operative"
        MsgPREVOperativeOwner
            -> "the employer of the previously mentioned operative"
        MsgPREVOperativeAsOther
            -> "same as the previously mentioned operative"
        MsgPREVUnitLeader
            -> "the previously mentioned unit leader"
        MsgPREVUnitLeaderOwner
            -> "the employer of the previously mentioned unit leader"
        MsgPREVUnitLeaderAsOther
            -> "same as the previously mentioned unit leader"
        MsgPREVCustom
            -> "previously mentioned custom scope<!-- check script for where it points to -->"

        MsgTHISCharacter
            -> "this character"
        MsgTHISCharacterOwner
            -> "the employer of this character"
        MsgTHISCharacterAsOther
            -> "same as this character"
        MsgTHISCountry
            -> "this country"
        MsgTHISCountryAsOther
            -> "same as this country"
        MsgTHISState
            -> "this state"
        MsgTHISStateOwner
            -> "the owner of this state"
        MsgTHISStateAsOther
            -> "same as this state"
        MsgTHISOperative
            -> "this operative"
        MsgTHISOperativeOwner
            -> "the employer of this operative"
        MsgTHISOperativeAsOther
            -> "same as this operative"
        MsgTHISUnitLeader
            -> "this unit leader"
        MsgTHISUnitLeaderOwner
            -> "the employer of this unit leader"
        MsgTHISUnitLeaderAsOther
            -> "same as this unit leader"
        MsgTHISCustom
            -> "current custom scope<!-- check script for where it points to -->"

        MsgFROM
            -> "FROM<!-- check script for where it points to -->"
        MsgFROMSCOPE
            -> "[SCOPE]FROM<!-- check script for where it points to -->"

        MsgMISC
            -> "MISC (scope of variable or event_target)"

        MsgCapital
            -> "[SCOPE]Capital state:"
        MsgController
            -> "[SCOPE]State controller:"
        MsgOverlord
            -> "[SCOPE]Overlord:"
        MsgOwner
            -> "[SCOPE]State owner/Unit owner:"
        MsgState {scriptMessageWhere = _where}
            -> mconcat
                [ "[Scope]"
                , _where
                , ":"
                ]
        MsgSCOPEEventTarget {scriptMessageTag = _tag}
            -> mconcat
                [ "[SCOPE]Event target <tt>"
                , _tag
                , "</tt>:"
                ]
        MsgEventTargetVar {scriptMessageTag = _tag}
            -> mconcat
                [ "event target <tt>"
                , _tag
                , "</tt>"
                ]
        MsgSCOPEVariable {scriptMessageTag = _tag}
            -> mconcat
                [ "[SCOPE]Variable <tt>"
                , _tag
                , "</tt>:"
                ]
        MsgVariable {scriptMessageTag = _tag}
            -> mconcat
                [ "variable <tt>"
                , _tag
                , "</tt>"
                ]
        -- flow control messages
        MsgAnd
            -> "All of:"
        MsgNot
            -> "None of:"
        MsgOr
            -> "At least one of:"


        MsgCountTriggers
            -> "Count trigger:"
        MsgHiddenTriggers
            -> "Hidden trigger:"
        MsgHiddenEffect
            -> "Hidden effect:"
        MsgCustomTriggerTooltip
            -> "Custom trigger tooltip:"

        MsgElse
            -> "Else:"
        MsgElseIf
            -> "Else, if:"
        MsgIf
            -> "If:"
        MsgLimit
            -> "Limited to:"
        MsgPrioritize {scriptMessageWhat = _what}
            -> mconcat
                [ "Prioritizing the "
                , _what
                ]
        MsgOrignalTagToCheck {scriptMessageWho = _who}
            -> mconcat
                [ "originally "
                , _who
                ]
        MsgWhile
            -> "While:"
        MsgFor
            -> "For:"
        MsgRandom
            -> "One of the following at random:"
        MsgRandomList
            -> "One of the following at random:"
        MsgRandomChance {scriptMessageChance = _chance}
            -> mconcat
                [ toMessage (plainPc _chance)
                , " chance of:"
                ]
        MsgRandomChanceHOI4 {scriptMessageChance = _chance, scriptMessageAmt = _amt}
            -> mconcat
                [ toMessage (plainPc _chance)
                ," (",toMessage (plainNum _amt),")"
                , " chance of:"
                ]
        MsgRandomVarChance {scriptMessageWhat = _what}
            -> mconcat
                [ "Based on "
                , _what
                , " chance of:"
                ]
        --unsorted messages
        MsgKillCountryLeader
            -> "Kill the current country leader"
        MsgLeaveFaction
            -> "Leave faction"
        MsgMarkFocusTreeLayoutDirty
            -> "Refresh the focus tree restarting the checks in allow_branch"
        MsgRetireCountryLeader
            -> "Retire the current country leader"
        MsgGainPoliticalPower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " Political power"
                ]
        MsgAddManpower {scriptMessageIcon = _icon, scriptMessageLoc = _loc, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " "
                , _loc
                ]
        MsgAddExtraStateSharedBuildingSlots {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ addOrRemove _amt
                , " "
                , toMessage (colourNum True _amt)
                , " "
                , _icon
                , " "
                , plural _amt "building slot" "building slots"
                ]
        MsgGainLocPC {scriptMessageIcon = _icon, scriptMessageLoc = _loc, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (reducedNum (colourPc True) _amt)
                , " "
                , _icon
                , " "
                , _loc
                ]
        MsgCreateFaction {scriptMessageWhat = _what}
            -> mconcat
                [ "Create faction called "
                , toMessage (iquotes _what)
                ]
        MsgHasTech {scriptMessageWhat = _what}
            -> mconcat
                [ "Has "
                , _what
                , " technology researched"
                ]
        MsgDiplomaticRelation {scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ _what
                , _whom
                ]
        MsgTooltip {scriptMessageWhat = _what}
            -> mconcat
                [ "Tooltip: "
                , _what
                ]
        MsgCustomEffectTooltip {scriptMessageWhat = _what}
            -> mconcat
                [ "Custom effect tooltip: "
                , _what
                ]
        MsgRemoveStateClaim {scriptMessageWhat = _what}
            -> mconcat
                [ "Loses a claim on "
                , _what
                ]
        MsgRemoveStateCore {scriptMessageWhat = _what}
            -> mconcat
                [ "Loses core on "
                , _what
                ]
        MsgOwnsState {scriptMessageWhat = _what}
            -> mconcat
                [ "Owns state "
                , _what
                ]
        MsgControlsState {scriptMessageWhat = _what}
            -> mconcat
                [ "Controls state "
                , _what
                ]
        MsgHasFullControlOfState {scriptMessageWhat = _what}
            -> mconcat
                [ "Has full control of state "
                , _what
                ]
        MsgClearFlag {scriptMessageFlagType = _flagType, scriptMessageName = _name}
            -> mconcat
                [ "Clear "
                , _flagType
                , " flag <tt>"
                , _name
                , "</tt>"
                ]
        MsgHasFlag {scriptMessageFlagType = _flagType, scriptMessageName = _name}
            -> mconcat
                [ toMessage (T.toTitle _flagType)
                , " flag <tt>"
                , _name
                , "</tt> is set "
                ]
        MsgHasFlagFor {scriptMessageFlagType = _flagType, scriptMessageName = _name, scriptMessageAmtText = _amtT, scriptMessageTime = _time, scriptMessageDate = _date}
            -> mconcat
                [ toMessage (T.toTitle _flagType)
                , " flag <tt>"
                , _name
                , "</tt> is set"
                , _amtT
                , _time
                , _date
                ]
        MsgSetFlag {scriptMessageFlagType = _flagType, scriptMessageName = _name}
            -> mconcat
                [ "Set "
                , _flagType
                , " flag <tt>"
                , _name
                , "</tt>"
                ]
        MsgSetFlagFor {scriptMessageFlagType = _flagType, scriptMessageName = _name, scriptMessageAmtText = _amtT, scriptMessageDaysText = _days}
            -> mconcat
                [ "Set "
                , _flagType
                , " flag <tt>"
                , _name
                , "</tt>"
                , _amtT
                , _days
                ]
        MsgHadFlag {scriptMessageFlagType = _flagType, scriptMessageName = _name, scriptMessageDays = _days}
            -> mconcat
                [ "Has had "
                , _flagType
                , " flag <tt>"
                , _name
                , "</tt> for "
                , toMessage (formatDays _days)
                ]
        MsgModifyFlag {scriptMessageFlagType = _flagType, scriptMessageFlag = _flag, scriptMessageAmt = _amt}
            -> mconcat
                [ "Modify "
                , _flagType
                , " flag <tt>"
                , _flag
                , "</tt> by "
                , toMessage (plainNumSign _amt)
                ]
        MsgCharacterFlag
            -> "character"
        MsgCountryFlag
            -> "country"
        MsgGlobalFlag
            -> "global"
        MsgStateFlag
            -> "state"
        MsgUnitLeaderFlag
            -> "unit leader"
        MsgHasAddedTensionAmount {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has caused"
                , _comp
                , " {{icon|world tension|1}} "
                , toMessage (bold (plainNum _amt))
                ]
        MsgHasAddedTensionAmountVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has caused"
                , _comp
                , " {{icon|world tension|1}} "
                , boldText _amtT
                ]
        MsgHasArmyManpower {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNum _amt))
                , " {{icon|manpower|1}} in the field"
                ]
        MsgHasArmyManpowerVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , boldText _amtT
                , " {{icon|manpower|1}} in the field"
                ]
        MsgHasManpower {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " {{icon|manpower|1}} "
                , toMessage (bold (plainNum _amt))
                ]
        MsgHasManpowerVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " {{icon|manpower|1}} "
                , boldText _amtT
                ]
        MsgHasStability {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " {{icon|stability|1}} "
                , toMessage (bold (reducedNum plainPc _amt))
                ]
        MsgHasStabilityVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " {{icon|stability|1}} "
                , boldText _amtT
                ]
        MsgHasWarSupport {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPc _amt))
                , " {{icon|war support|1}}"
                ]
        MsgHasWarSupportVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , boldText _amtT
                , " {{icon|war support|1}}"
                ]
        MsgIndustrialComplex {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNum _amt))
                , " {{icon|cic|1}}"
                ]
        MsgIndustrialComplexVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , boldText _amtT
                , " {{icon|cic|1}}"
                ]
        MsgNumOfControlledFactories {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNum _amt))
                , plural _amt " controlled factory" " controlled factories"
                ]
        MsgNumOfControlledFactoriesVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , boldText _amtT
                , " controlled factories"
                ]
        MsgNumOfControlledStates {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNum _amt))
                , plural _amt " controlled state" " controlled states"
                ]
        MsgNumOfControlledStatesVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , boldText _amtT
                , " controlled states"
                ]
        MsgNumOfFactories {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNum _amt))
                , plural _amt " factory" " factories"
                ]
        MsgNumOfFactoriesVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , boldText _amtT
                , " factories"
                ]
        MsgNumOfNukes {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNum _amt))
                , plural _amt " nuke" " nukes"
                ]
        MsgNumOfNukesVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , boldText _amtT
                , " nukes"
                ]
        MsgOriginalResearchSlots {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Starts with "
                , _comp
                , " "
                , toMessage (bold (plainNum _amt))
                , plural _amt " research slot" " research slots"
                ]
        MsgOriginalResearchSlotsVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Starts with "
                , _comp
                , " "
                , boldText _amtT
                , " research slots"
                ]
        MsgIsControlledBy {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is controlled by "
                , _whom
                ]
        MsgHasDefensiveWarWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is defending in a war against "
                , _whom
                ]
        MsgAddClaimBy {scriptMessageWho = _who}
            -> mconcat
                [ "Is claimed by "
                , _who
                ]
        MsgAddStateClaim {scriptMessageWhat = _what}
            -> mconcat
                [ "Gains claim on "
                , _what
                ]
        MsgAddStateCore {scriptMessageWhat = _what}
            -> mconcat
                [ "Gains core on "
                , _what
                ]
        MsgInheritTechnology {scriptMessageWhom = _whom}
            -> mconcat
                [ "Gain the same technologies as "
                , _whom
                ]
        MsgIsNeighborOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is neighbor of "
                , _whom
                ]
        MsgIsSubjectOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is a subject of "
                , _whom
                ]
        MsgIsOwnedBy {scriptMessageWhom = _whom}
            -> mconcat
                [ "State is owned by "
                , _whom
                ]
        MsgPuppet {scriptMessageWhom = _whom}
            -> mconcat
                [ _whom
                , " becomes a puppet of the current scope"
                ]
        MsgCountryIs {scriptMessageWho = _who}
            -> mconcat
                [ "Is "
                , _who
                ]
        MsgHasWarWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is at war with "
                , _whom
                ]
        MsgHasWarTogetherWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Fighting war on same side as "
                , _whom
                ]
        MsgMakeWhitePeace {scriptMessageWhom = _whom}
            -> mconcat
                [ "Make a white peace with "
                , _whom
                ]
        MsgCountryExists {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " exists"
                ]
        MsgExists {scriptMessageYn = _yn}
            -> toMessage (ifThenElseT _yn "Exists" "Does ''not'' exist")
        MsgIsAIControlled {scriptMessageYn = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "AI" "player")
                , "-controlled"
                ]
        MsgHasCapitulated {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Has ''not''")
                , " capitulated"
                ]
        MsgIsInFaction {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " in a faction"
                ]
        MsgIsInHomeArea {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " connected to the owner's capital"
                ]
        MsgHasWar {scriptMessageYn = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "at war" "at peace")
                ]
        MsgIsCapital {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " the country's capital"
                ]
        MsgIsCoastal {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a coastal state"
                ]
        MsgIsFemale {scriptMessageYn = _yn}
            -> mconcat
                [ "Ruler is "
                , toMessage (ifThenElseT _yn "female" "male")
                ]
        MsgIsSubject {scriptMessageYn = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "a subject nation" "an independent nation")
                ]
        MsgHasAutonomyState {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has autonomy level of "
                , _icon
                , " "
                , _what
                ]
        MsgAddOpinion {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ "Gains opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards "
                , _whom
                ]
        MsgReverseAddOpinion {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " gains opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards this country"
                ]
        MsgAddOpinionDur {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWhom = _whom, scriptMessageYears = _years}
            -> mconcat
                [ "Gain opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards "
                , _whom
                , " for "
                , toMessage (plainNum _years)
                , " years"
                ]
        MsgReverseAddOpinionDur {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWho = _who, scriptMessageYears = _years}
            -> mconcat
                [ _who
                , " gains opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards this country for "
                , toMessage (plainNum _years)
                , " years"
                ]
        MsgHasDynamicMod {scriptMessageModid = _modid}
            -> mconcat
                [ "Has the dynamic modifier "
                , _modid
                ]
        MsgHasOpinionMod {scriptMessageModid = _modid}
            -> mconcat
                [ "Has opinion modifier {{opinion_modifier|"
                , _modid
                , "}}"
                ]
        MsgRemoveOpinionMod {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ "Lose opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards "
                , _whom
                ]
        MsgCountryEvent
            -> "country event"
        MsgNewsEvent
            -> "news event"
        MsgStateEvent
            -> "state event"
        MsgOperativeEvent
            -> "operative event"
        MsgUnitLeaderEvent
            -> "unit leader event"
        MsgTriggerEvent {scriptMessageEvttype = _evttype, scriptMessageEvtid = _evtid, scriptMessageName = _name}
            -> mconcat
                [ "Trigger "
                , _evttype
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _evtid
                , " -->"
                ]
        MsgTriggerEventDays {scriptMessageEvttype = _evttype, scriptMessageEvtid = _evtid, scriptMessageName = _name, scriptMessageDays = _days}
            -> mconcat
                [ "Trigger "
                , _evttype
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _evtid
                , " --> in "
                , toMessage (formatDays _days)
                ]
        MsgTriggerEventTime {scriptMessageEvttype = _evttype, scriptMessageEvtid = _evtid, scriptMessageName = _name, scriptMessageTime = _time}
            -> mconcat
                [ "Trigger "
                , _evttype
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _evtid
                , " --> in "
                , _time
                ]
        MsgDeclareWarOn {scriptMessageWhom = _whom, scriptMessageWhat = _war, scriptMessageStates = _states}
            -> mconcat
                [ "Declares a "
                , toMessage (italicText _war)
                , " war "
                , _states
                , " against "
                , _whom
                ]
        MsgAddCoreOf {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " gains a core on this state"
                ]
        MsgHasDLC {scriptMessageIcon = _icon, scriptMessageDlc = _dlc}
            -> mconcat
                [ "DLC "
                , _icon
                , " "
                , _dlc
                , " is active"
                ]
        MsgHasEquipment {scriptMessageCompare = _comp, scriptMessageAmt = _amt, scriptMessageWhat = _what}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (plainNum _amt)
                , " "
                , _what
                ]
        MsgSetDemilitarizedZone {scriptMessageYn = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "demilitarized" "remilitarized")
                ]
        MsgHasIdea {scriptMessageWhat = _what, scriptMessageIcon = _icon, scriptMessageKey = _key, scriptMessageLoc = _loc}
            -> mconcat
                [ "Has the "
                , _what
                , " "
                , "[[File:"
                , _icon
                ,".png|28px]]"
                , " <!-- "
                , _key
                , " -->"
                , toMessage (iquotes _loc)
                ]
        MsgAddIdea {scriptMessageWhat = _what, scriptMessageIcon = _icon, scriptMessageKey = _key, scriptMessageLoc = _loc}
            -> mconcat
                [ "Gets the "
                , _what
                , " "
                , "[[File:"
                , _icon
                ,".png|28px]]"
                , " <!-- "
                , _key
                ,  " -->"
                , toMessage (iquotes _loc)
                ]
        MsgRemoveIdea {scriptMessageWhat = _what, scriptMessageIcon = _icon, scriptMessageKey = _key, scriptMessageLoc = _loc}
            -> mconcat
                [ "Remove the "
                , _what
                , " "
                , "[[File:"
                , _icon
                ,".png|28px]]"
                , " <!-- "
                , _key
                , " -->"
                , toMessage (iquotes _loc)
                ]
        MsgAddTimedIdea {scriptMessageWhat = _what, scriptMessageIcon = _icon, scriptMessageKey = _key, scriptMessageLoc = _loc, scriptMessageDays = _days}
            -> mconcat
                [ "Gets the "
                , _what
                , " "
                , "[[File:"
                , _icon
                ,".png|28px]]"
                , " <!-- "
                , _key
                ,  " -->"
                , toMessage (iquotes _loc)
                ," for "
                , toMessage (formatDays _days)
                ]
        MsgModifyTimedIdea {scriptMessageWhat = _what, scriptMessageIcon = _icon, scriptMessageKey = _key, scriptMessageLoc = _loc, scriptMessageDays = _days}
            -> mconcat
                [ "Extend the "
                , _what
                , " "
                , "[[File:"
                , _icon
                ,".png|28px]]"
                , " <!-- "
                , _key
                ,  " -->"
                , toMessage (iquotes _loc)
                ," by "
                , toMessage (formatDays _days)
                ]
        MsgModifyIdea { scriptMessageKey = _key, scriptMessageCategory2 = _cat2, scriptMessageIcon2 = _icon2, scriptMessageKey2 = _key2, scriptMessageLoc2 = _loc2}
            -> mconcat
                [ "Modify the "
                , "<!-- "
                , _key
                ,  " -->"
                , _cat2
                , " "
                , "[[File:"
                , _icon2
                ,".png|28px]]"
                , " <!-- "
                , _key2
                ,  " -->"
                , toMessage (iquotes _loc2)
                ]
        MsgReplaceIdea { scriptMessageCategory = _cat, scriptMessageIcon = _icon, scriptMessageKey = _key, scriptMessageLoc = _loc, scriptMessageCategory2 = _cat2, scriptMessageIcon2 = _icon2, scriptMessageKey2 = _key2, scriptMessageLoc2 = _loc2}
            -> mconcat
                [ "Replace the "
                , _cat
                , " "
                , "[[File:"
                , _icon
                ,".png|28px]]"
                , " <!-- "
                , _key
                ,  " -->"
                , toMessage (iquotes _loc)
                ," with the "
                , _cat2
                , " "
                , "[[File:"
                , _icon2
                ,".png|28px]]"
                , " <!-- "
                , _key2
                ,  " -->"
                , toMessage (iquotes _loc2)
                ]
        MsgEffectBox {scriptMessageLoc = _loc, scriptMessageKey = _key, scriptMessageIcon = _icon, scriptMessageDesc = _desc}
            -> mconcat
                [ "{{effectbox|"
                , _loc
                , " <!-- "
                , _key
                ,  " -->"
                , "|file="
                , _icon
                , "|"
                , _desc
                , "\n"
                , "|modifiers="
                ]
        MsgEffectBoxEnd
            -> "}}"
        MsgHasOpinion {scriptMessageAmtText = _amtT, scriptMessageWhom = _whom, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has opinion of "
                , _whom
                , " of "
                , _comp
                , " {{icon|opinion}} "
                , _amtT
                ]
        MsgSetRule {scriptMessageAmt = _amt}
            -> mconcat
                ["Set the "
                , plural _amt "rule:" "rules:"
                ]
        MsgSetRuleYesNo {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ _icon
                , " "
                , _what
                ]
        MsgSetTechnology {scriptMessageAmt = _amt, scriptMessageWhat = _what}
            -> mconcat
                [ ifThenElseT (_amt == 0) "Remove" "Add"
                , " technology: "
                , _what
                ]
        MsgAddDoctrineCostReduction {scriptMessageAmt = _amt, scriptMessageAmt2 = _amt2, scriptMessageWhat = _what }
            -> mconcat
                [ "Gain "
                , toMessage (colourNum True _amt)
                , plural _amt " use" " uses"
                , " of "
                , toMessage (reducedNum (colourPcSign True) _amt2)
                , _what
                , "doctrine cost reduction for:"
                ]
        MsgFreeBuildingSlots {scriptMessageCompare = _comp, scriptMessageAmt = _amt, scriptMessageWhat = _what, scriptMessageYn = _yn }
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNum _amt))
                , " free {{icon|building slot|}} "
                , plural _amt "building slot" "building slots"
                , " for {{icon|"
                , _what
                , "|1}} "
                , toMessage (ifThenElseT _yn "including locked slots" "")
                ]
        MsgChangeTagFrom {scriptMessageWho = _who}
            -> mconcat
                [ "Country becomes "
                , _who
                ]
        MsgIsDemilitarizedZone {scriptMessageYn = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a demilitiarized zone"
                ]
        MsgCheckVariable {scriptMessageIcon = __icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Value of variable "
                , _what
                , " is at least "
                , toMessage (plainNum _amt)
                ]
        MsgNoBaseWeight
            -> "(no base weight?)"
        MsgAIBaseWeight {scriptMessageAmt = _amt}
            -> mconcat
                [ "Base weight: "
                , toMessage (plainNum _amt)
                ]
        MsgAIFactorOneline {scriptMessageFactor = _factor, scriptMessageMultiplier = _multiplier}
            -> mconcat
                [ "Base weight * "
                , toMessage (bold (plainNum _multiplier))
                , " if the following is true: "
                ,_factor
                ]
        MsgAIAddOneline {scriptMessageFactor = _factor, scriptMessageMultiplier = _multiplier}
            -> mconcat
                [ "Base weight "
                , toMessage (bold (plainNumSign _multiplier))
                , " if the following is true: "
                ,_factor
                ]
        MsgAIFactorHeader {scriptMessageMultiplier = _multiplier}
            -> mconcat
                [ "* Base weight * "
                , toMessage (bold (plainNum _multiplier))
                , " if the following are true:"
                ]
        MsgAIAddHeader {scriptMessageMultiplier = _multiplier}
            -> mconcat
                [ "* Base weight "
                , toMessage (bold (plainNumSign _multiplier))
                , " if the following are true:"
                ]
        MsgExperience {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " "
                , _icon
                , " "
                , _what
                ]
        MsgResetProvinceName {scriptMessageAmt = _amt}
            -> mconcat
                [ "Reset the name of the province ("
                , toMessage (plainNum _amt)
                , ")"
                ]
        MsgHasCompletedFocus {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageLoc = _loc}
            -> mconcat
                [ "Has completed national focus "
                , "[[File:"
                , _icon
                , ".png|28px]]"
                , " <!-- "
                , _what
                , " -->"
                , toMessage (iquotes _loc)
                ]
        MsgCompleteNationalFocus {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageLoc = _loc}
            -> mconcat
                [ "Complete national focus "
                , "[[File:"
                , _icon
                , ".png|28px]]"
                , " <!-- "
                , _what
                , " -->"
                , toMessage (iquotes _loc)
                ]
        MsgFocus {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageLoc = _loc}
            -> mconcat
                [ "[[File:"
                , _icon
                , ".png|x36px|link=#"
                , _loc
                , "]]"
                , " <!-- "
                , _what
                , " -->"
                , toMessage (iquotes _loc)
                ]
        MsgFocusProgress {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageLoc = _loc, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has progressed national focus "
                , "[[File:"
                , _icon
                , ".png|28px]]"
                , " <!-- "
                , _what
                , " -->"
                , toMessage (bold (iquotes _loc))
                , " "
                , _comp
                ]
        MsgHasArmySize {scriptMessageCompare = _comp, scriptMessageAmt = _amt, scriptMessageWhat = _what}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNum _amt))
                , _what
                , plural _amt "division" "divisions"
                ]
        MsgGiveGuarantee {scriptMessageWhom = _whom}
            -> mconcat
                [ "Grants guarantee of independence for "
                , _whom
                ]
        MsgGiveMilitaryAccess {scriptMessageWhom = _whom}
            -> mconcat
                [ "Give military access to "
                , _whom
                ]
        MsgSetCapital {scriptMessageWhat = _what}
            -> mconcat
                [ "Change capital to "
                , _what
                ]
        MsgStateId {scriptMessageWhat = _what}
            -> mconcat
                [ "Is state "
                , _what
                ]
        MsgTransferState {scriptMessageWhat = _what}
            -> mconcat
                [ "Becomes owner and controller of "
                , _what
                ]
        MsgSetStateName {scriptMessageWhat = _what}
            -> mconcat
                [ "Rename state to "
                , _what
                ]
        MsgSetStateCategory {scriptMessageWhat = _what}
            -> mconcat
                [ "Set state category to "
                , _what
                ]
        MsgAlways {scriptMessageYn = _yn}
            -> toMessage (ifThenElseT _yn "{{icon|yes}} Always" "{{icon|no}} Never")
        MsgIsUnitLeader {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a unit leader"
                ]
        MsgModifier {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (bold (plainNum _amt))
                ]
        MsgModifierSign {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (bold (plainNumSign _amt))
                ]
        MsgModifierColourPos {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (colourNumSign True _amt)
                ]
        MsgModifierColourNeg {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (colourNumSign False _amt)
                ]
        MsgModifierPc {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (bold (plainPc _amt))
                ]
        MsgModifierPcSign {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (bold (plainPcSign _amt))
                ]
        MsgModifierPcReduced {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (bold (reducedNum plainPc _amt))
                ]
        MsgModifierPcReducedSign {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (bold (reducedNum plainPcSign _amt))
                ]
        MsgModifierPcPos {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (colourPcSign True _amt)
                ]
        MsgModifierPcNeg {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (colourPcSign False _amt)
                ]
        MsgModifierPcPosReduced {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (reducedNum (colourPcSign True) _amt)
                ]
        MsgModifierPcNegReduced {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _what
                , ": "
                , toMessage (reducedNum (colourPcSign False) _amt)
                ]
        MsgModifierVar {scriptMessageWhat = _what, scriptMessageAmtText = _amtT}
            -> mconcat
                [ _what
                , ": "
                , toMessage (boldText _amtT)
                ]
        MsgAddResearchSlot {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , plural _amt " research slot" " research slots"
                ]
        MsgAddThreat {scriptMessageAmt = _amt}
            -> mconcat
                [ "{{icon|world tension|1}} is "
                , increasedOrDecreased _amt
                , " by "
                , toMessage (colourNum False _amt)
                ]
        MsgAddNamedThreat {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageWhom = _whom}
            -> mconcat
                [ "{{icon|world tension}} "
                , _icon
                , " is "
                , toMessage (increasedOrDecreased _amt)
                , " by "
                , toMessage (colourNumSign False _amt)
                , " ("
                , toMessage (italicText _whom)
                , ")"
                ]
        MsgAddTechBonus {scriptMessageAmt = _amt, scriptMessageName = _name, scriptMessageUses = _uses}
            -> mconcat
                [ "Gain "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " research bonus "
                , if T.null _name then "" else _name
                , "("
                , toMessage (colourNum True _uses)
                , " "
                , plural _uses "use" "uses"
                , ") towards:"
                ]
        MsgAddTechBonusAhead {scriptMessageAmt = _amt, scriptMessageName = _name, scriptMessageUses = _uses}
            -> mconcat
                [ "Gain "
                , toMessage (colourNum True _amt)
                , plural _amt " year" " years"
                , " ahead of time penalty reduction "
                , if T.null _name then "" else toMessage (italicText _name)
                , "("
                , toMessage (colourNum True  _uses)
                , " "
                , plural _uses "use" "uses"
                , ") towards:"
                ]
        MsgAddTechBonusAheadBoth {scriptMessageBonus = _bonus, scriptMessageYearahead = _year, scriptMessageName = _name, scriptMessageUses = _uses}
            -> mconcat
                [ "Gain "
                , toMessage (reducedNum (colourPcSign True) _bonus)
                , " research bonus or "
                , toMessage (colourNum True _year)
                , plural _year " year" " years"
                , " ahead of time penalty reduction "
                , if T.null _name then "" else toMessage (italicText _name)
                , "("
                , toMessage (colourNum True  _uses)
                , " "
                , plural _uses "use" "uses"
                , ") towards:"
                ]
        MsgAddToWar {scriptMessageWho = _who, scriptMessageWhom = _whom, scriptMessageWhy = _why}
            -> mconcat
                [ "Joins "
                , _who
                , " in war against "
                , _whom
                ]
        MsgCreateEquipmentVariant {scriptMessageWhat = _what, scriptMessageWhat2 = _what2}
            -> mconcat
                [ "Create a "
                , toMessage (italicText _what)
                , " variant called "
                , toMessage (iquotes _what2)
                ]
        MsgCreateWG {scriptMessageWhat = _what, scriptMessageWhom = _whom, scriptMessageStates = _state}
            -> mconcat
                [ "Gets a "
                , toMessage (italicText _what)
                , " wargoal"
                , _state
                , " against "
                , _whom
                ]
        MsgCreateWGDuration {scriptMessageWhat = _what, scriptMessageWhom = _whom, scriptMessageAmt = _amt, scriptMessageStates = _state}
            -> mconcat
                [ "Gets a "
                , toMessage (italicText _what)
                , " wargoal "
                , _state
                , " against "
                , _whom
                , " for "
                , toMessage (plainNum _amt)
                , " days"
                ]
        MsgSaveEventTargetAs {scriptMessageName = _name}
            -> mconcat
                [ "Save as event target named <tt>"
                , _name
                , "</tt>"
                ]
        MsgSaveGlobalEventTargetAs {scriptMessageName = _name}
            -> mconcat
                [ "Save as global event target named <tt>"
                , _name
                , "</tt>"
                ]
        MsgRemoveClaimBy {scriptMessageWho = _who}
            -> mconcat
                [ "Claim lost by"
                ,  _who
                ]
        MsgRemoveCoreOf {scriptMessageWho = _who}
            -> mconcat
                [ "Remove the core of"
                , _who
                ]
        MsgRemoveFromFaction {scriptMessageWho = _who}
            -> mconcat
                [ "Remove "
                , _who
                , " from faction led by current scope"
                ]
        MsgDismantleFaction
            -> "Dismantle faction"
        MsgDropCosmeticTag
            -> "Remove cosmetic tag"
        MsgSetCompliance {scriptMessageAmt = _amt}
            -> mconcat
                [ "Set comliance to "
                , toMessage (plainPc _amt)
                ]
        MsgSurrenderProgress  {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPc _amt))
                , " surrender progress"
                ]
        MsgSurrenderProgressVar  {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , boldText _amtT
                , " surrender progress"
                ]
        MsgSetVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Set variable "
                , _var1
                , " to the value of "
                , _var2
                ]
        MsgSetTempVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Set temporary variable "
                , _var1
                , " to the value of "
                , _var2
                ]
        MsgSetVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Set variable "
                , _var
                , " to "
                , toMessage (Doc.ppFloat _amt)
                ]
        MsgSetTempVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Set temporary variable "
                , _var
                , " to "
                , toMessage (Doc.ppFloat _amt)
                ]
        MsgAddVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Increase variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgAddTempVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Increase temporary variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgAddVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ toMessage (increaseOrDecrease _amt)
                , " variable "
                , _var
                , " by "
                , toMessage (plainNum (if _amt < 0 then -_amt else _amt))
                ]
        MsgAddTempVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ toMessage (increaseOrDecrease _amt)
                , " temporary variable "
                , _var
                , " by "
                , toMessage (plainNum (if _amt < 0 then -_amt else _amt))
                ]
        MsgSubVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Decrease variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgSubTempVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Decrease temporary variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgSubVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Decrease variable "
                , _var
                , " by "
                , toMessage (plainNum _amt)
                ]
        MsgSubTempVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Decrease temporary variable "
                , _var
                , " by "
                , toMessage (plainNum _amt)
                ]
        MsgMulVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Multiply variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgMulTempVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Multiply temporary variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgMulVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Multiply variable "
                , _var
                , " by "
                , toMessage (plainNum _amt)
                ]
        MsgMulTempVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Multiply temporary variable "
                , _var
                , " by "
                , toMessage (plainNum _amt)
                ]
        MsgDivVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Divide variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgDivTempVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Divide temporary variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgDivVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Divide variable "
                , _var
                , " by "
                , toMessage (plainNum _amt)
                ]
        MsgDivTempVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Divide temporary variable "
                , _var
                , " by "
                , toMessage (plainNum _amt)
                ]
        MsgChkVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Value of variable "
                , _var1
                , " is at least that of "
                , _var2
                ]
        MsgChkVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Value of variable "
                , _var
                , " is at least "
                , toMessage (plainNum _amt)
                ]
        MsgEquVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Value of variable "
                , _var1
                , " is equal to that of "
                , _var2
                ]
        MsgEquVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Value of variable "
                , _var
                , " equal to "
                , toMessage (plainNum _amt)
                ]
        MsgHasDefensiveWar { scriptMessageYn = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "" "''not''")
                , " in a defensive war"
                ]
        MsgLoadFocusTree { scriptMessageWhat = _what }
            -> mconcat
                [ "Changes the national focus tree to "
                , ifThenElseT (_what /= "National Focus") _what "the Generic National Focus"
                ]
        MsgLoadFocusTreeKeep { scriptMessageWhat = _what, scriptMessageYesNo = _yesno }
            -> mconcat
                [ "Changes the national focus tree to "
                , ifThenElseT (_what /= "National Focus") _what "the Generic National Focus"
                , " and"
                , if _yesno == "yes" then "" else "'' don't''"
                , " keep completed focuses"
                ]
        MsgModifyBuildingResources { scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt }
            -> mconcat
                [ "Modify "
                , _what
                , " resource output by: "
                , toMessage (colourNumSign True _amt)
                , " "
                , _icon
                ]
        MsgIsFullyControlledBy { scriptMessageWho = _who }
            -> mconcat
                [ "Is fully controlled by "
                , _who
                ]
        MsgIsGuaranteedBy { scriptMessageWho = _who }
            -> mconcat
                [ "Is guaranteed independence by "
                , _who
                ]
        MsgHasVolunteersAmountFrom {scriptMessageWho = _who, scriptMessageCompare = _comp, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNum _amt))
                , " volunteer divisions from "
                , _who
                ]
        MsgHasCivilWar {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " in a civil war"
                ]
        MsgOrignalTag {scriptMessageWhom = _whom}
            -> mconcat
                [ "The country was previously or is "
                , _whom
                ]
        MsgHasGovernment {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Current ruling party is "
                , if T.null _icon then "the same as" else _icon
                , " "
                , _what
                ]
        MsgIsHistoricalFocusOn { scriptMessageYn = _yn }
            -> mconcat
                [ "Historical Focus is "
                , toMessage (ifThenElseT _yn "'''on'''" "'''off'''")
                ]
        MsgAirBase {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNum _amt))
                , " {{icon|air base|1}} "
                ]
        MsgAirBaseVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , boldText _amtT
                , " {{icon|air base|1}} "
                ]
        MsgAmountResearchSlots {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNum _amt))
                , " research "
                , plural _amt "slot" "slots"
                ]
        MsgAmountResearchSlotsVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , boldText _amtT
                , " research slots"
                ]
        MsgAnyWarScore {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainPc _amt))
                , " war progress"
                ]
        MsgAnyWarScoreVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , boldText _amtT
                , " war progress"
                ]
        MsgArmsFactory {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNum _amt))
                , " {{icon|mic|1}}"
                ]
        MsgArmsFactoryVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , boldText _amtT
                , " {{icon|mic|1}}"
                ]
        MsgCompareAutonomyProgressRatio {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPc _amt))
                , " {{icon|autonomy|1}} progress"
                ]
        MsgCompareAutonomyProgressRatioVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , boldText _amtT
                , " {{icon|autonomy|1}} progress"
                ]
        MsgDockyard {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , toMessage (bold (plainNum _amt))
                , " {{icon|nic|1}}"
                ]
        MsgDockyardVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "Has "
                , _comp
                , " "
                , boldText _amtT
                , " {{icon|nic|1}}"
                ]
        MsgEnemiesStrengthRatio {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "The enemies strength is "
                , _comp
                , " "
                , toMessage (reducedNum plainPc _amt)
                , " compared to the current scope"
                ]
        MsgEnemiesStrengthRatioVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "The enemies strength is "
                , _comp
                , " "
                , boldText _amtT
                , " compared to the current scope"
                ]
        MsgIsCharacter {scriptMessageWhat = _what}
            -> mconcat
                [ "Is character "
                ,  toMessage (iquotes _what)
                ]
        MsgIsOnContinent {scriptMessageWhat = _what}
            -> mconcat
                [ "Is on the continent "
                ,  toMessage (iquotes _what)
                ]
        MsgHasCountryLeader {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has leader "
                , toMessage (iquotes _whom)
                ]
        MsgIsIslandState {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " an island state"
                ]
        MsgExportVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Export variable <tt>"
                , _var2
                , "</tt> to <tt>"
                , _var1
                , "</tt>"
                ]
        MsgExportVariableWho { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2, scriptMessageWhom = _whom}
            -> mconcat
                [ "Export "
                , _whom
                , "'s internal variable <tt>"
                , _var2
                , "</tt> to <tt>"
                , _var1
                , "</tt>"
                ]
        MsgThreat {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|world tension|1}} is "
                , _comp
                , " "
                , toMessage $ bold $ if _amt > 1 then plainPc _amt else reducedNum plainPc _amt
                ]
        MsgThreatVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|world tension|1}} is "
                , _comp
                , " "
                , boldText _amtT
                ]
        MsgFascismCompare {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|fascism|1}} popularity is "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPc _amt))
                ]
        MsgFascismCompareVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|fascism|1}} popularity is "
                , _comp
                , " "
                , boldText _amtT
                ]
        MsgDemocraticCompare {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|democratic|1}} popularity is "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPc _amt))
                ]
        MsgDemocraticCompareVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|democratic|1}} popularity is "
                , _comp
                , " "
                , boldText _amtT
                ]
        MsgCommunismCompare {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|communism|1}} popularity is "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPc _amt))
                ]
        MsgCommunismCompareVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|communism|1}} popularity is "
                , _comp
                , " "
                , boldText _amtT
                ]
        MsgNeutralityCompare {scriptMessageAmt = _amt, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|neutrality|1}} popularity is "
                , _comp
                , " "
                , toMessage (bold (reducedNum plainPc _amt))
                ]
        MsgNeutralityCompareVar {scriptMessageAmtT = _amtT, scriptMessageCompare = _comp}
            -> mconcat
                [ "{{icon|neutrality|1}} popularity is "
                , _comp
                , " "
                , boldText _amtT
                ]
        MsgAnnexCountry {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Annex "
                , _whom
                , _what
                ]
        MsgIsInFactionWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is in the same faction as "
                , _whom
                ]
        MsgIsJustifyingWargoalAgainst {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is justifying a {{icon|war goal|1}} against "
                , _whom
                ]
        MsgSetNationality {scriptMessageWhat = _what}
            -> mconcat
                [ "Set nationality to "
                , _what
                ]
        MsgSetNationalityChar {scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ "Set nationality of "
                , toMessage (iquotes _who)
                , " to "
                , _what
                ]
        MsgHasGuaranteed {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has guaranteed "
                , _whom
                ]
        MsgModifyTechSharingBonus {scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ "Modify technology sharing bonus "
                , _who
                , " by "
                , toMessage (reducedNum (colourPcSign True) _amt)
                ]
        MsgAddToFaction {scriptMessageWhom = _whom}
            -> mconcat
                [ "Add "
                , _whom
                , " to the current scope's faction"
                ]
        MsgAddResource {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt, scriptMessageWhere = _where}
            -> mconcat
                [ addOrRemove _amt
                , " production of "
                , toMessage $ bold (plainNum _amt)
                , " "
                , _icon
                , " "
                , _what
                , ifThenElseT (T.null _where) "" " to "
                , _where
                ]
        MsgAddPopularity {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage $ bold (reducedNum plainPcSign _amt)
                , " "
                , _icon
                , " "
                , _what
                , " party popularity"
                ]
        MsgBuildRailway {scriptMessageAmt = _amt, scriptMessageStart = _start, scriptMessageEnd = _end}
            -> mconcat
                [ "Build a level "
                , toMessage (bold (plainNum _amt))
                , " {{icon|railway|1}} "
                , " from "
                , _start
                , " to "
                , _end
                ]
        MsgBuildRailwayProv {scriptMessageAmt = _amt, scriptMessageStartProv = _start, scriptMessageEndProv = _end}
            -> mconcat
                [ "Build a level "
                , toMessage (bold (plainNum _amt))
                , " {{icon|railway|1}} "
                , " from province ("
                , toMessage (roundNumNoSpace _start)
                , ") to province ("
                , toMessage (roundNumNoSpace _end)
                , ")"
                ]
        MsgBuildRailwayPath {scriptMessageAmt = _amt, scriptMessageWhat = _what}
            -> mconcat
                [ "Build a level "
                , toMessage (bold (plainNum _amt))
                , " {{icon|railway|1}} "
                , _what
                ]
        MsgCanBuildRailway {scriptMessageStart = _start, scriptMessageEnd = _end}
            -> mconcat
                [ "Can build {{icon|railway|1}} from "
                , _start
                , " to "
                , _end
                ]
        MsgCanBuildRailwayProv {scriptMessageStartProv = _start, scriptMessageEndProv = _end}
            -> mconcat
                [ "Can build {{icon|railway|1}} from province ("
                , toMessage (plainNum _start)
                , ") to province ("
                , toMessage (plainNum _end)
                , ")"
                ]
        MsgSetProvinceName {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "Rename the province ("
                , toMessage (plainNum _amt)
                , ") to "
                , _whom
                ]
        MsgSetVictoryPoints {scriptMessageAmt2 = _amt2, scriptMessageAmt = _amt}
            -> mconcat
                [ "Set {{icon|vp|1}} "
                , toMessage (plainNum _amt)
                , " to province ("
                , toMessage (roundNum _amt2)
                , ")"
                ]
        MsgStrengthRatio {scriptMessageWhom = _whom, scriptMessageCompare = _comp, scriptMessageAmt = _amt}
            -> mconcat
                [ _whom
                , " has "
                , _comp
                , toMessage (reducedNum plainPc _amt)
                , " of the number divisions than current scope's"
                ]
        MsgHasSubject {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has "
                , _whom
                , " as a subject nation"
                ]
        MsgSetCosmeticTag {scriptMessageWhat = _what}
            -> mconcat
                [ "Set cosmetic tag to <tt>"
                , _what
                , "</tt>"
                ]
        MsgHasFocusTree {scriptMessageWhat = _what}
            -> mconcat
                [ "Hast the focus tree <tt>"
                , _what
                , "</tt>"
                ]
        MsgAddAiStrategy
            -> "Adds AI strategy<!-- check script if you want more info -->"
        MsgAddAutonomyRatio {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , if T.null _what then "" else " (" <> italicText _what <> ")"
                , " "
                , toMessage (bold (reducedNum plainPc _amt))
                , " {{icon|autonomy|1}} progress"
                ]
        MsgAddFieldMarshalRole {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , ifThenElseT (T.null _who) "Becomes " " becomes "
                , "a Field Marshal"
                ]
        MsgAddOffsiteBuilding {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Add "
                , toMessage (bold (plainNum _amt))
                , " off map"
                , _icon
                , " "
                , _what
                ]
        MsgReleaseAutonomy {scriptMessageWho = _who, scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Release "
                , _who
                , " as "
                , _icon
                , " "
                , _what
                , if _amt > 0 then " at {{icon|autonomy|1}} " else ""
                , if _amt > 0 then toMessage (reducedNum plainPc _amt) else ""
                ]
        MsgSetAutonomy {scriptMessageWho = _who, scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt, scriptMessageWar = _war}
            -> mconcat
                [ "Set autonomy level of "
                , _who
                , " to "
                , _icon
                , " "
                , _what
                , if _amt > 0 then " at {{icon|autonomy|1}} " else ""
                , if _amt > 0 then toMessage (reducedNum plainPc _amt) else ""
                , _war
                ]
        MsgSetPolitics {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageMonths = _months}
            -> mconcat
                [ "Set the ruling party to "
                , _icon
                , " "
                , _who
                , if _months > 0 then " with elections every " else ""
                , if _months > 0 then formatMonths _months else ""
                ]
        MsgStartCivilWar {scriptMessageWhat = _what, scriptMessageAmtText = _amtT}
            -> mconcat
                [ "Start a {{icon|"
                , _what
                , "}} "
                , _what
                , " civil war ("
                , _amtT
                , " size)"
                ]
        MsgSetPartyName {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ "Set the {{icon|"
                , _icon
                , "}} "
                , _icon
                , " party name to ("
                , _who
                , ") "
                , _what
                ]
        MsgIsInTechSharingGroup {scriptMessageWhat = _what}
            -> mconcat
                [ "Is in the technology sharing group "
                , toMessage (iquotes _what)
                ]
        MsgAddToTechSharingGroup {scriptMessageWhat = _what}
            -> mconcat
                [ "Add to the technology sharing group "
                , toMessage (iquotes _what)
                ]
        MsgRemoveDynamicMod {scriptMessageWhat = _what}
            -> mconcat
                [ "Remove the dynamic modifier "
                , toMessage (iquotes _what)
                ]
        MsgIsStateCore {scriptMessageWhat = _what}
            -> mconcat
                [ "Is a core state of "
                , _what
                ]
        MsgHasRule {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Rule "
                , _whom
                , " is set to <tt>"
                , _what
                , "</tt>"
                ]
        MsgHasOffensiveWar {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "" "''not''")
                , " in a offensive war"
                ]
        MsgIsMajor {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " a Major country"
                ]
        MsgDate {scriptMessageCompare = _comp, scriptMessageMonth = _month, scriptMessageDay = _day, scriptMessageYear = _year}
            -> mconcat
                [ _comp
                , " "
                , _month
                , ifThenElseT (_day /= 0) (" " <> toMessage (plainNum _day)) ""
                , ifThenElseT (_day /= 0) (" of " <> toMessage (plainNum _year)) (toMessage (plainNum _year))
                ]
        MsgSendEquipment {scriptMessageAmtT = _amtT, scriptMessageWhat = _what, scriptMessageWhom = _whom, scriptMessageYn = _yn}
            -> mconcat
                [ "Send "
                , _amtT
                , " "
                , _what
                , " to "
                , _whom
                , ifThenElseT _yn "" " prioritising older equipment"
                ]
        MsgRandomListTrigger
            -> "Only considered if:"
        MsgRandomListModifier {scriptMessageAmt = _amt}
            -> mconcat
                [ "Chance increases '''x "
                , toMessage (plainNum _amt)
                , "''' if:"
                ]
        MsgRandomListAddModifier {scriptMessageAmt = _amt}
            -> mconcat
                [ "Chance base weight changes by '''"
                , toMessage (plainNumSign _amt)
                , "''' if:"
                ]
        MsgUnlockDecisionCategoryTooltip {scriptMessageWhat = _what}
            -> mconcat
                [ "Unlock the "
                , _what
                , " decisions"
                ]
        MsgUnlockDecisionTooltip {scriptMessageWhat = _what}
            -> mconcat
                [ "Unlock the "
                , _what
                , " decision"
                ]
        MsgIsPuppet {scriptMessageYn = _yn}
            -> mconcat
                [ "Is "
                , ifThenElseT _yn " a subject" "fully independent"
                ]
        MsgHasNonAggressionPactWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has a {{icon|nap|1}} with "
                , _whom
                ]
        MsgHasOffensiveWarWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is in a offensive war against "
                , _whom
                ]
        MsgAddDynamicModifier {scriptMessageWhat = _what, scriptMessageWho = _who, scriptMessageDaysText = _days}
            -> mconcat
                [ "Add the dynamic modifier "
                , _what
                , " to "
                , _who
                , if T.null _days then "" else " for "
                , _days
                , " providing the following effects:"
                ]
        MsgIsFactionLeader {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " leader of a faction"
                ]
        MsgIsOwnedAndControlledBy {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is owned and controlled by "
                , _whom
                ]
        MsgIsPuppetOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is a subject of "
                , _whom
                ]
        MsgHasWargoalAgainst {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has a {{icon|war goal|1}} against "
                , _whom
                ]
        MsgHasWargoalAgainstType {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Has a {{icon|war goal}} "
                , _what
                , " war goal against"
                , _whom
                ]
        MsgAddBuildingConstruction {scriptMessageIcon = _icon, scriptMessageWhat = _type, scriptMessageAmt = _amt, scriptMessageVar = _var, scriptMessageProv = _prov}
            -> mconcat
                [ "Add "
                , boldText $ if _var == "" then toMessage (plainNum _amt) else _var
                , " "
                , _icon
                , " "
                , _type
                ,_prov
                ]
        MsgRemoveBuilding {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Remove "
                , _icon
                , " "
                , _what
                , " by up to "
                , toMessage (colourNumSign True (negate _amt))
                ]
    renderMessage _ _ _ = error "Sorry, non-English localisation not yet supported."

-- | Message paired with an indentation level.
type IndentedMessage = (Int, ScriptMessage)
-- | List of messages, paired with their respective indentation levels.
type IndentedMessages = [IndentedMessage]

-- | Convenience synonym.
type StatementHandler g m = GenericStatement -> PPT g m IndentedMessages

-- | Convert a single message to Text.
messageText :: (IsGameData (GameData g), Monad m) => ScriptMessage -> PPT g m Text
messageText msg = do
    mlangs <- getLangs
    return $ renderMessage Script mlangs msg

-- | Convert a single message to Doc.
message :: (IsGameData (GameData g), Monad m) => ScriptMessage -> PPT g m Doc
message msg = Doc.strictText <$> messageText msg

-- | Convert a list of messages zipped with their indentation levels to a Doc.
-- Each message is prepended with a number of asterisks (levels of bullet
-- list) equal to its indentation level.
imsg2doc :: (IsGameData (GameData g), Monad m) => IndentedMessages -> PPT g m Doc
imsg2doc msgs = PP.vsep <$>
                mapM (\(i,rm) -> do
                        m <- message rm
                        return (PP.hsep [Doc.strictText (T.replicate i "*"),  m]))
                     msgs

-- | As 'imsg2doc', but use HTML to format the messages instead of wiki markup.
-- This behaves better with <pre> blocks but doesn't play well with idea
-- groups.
imsg2doc_html :: forall g m. (IsGameData (GameData g), Monad m) => IndentedMessages -> PPT g m Doc
imsg2doc_html [] = return mempty
imsg2doc_html msgs@((i,_):_)
    | i > 0     = PP.enclose "<ul>" "</ul>" . fst <$> imsg2doc' msgs
    | otherwise = fst <$> imsg2doc' msgs
    where
        -- Format all (remaining) messages at the current indent level.
        imsg2doc' :: IndentedMessages -> PPT g m (Doc, IndentedMessages)
        imsg2doc' [] = return (mempty, [])
        imsg2doc' [(_, rm)] = do -- Last message.
            m <- message rm
            return (PP.enclose "<li>" "</li>" m, [])
        imsg2doc' ((i, rm):msgs@((i',_):_))
            | i < i' = do
                -- New indent.
                m <- message rm
                -- Format the indented stuff.
                (indented, moremsgs) <- imsg2doc' msgs
                -- Format stuff after the indent.
                (postdoc, restmsgs) <- imsg2doc' moremsgs
                -- Put it all together.
                return (PP.vsep
                            [PP.enclose "<li>" "</li>"
                                (PP.vsep
                                    [m
                                    ,PP.enclose "<ul>" "</ul>" indented])
                            ,postdoc]
                       , restmsgs)
            | i > i' = do
                -- Last message at this level.
                m <- PP.enclose "<li>" "</li>" <$> message rm
                return (m, msgs)
            | otherwise = do
                -- Carry on with this indent level.
                m <- PP.enclose "<li>" "</li>" <$> message rm
                (postdoc, restmsgs) <- imsg2doc' msgs
                return (m <> PP.line <> postdoc, restmsgs)
