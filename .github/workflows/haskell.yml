name: Haskell Release
env:
  # used to get the correct settings file
  GAME: eu4
#on:
#  push:
#    branches: [ "master" ]
#  pull_request:
#    branches: [ "master" ]
on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        os:
          - windows
          - ubuntu
          - macos

    name: 'build_prod: ${{ matrix.os }}-latest'
    runs-on: ${{ matrix.os }}-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup Haskell
      uses: haskell/actions/setup@v2
      id: setup
      with:
        ghc-version: '8.10.7'
        cabal-version: '3.6.2.0'

    - name: Configure the build
      run: |
        cabal configure
        cabal freeze

    - name: Restore cached dependencies
      uses: actions/cache/restore@v3
      id: cache
      env:
        key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ env.key }}-freeze-${{ hashFiles('cabal.project.freeze') }}
        restore-keys: ${{ env.key }}-

    - name: Install dependencies
      run: cabal build all --only-dependencies

    # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
    - name: Save cached dependencies
      uses: actions/cache/save@v3
      # Caches are immutable, trying to save with the same key would error.
      if: ${{ steps.cache.outputs.cache-primary-key != steps.cache.outputs.cache-matched-key }}
      with:
        path: ${{ steps.setup.outputs.cabal-store }}
        key: ${{ steps.cache.outputs.cache-primary-key }}
    - name: Build
      run: |
        cp settings_example_${{ env.GAME }}.yml settings.yml
        cabal install --install-method=copy --overwrite-policy=always --installdir=dist
    - name: Include extra files
      run: |
        cp settings.yml dist/
        cp README.md dist/
    - name: Store binary
      uses: actions/upload-artifact@v3
      with:
        name: pdxparse-${{ env.GAME }}-${{ matrix.os }}
        path: dist
  release:
    if: ${{ always() }}
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
    - name: Get tag annotation
      id: tagannotation
      run: |
        echo "Ref name is $GITHUB_REF_NAME"
        git tag -l --format='%(contents:body)' $GITHUB_REF_NAME
        echo "annotation=$(git tag -l --format='%(contents:body)' $GITHUB_REF_NAME)" >> "$GITHUB_OUTPUT"
    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v3
    - name: Zip artifacts
      run: for folder in pdxparse-${{ env.GAME }}-*; do echo "creating ${folder}.zip ..."; zip -r ${folder}.zip $folder; done
    - name: Release
      uses: softprops/action-gh-release@v1
#      if: startsWith(github.ref, 'refs/tags/')
      with:
        name: ${{ steps.tagannotation.outputs.annotation }}
        generate_release_notes: true
        draft: true
        files: pdxparse-${{ env.GAME }}-*.zip